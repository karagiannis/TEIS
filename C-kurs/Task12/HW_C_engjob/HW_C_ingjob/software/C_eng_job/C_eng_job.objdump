
C_eng_job.elf:     file format elf32-littlenios2
C_eng_job.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000379c memsz 0x0000379c flags r-x
    LOAD off    0x000047bc vaddr 0x008037bc paddr 0x00803ee4 align 2**12
         filesz 0x00000728 memsz 0x00000728 flags rw-
    LOAD off    0x0000560c vaddr 0x0080460c paddr 0x0080460c align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003574  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  008036f4  008036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000728  008037bc  00803ee4  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  0080460c  0080460c  0000560c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller 00000000  00804744  00804744  00004ee4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004ee4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000668  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b137  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000375c  00000000  00000000  000106a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003aaa  00000000  00000000  00013e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000dc0  00000000  00000000  000178b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022ce  00000000  00000000  00018670  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000022b2  00000000  00000000  0001a93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001cbf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000308  00000000  00000000  0001cc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ee99  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0001ee9c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001eea5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001eea6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001eea7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001eeb2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001eebd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  0001eec8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  0001eedf  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c6c2  00000000  00000000  0001ef25  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
008036f4 l    d  .rodata	00000000 .rodata
008037bc l    d  .rwdata	00000000 .rwdata
0080460c l    d  .bss	00000000 .bss
00804744 l    d  .SDRAM_Controller	00000000 .SDRAM_Controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../C_eng_job_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00804614 l     O .bss	00000004 hours.3582
00804618 l     O .bss	00000004 minutes.3583
0080461c l     O .bss	00000004 seconds.3584
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00803bbc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00803ebc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00802ab8 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803cd8 l     O .rwdata	0000002c jtag_uart_0
00803c9c l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00802f30 l     F .text	00000058 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803004 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00803200 l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 memcmp.c
00804640 g     O .bss	00000004 alt_instruction_exception_handler
00802e40 g     F .text	00000020 adc_stop
008028a8 g     F .text	00000040 alt_main
00804644 g     O .bss	00000100 alt_irq
00803ee4 g       *ABS*	00000000 __flash_rwdata_start
00804744 g       *ABS*	00000000 __alt_heap_start
00801d58 g     F .text	000000c8 i2bcd
00804610 g     O .bss	00000004 j
00801040 g     F .text	0000010c print_char
00801604 g     F .text	000000a8 print_welcome_screen
00803510 g     F .text	00000008 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000000c __reset
00802f04 g     F .text	00000018 adc_interrupt_disable
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080462c g     O .bss	00000004 errno
00800ce8 g     F .text	0000010c read_accelerometerX
00802dd4 g     F .text	00000064 altera_modular_adc_init
00804634 g     O .bss	00000004 alt_argv
0080beac g       *ABS*	00000000 _gp
00801e20 g     F .text	00000280 update_time
008009b0 g     F .text	0000008c read_temp
00803d04 g     O .rwdata	00000180 alt_fd_list
00803084 g     F .text	00000074 alt_find_dev
008022bc g     F .text	00000028 memcpy
0080114c g     F .text	000000a8 print_str
00802e88 g     F .text	00000014 adc_set_mode_run_continuously
00803288 g     F .text	00000074 alt_io_redirect
00803650 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00802c24 g     F .text	0000005c altera_avalon_jtag_uart_read
00802294 g     F .text	00000014 malloc
00802198 g     F .text	00000064 .hidden __udivsi3
0080264c g     F .text	00000050 _sbrk_r
00800ea0 g     F .text	000000d0 print_hline
00800ac8 g     F .text	00000034 config_time_base
00803ec0 g     O .rwdata	00000008 altera_modular_adc_list
00803ec8 g     O .rwdata	00000004 alt_max_fd
008037bc g     O .rwdata	00000400 font8x8_basic
00803eae g     O .rwdata	00000004 spi_command_rx
00803eb4 g     O .rwdata	00000004 _global_impure_ptr
00804744 g       *ABS*	00000000 __bss_end
00803198 g     F .text	00000068 alt_iic_isr_register
00800b48 g     F .text	00000114 draw_graph
00802fec g     F .text	00000014 adc_wait_for_interrupt
00800df4 g     F .text	000000ac print_pix
00803180 g     F .text	00000018 alt_ic_irq_enabled
0080463c g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	00000060 alt_irq_handler
00803e84 g     O .rwdata	00000028 alt_dev_null
00802e70 g     F .text	00000018 adc_set_mode_run_once
00803000 g     F .text	00000004 alt_dcache_flush_all
0080227c g     F .text	00000018 calloc
00803ee4 g       *ABS*	00000000 __ram_rwdata_end
00803ecc g     O .rwdata	00000008 alt_dev_list
00800f70 g     F .text	000000d0 print_vline
00802ad8 g     F .text	000000d4 write
008025f4 g     F .text	00000058 _putc_r
008037bc g       *ABS*	00000000 __ram_rodata_end
00802e60 g     F .text	00000010 adc_start
008021fc g     F .text	00000058 .hidden __umodsi3
00804744 g       *ABS*	00000000 end
0080460c g     O .bss	00000004 i
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802c80 g     F .text	00000034 altera_avalon_jtag_uart_write
00802364 g     F .text	000000e4 _free_r
008028e8 g     F .text	00000170 alt_printf
00800afc g     F .text	0000004c init_measurement
00800180 g     F .text	0000003c _start
00800c5c g     F .text	0000008c update_graph
00802cb4 g     F .text	000000e8 alt_avalon_spi_command
00802bcc g     F .text	00000038 alt_sys_init
00802254 g     F .text	00000028 .hidden __mulsi3
008037bc g       *ABS*	00000000 __ram_rwdata_start
008036f4 g       *ABS*	00000000 __ram_rodata_start
00802c04 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
008035c4 g     F .text	0000008c alt_get_fd
008036c4 g     F .text	00000030 memcmp
00804744 g       *ABS*	00000000 __alt_stack_base
0080185c g     F .text	00000068 queue_dequeue
00802ef0 g     F .text	00000014 adc_interrupt_enable
00803518 g     F .text	000000ac alt_find_file
0080300c g     F .text	00000078 alt_dev_llist_insert
00802a6c g     F .text	0000004c sbrk
00802304 g     F .text	00000060 _calloc_r
008026b8 g     F .text	000000b8 __sfvwrite_small_dev
0080460c g       *ABS*	00000000 __bss_start
008022e4 g     F .text	00000020 memset
008001bc g     F .text	000007f4 main
00804630 g     O .bss	00000004 alt_envp
00802c14 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00804620 g     O .bss	00000003 accel_data
00802d9c g     F .text	00000038 alt_adc_word_read
01000000 g       *ABS*	00000000 __alt_heap_limit
00802448 g     F .text	00000158 _malloc_r
00803edc g     O .rwdata	00000004 alt_errno
008025a0 g     F .text	00000054 putc
008020a0 g     F .text	00000084 .hidden __divsi3
008036f4 g       *ABS*	00000000 __flash_rodata_start
008015a0 g     F .text	00000064 read_pixel_ram_int
00802bac g     F .text	00000020 alt_irq_init
008034b4 g     F .text	0000005c alt_release_fd
00802770 g     F .text	00000058 _write_r
00803eb8 g     O .rwdata	00000004 _impure_ptr
00804638 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller
00800020 g       .exceptions	00000000 alt_irq_entry
00803ed4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008030fc g     F .text	00000004 alt_ic_isr_register
00803ee4 g       *ABS*	00000000 _edata
00804744 g       *ABS*	00000000 _end
00800a3c g     F .text	0000008c read_light
00802fdc g     F .text	00000010 adc_interrupt_asserted
008011f4 g     F .text	00000158 print_symmetry_dots_circle
00800180 g       *ABS*	00000000 __ram_exceptions_end
00803140 g     F .text	00000040 alt_ic_irq_disable
00802f1c g     F .text	00000014 adc_clear_interrupt_status
00802124 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802e38 g     F .text	00000008 altera_modular_adc_open
0080000c g       .entry	00000000 _exit
00801950 g     F .text	00000408 queue_print_screen
0080269c g     F .text	0000001c strlen
00803eac g     O .rwdata	00000002 spi_command_tx
008032fc g     F .text	000001b8 open
00802a58 g     F .text	00000014 alt_putchar
00804624 g     O .bss	00000004 __malloc_sbrk_start
00802e9c g     F .text	00000054 adc_recalibrate
008030f8 g     F .text	00000004 alt_icache_flush_all
00803ee0 g     O .rwdata	00000004 alt_priority_mask
00804628 g     O .bss	00000004 __malloc_free_list
00803100 g     F .text	00000040 alt_ic_irq_enable
0080134c g     F .text	0000015c print_empty_circle
0080151c g     F .text	00000084 clear_screen
008018c4 g     F .text	0000008c queue_print
008016ac g     F .text	00000054 queue_init
00801700 g     F .text	0000015c queue_enqueue
008014a8 g     F .text	00000074 print_circle
008027c8 g     F .text	000000e0 alt_load
00802f88 g     F .text	00000054 alt_adc_register_callback
008022a8 g     F .text	00000014 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80010c:	04002034 	movhi	r16,128
  800110:	84119104 	addi	r16,r16,17988

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	0005883a 	mov	r2,zero
    mask = 1;
  800118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	20ca703a 	and	r5,r4,r3
  800120:	28000b26 	beq	r5,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800124:	100490fa 	slli	r2,r2,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	203ff51e 	bne	r4,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	18c7883a 	add	r3,r3,r3
      i++;
  800154:	10800044 	addi	r2,r2,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a1e517 	ldw	r2,-30828(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6afab14 	ori	gp,gp,48812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	10918314 	ori	r2,r2,17932

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d1d114 	ori	r3,r3,18244

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	08027c80 	call	8027c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	08028a80 	call	8028a8 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <main>:
unsigned int i2bcd(unsigned int i);
void update_time(unsigned int i);


int main()
{
  8001bc:	defeb904 	addi	sp,sp,-1308
  8001c0:	dfc14615 	stw	ra,1304(sp)
  8001c4:	df014515 	stw	fp,1300(sp)
  8001c8:	dc414415 	stw	r17,1296(sp)
  8001cc:	dc014315 	stw	r16,1292(sp)
  8001d0:	df014504 	addi	fp,sp,1300
	print_welcome_screen();
  8001d4:	08016040 	call	801604 <print_welcome_screen>
	enum sampling_state state = fast_sampling;
  8001d8:	e03ebb15 	stw	zero,-1300(fp)
	QUEUE q1;
	//QUEUE q2;
	//QUEUE q3;
	QUEUE q4;
	QUEUE q5;
	QUEUE* q11 = &q1;
  8001dc:	e0bec304 	addi	r2,fp,-1268
  8001e0:	e0bec015 	stw	r2,-1280(fp)
	//QUEUE* q22 = &q2;
	//QUEUE* q33 = &q3;
	QUEUE* q44 = &q4;
  8001e4:	e0bed004 	addi	r2,fp,-1216
  8001e8:	e0bec115 	stw	r2,-1276(fp)
	QUEUE* q55 = &q5;
  8001ec:	e0bedd04 	addi	r2,fp,-1164
  8001f0:	e0bec215 	stw	r2,-1272(fp)



	SENSOR_OBJECT accelorometerX =
  8001f4:	009958f4 	movhi	r2,25955
  8001f8:	1098d044 	addi	r2,r2,25409
  8001fc:	e0beea15 	stw	r2,-1112(fp)
  800200:	009bdcb4 	movhi	r2,28530
  800204:	10995b04 	addi	r2,r2,25964
  800208:	e0beeb15 	stw	r2,-1108(fp)
  80020c:	009e0834 	movhi	r2,30752
  800210:	108b9b44 	addi	r2,r2,11885
  800214:	e0beec15 	stw	r2,-1104(fp)
  800218:	e03eed15 	stw	zero,-1100(fp)
  80021c:	e0beee04 	addi	r2,fp,-1096
  800220:	00c01004 	movi	r3,64
  800224:	180d883a 	mov	r6,r3
  800228:	000b883a 	mov	r5,zero
  80022c:	1009883a 	mov	r4,r2
  800230:	08022e40 	call	8022e4 <memset>
  800234:	00800784 	movi	r2,30
  800238:	e0befe15 	stw	r2,-1032(fp)
  80023c:	00800c84 	movi	r2,50
  800240:	e0beff15 	stw	r2,-1028(fp)
  800244:	00800044 	movi	r2,1
  800248:	e0bf0015 	stw	r2,-1024(fp)
  80024c:	00800044 	movi	r2,1
  800250:	e0bf0115 	stw	r2,-1020(fp)
  800254:	00800644 	movi	r2,25
  800258:	e0bf0215 	stw	r2,-1016(fp)
  80025c:	00800104 	movi	r2,4
  800260:	e0bf0315 	stw	r2,-1012(fp)
  800264:	e0bec317 	ldw	r2,-1268(fp)
  800268:	e0bf0415 	stw	r2,-1008(fp)
  80026c:	e0bec417 	ldw	r2,-1264(fp)
  800270:	e0bf0515 	stw	r2,-1004(fp)
  800274:	e0bec517 	ldw	r2,-1260(fp)
  800278:	e0bf0615 	stw	r2,-1000(fp)
  80027c:	e0bec617 	ldw	r2,-1256(fp)
  800280:	e0bf0715 	stw	r2,-996(fp)
  800284:	e0bec717 	ldw	r2,-1252(fp)
  800288:	e0bf0815 	stw	r2,-992(fp)
  80028c:	e0bec817 	ldw	r2,-1248(fp)
  800290:	e0bf0915 	stw	r2,-988(fp)
  800294:	e0bec917 	ldw	r2,-1244(fp)
  800298:	e0bf0a15 	stw	r2,-984(fp)
  80029c:	e0beca17 	ldw	r2,-1240(fp)
  8002a0:	e0bf0b15 	stw	r2,-980(fp)
  8002a4:	e0becb17 	ldw	r2,-1236(fp)
  8002a8:	e0bf0c15 	stw	r2,-976(fp)
  8002ac:	e0becc17 	ldw	r2,-1232(fp)
  8002b0:	e0bf0d15 	stw	r2,-972(fp)
  8002b4:	e0becd17 	ldw	r2,-1228(fp)
  8002b8:	e0bf0e15 	stw	r2,-968(fp)
  8002bc:	e0bece17 	ldw	r2,-1224(fp)
  8002c0:	e0bf0f15 	stw	r2,-964(fp)
  8002c4:	e0becf17 	ldw	r2,-1220(fp)
  8002c8:	e0bf1015 	stw	r2,-960(fp)
  8002cc:	e0bec017 	ldw	r2,-1280(fp)
  8002d0:	e0bf1115 	stw	r2,-956(fp)
  8002d4:	00802034 	movhi	r2,128
  8002d8:	1082b204 	addi	r2,r2,2760
  8002dc:	e0bf1215 	stw	r2,-952(fp)
  8002e0:	00802034 	movhi	r2,128
  8002e4:	1082bf04 	addi	r2,r2,2812
  8002e8:	e0bf1315 	stw	r2,-948(fp)
  8002ec:	00802034 	movhi	r2,128
  8002f0:	10833a04 	addi	r2,r2,3304
  8002f4:	e0bf1415 	stw	r2,-944(fp)
  8002f8:	00802034 	movhi	r2,128
  8002fc:	10831704 	addi	r2,r2,3164
  800300:	e0bf1515 	stw	r2,-940(fp)
  800304:	e0beea04 	addi	r2,fp,-1112
  800308:	e0bf1615 	stw	r2,-936(fp)
  80030c:	00802034 	movhi	r2,128
  800310:	1082d204 	addi	r2,r2,2888
  800314:	e0bf1715 	stw	r2,-932(fp)
					update_graph,
					&accelorometerZ,
					draw_graph
				};
*/
	SENSOR_OBJECT temp_sensor =
  800318:	009c1b74 	movhi	r2,28781
  80031c:	10995504 	addi	r2,r2,25940
  800320:	e0bf1815 	stw	r2,-928(fp)
  800324:	009d1874 	movhi	r2,29793
  800328:	109c9944 	addi	r2,r2,29285
  80032c:	e0bf1915 	stw	r2,-924(fp)
  800330:	00801974 	movhi	r2,101
  800334:	109c9d44 	addi	r2,r2,29301
  800338:	e0bf1a15 	stw	r2,-920(fp)
  80033c:	e0bf1b04 	addi	r2,fp,-916
  800340:	00c01104 	movi	r3,68
  800344:	180d883a 	mov	r6,r3
  800348:	000b883a 	mov	r5,zero
  80034c:	1009883a 	mov	r4,r2
  800350:	08022e40 	call	8022e4 <memset>
  800354:	00800784 	movi	r2,30
  800358:	e0bf2c15 	stw	r2,-848(fp)
  80035c:	00802d04 	movi	r2,180
  800360:	e0bf2d15 	stw	r2,-844(fp)
  800364:	00800044 	movi	r2,1
  800368:	e0bf2e15 	stw	r2,-840(fp)
  80036c:	00801904 	movi	r2,100
  800370:	e0bf2f15 	stw	r2,-836(fp)
  800374:	00800284 	movi	r2,10
  800378:	e0bf3015 	stw	r2,-832(fp)
  80037c:	00800104 	movi	r2,4
  800380:	e0bf3115 	stw	r2,-828(fp)
  800384:	e0bed017 	ldw	r2,-1216(fp)
  800388:	e0bf3215 	stw	r2,-824(fp)
  80038c:	e0bed117 	ldw	r2,-1212(fp)
  800390:	e0bf3315 	stw	r2,-820(fp)
  800394:	e0bed217 	ldw	r2,-1208(fp)
  800398:	e0bf3415 	stw	r2,-816(fp)
  80039c:	e0bed317 	ldw	r2,-1204(fp)
  8003a0:	e0bf3515 	stw	r2,-812(fp)
  8003a4:	e0bed417 	ldw	r2,-1200(fp)
  8003a8:	e0bf3615 	stw	r2,-808(fp)
  8003ac:	e0bed517 	ldw	r2,-1196(fp)
  8003b0:	e0bf3715 	stw	r2,-804(fp)
  8003b4:	e0bed617 	ldw	r2,-1192(fp)
  8003b8:	e0bf3815 	stw	r2,-800(fp)
  8003bc:	e0bed717 	ldw	r2,-1188(fp)
  8003c0:	e0bf3915 	stw	r2,-796(fp)
  8003c4:	e0bed817 	ldw	r2,-1184(fp)
  8003c8:	e0bf3a15 	stw	r2,-792(fp)
  8003cc:	e0bed917 	ldw	r2,-1180(fp)
  8003d0:	e0bf3b15 	stw	r2,-788(fp)
  8003d4:	e0beda17 	ldw	r2,-1176(fp)
  8003d8:	e0bf3c15 	stw	r2,-784(fp)
  8003dc:	e0bedb17 	ldw	r2,-1172(fp)
  8003e0:	e0bf3d15 	stw	r2,-780(fp)
  8003e4:	e0bedc17 	ldw	r2,-1168(fp)
  8003e8:	e0bf3e15 	stw	r2,-776(fp)
  8003ec:	e0bec117 	ldw	r2,-1276(fp)
  8003f0:	e0bf3f15 	stw	r2,-772(fp)
  8003f4:	00802034 	movhi	r2,128
  8003f8:	1082b204 	addi	r2,r2,2760
  8003fc:	e0bf4015 	stw	r2,-768(fp)
  800400:	00802034 	movhi	r2,128
  800404:	1082bf04 	addi	r2,r2,2812
  800408:	e0bf4115 	stw	r2,-764(fp)
  80040c:	00802034 	movhi	r2,128
  800410:	10826c04 	addi	r2,r2,2480
  800414:	e0bf4215 	stw	r2,-760(fp)
  800418:	00802034 	movhi	r2,128
  80041c:	10831704 	addi	r2,r2,3164
  800420:	e0bf4315 	stw	r2,-756(fp)
  800424:	e0bf1804 	addi	r2,fp,-928
  800428:	e0bf4415 	stw	r2,-752(fp)
  80042c:	00802034 	movhi	r2,128
  800430:	1082d204 	addi	r2,r2,2888
  800434:	e0bf4515 	stw	r2,-748(fp)
						update_graph,
						&temp_sensor,
						draw_graph
					};

	SENSOR_OBJECT light_sensor =
  800438:	009a19f4 	movhi	r2,26727
  80043c:	109a5304 	addi	r2,r2,26956
  800440:	e0bf4615 	stw	r2,-744(fp)
  800444:	00801d04 	movi	r2,116
  800448:	e0bf4715 	stw	r2,-740(fp)
  80044c:	e0bf4804 	addi	r2,fp,-736
  800450:	00c01204 	movi	r3,72
  800454:	180d883a 	mov	r6,r3
  800458:	000b883a 	mov	r5,zero
  80045c:	1009883a 	mov	r4,r2
  800460:	08022e40 	call	8022e4 <memset>
  800464:	00802204 	movi	r2,136
  800468:	e0bf5a15 	stw	r2,-664(fp)
  80046c:	00802d04 	movi	r2,180
  800470:	e0bf5b15 	stw	r2,-660(fp)
  800474:	00800044 	movi	r2,1
  800478:	e0bf5c15 	stw	r2,-656(fp)
  80047c:	00801904 	movi	r2,100
  800480:	e0bf5d15 	stw	r2,-652(fp)
  800484:	00800284 	movi	r2,10
  800488:	e0bf5e15 	stw	r2,-648(fp)
  80048c:	00800104 	movi	r2,4
  800490:	e0bf5f15 	stw	r2,-644(fp)
  800494:	e0bedd17 	ldw	r2,-1164(fp)
  800498:	e0bf6015 	stw	r2,-640(fp)
  80049c:	e0bede17 	ldw	r2,-1160(fp)
  8004a0:	e0bf6115 	stw	r2,-636(fp)
  8004a4:	e0bedf17 	ldw	r2,-1156(fp)
  8004a8:	e0bf6215 	stw	r2,-632(fp)
  8004ac:	e0bee017 	ldw	r2,-1152(fp)
  8004b0:	e0bf6315 	stw	r2,-628(fp)
  8004b4:	e0bee117 	ldw	r2,-1148(fp)
  8004b8:	e0bf6415 	stw	r2,-624(fp)
  8004bc:	e0bee217 	ldw	r2,-1144(fp)
  8004c0:	e0bf6515 	stw	r2,-620(fp)
  8004c4:	e0bee317 	ldw	r2,-1140(fp)
  8004c8:	e0bf6615 	stw	r2,-616(fp)
  8004cc:	e0bee417 	ldw	r2,-1136(fp)
  8004d0:	e0bf6715 	stw	r2,-612(fp)
  8004d4:	e0bee517 	ldw	r2,-1132(fp)
  8004d8:	e0bf6815 	stw	r2,-608(fp)
  8004dc:	e0bee617 	ldw	r2,-1128(fp)
  8004e0:	e0bf6915 	stw	r2,-604(fp)
  8004e4:	e0bee717 	ldw	r2,-1124(fp)
  8004e8:	e0bf6a15 	stw	r2,-600(fp)
  8004ec:	e0bee817 	ldw	r2,-1120(fp)
  8004f0:	e0bf6b15 	stw	r2,-596(fp)
  8004f4:	e0bee917 	ldw	r2,-1116(fp)
  8004f8:	e0bf6c15 	stw	r2,-592(fp)
  8004fc:	e0bec217 	ldw	r2,-1272(fp)
  800500:	e0bf6d15 	stw	r2,-588(fp)
  800504:	00802034 	movhi	r2,128
  800508:	1082b204 	addi	r2,r2,2760
  80050c:	e0bf6e15 	stw	r2,-584(fp)
  800510:	00802034 	movhi	r2,128
  800514:	1082bf04 	addi	r2,r2,2812
  800518:	e0bf6f15 	stw	r2,-580(fp)
  80051c:	00802034 	movhi	r2,128
  800520:	10828f04 	addi	r2,r2,2620
  800524:	e0bf7015 	stw	r2,-576(fp)
  800528:	00802034 	movhi	r2,128
  80052c:	10831704 	addi	r2,r2,3164
  800530:	e0bf7115 	stw	r2,-572(fp)
  800534:	e0bf4604 	addi	r2,fp,-744
  800538:	e0bf7215 	stw	r2,-568(fp)
  80053c:	00802034 	movhi	r2,128
  800540:	1082d204 	addi	r2,r2,2888
  800544:	e0bf7315 	stw	r2,-564(fp)
							accelorometerY,
							accelorometerZ,
							temp_sensor,
							light_sensor};*/

	SENSOR_OBJECT sensors[3]={accelorometerX,
  800548:	e0bf7404 	addi	r2,fp,-560
  80054c:	e0feea04 	addi	r3,fp,-1112
  800550:	01002e04 	movi	r4,184
  800554:	200d883a 	mov	r6,r4
  800558:	180b883a 	mov	r5,r3
  80055c:	1009883a 	mov	r4,r2
  800560:	08022bc0 	call	8022bc <memcpy>
  800564:	e0bfa204 	addi	r2,fp,-376
  800568:	e0ff1804 	addi	r3,fp,-928
  80056c:	01002e04 	movi	r4,184
  800570:	200d883a 	mov	r6,r4
  800574:	180b883a 	mov	r5,r3
  800578:	1009883a 	mov	r4,r2
  80057c:	08022bc0 	call	8022bc <memcpy>
  800580:	e0bfd004 	addi	r2,fp,-192
  800584:	e0ff4604 	addi	r3,fp,-744
  800588:	01002e04 	movi	r4,184
  80058c:	200d883a 	mov	r6,r4
  800590:	180b883a 	mov	r5,r3
  800594:	1009883a 	mov	r4,r2
  800598:	08022bc0 	call	8022bc <memcpy>
								temp_sensor,
								light_sensor};



		for(i = 0; i < 78600; i++)
  80059c:	d021d815 	stw	zero,-30880(gp)
  8005a0:	00000b06 	br	8005d0 <main+0x414>
			set_address_pixel(i, 0);
  8005a4:	d0a1d817 	ldw	r2,-30880(gp)
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	1085883a 	add	r2,r2,r2
  8005b0:	1007883a 	mov	r3,r2
  8005b4:	00804034 	movhi	r2,256
  8005b8:	1885883a 	add	r2,r3,r2
  8005bc:	0007883a 	mov	r3,zero
  8005c0:	10c00035 	stwio	r3,0(r2)
								temp_sensor,
								light_sensor};



		for(i = 0; i < 78600; i++)
  8005c4:	d0a1d817 	ldw	r2,-30880(gp)
  8005c8:	10800044 	addi	r2,r2,1
  8005cc:	d0a1d815 	stw	r2,-30880(gp)
  8005d0:	d0e1d817 	ldw	r3,-30880(gp)
  8005d4:	00800074 	movhi	r2,1
  8005d8:	108cc1c4 	addi	r2,r2,13063
  8005dc:	10fff12e 	bgeu	r2,r3,8005a4 <__alt_data_end+0xff8005a4>
			set_address_pixel(i, 0);

		print_hline(0,120,320,6);
  8005e0:	01c00184 	movi	r7,6
  8005e4:	01805004 	movi	r6,320
  8005e8:	01401e04 	movi	r5,120
  8005ec:	0009883a 	mov	r4,zero
  8005f0:	0800ea00 	call	800ea0 <print_hline>
		print_vline(320/3,0,240,6);
  8005f4:	01c00184 	movi	r7,6
  8005f8:	01803c04 	movi	r6,240
  8005fc:	000b883a 	mov	r5,zero
  800600:	01001a84 	movi	r4,106
  800604:	0800f700 	call	800f70 <print_vline>
		print_vline(2*320/3,0,240,6);
  800608:	01c00184 	movi	r7,6
  80060c:	01803c04 	movi	r6,240
  800610:	000b883a 	mov	r5,zero
  800614:	01003544 	movi	r4,213
  800618:	0800f700 	call	800f70 <print_vline>

		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
  80061c:	01c02034 	movhi	r7,128
  800620:	39cdbd04 	addi	r7,r7,14068
  800624:	01800144 	movi	r6,5
  800628:	01402584 	movi	r5,150
  80062c:	01003684 	movi	r4,218
  800630:	080114c0 	call	80114c <print_str>
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
  800634:	01c02034 	movhi	r7,128
  800638:	39cdc004 	addi	r7,r7,14080
  80063c:	01800144 	movi	r6,5
  800640:	01402d04 	movi	r5,180
  800644:	01003684 	movi	r4,218
  800648:	080114c0 	call	80114c <print_str>
		print_str(2*320/3 +5,210,5,"L.Karagiannis");
  80064c:	01c02034 	movhi	r7,128
  800650:	39cdc404 	addi	r7,r7,14096
  800654:	01800144 	movi	r6,5
  800658:	01403484 	movi	r5,210
  80065c:	01003684 	movi	r4,218
  800660:	080114c0 	call	80114c <print_str>


		for(int i = 2; i<3; i++)
  800664:	00800084 	movi	r2,2
  800668:	e0bebc15 	stw	r2,-1296(fp)
  80066c:	00001206 	br	8006b8 <main+0x4fc>
			sensors[i].init_measurement(&sensors[i]);
  800670:	e0bebc17 	ldw	r2,-1296(fp)
  800674:	01402e04 	movi	r5,184
  800678:	1009883a 	mov	r4,r2
  80067c:	08022540 	call	802254 <__mulsi3>
  800680:	e0febb04 	addi	r3,fp,-1300
  800684:	1885883a 	add	r2,r3,r2
  800688:	1080e204 	addi	r2,r2,904
  80068c:	14000017 	ldw	r16,0(r2)
  800690:	e47f7404 	addi	r17,fp,-560
  800694:	01402e04 	movi	r5,184
  800698:	e13ebc17 	ldw	r4,-1296(fp)
  80069c:	08022540 	call	802254 <__mulsi3>
  8006a0:	8885883a 	add	r2,r17,r2
  8006a4:	1009883a 	mov	r4,r2
  8006a8:	803ee83a 	callr	r16
		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
		print_str(2*320/3 +5,210,5,"L.Karagiannis");


		for(int i = 2; i<3; i++)
  8006ac:	e0bebc17 	ldw	r2,-1296(fp)
  8006b0:	10800044 	addi	r2,r2,1
  8006b4:	e0bebc15 	stw	r2,-1296(fp)
  8006b8:	e0bebc17 	ldw	r2,-1296(fp)
  8006bc:	108000d0 	cmplti	r2,r2,3
  8006c0:	103feb1e 	bne	r2,zero,800670 <__alt_data_end+0xff800670>
			sensors[i].init_measurement(&sensors[i]);

	while(1){


		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 6)//first button
  8006c4:	00804234 	movhi	r2,264
  8006c8:	10848804 	addi	r2,r2,4640
  8006cc:	10800037 	ldwio	r2,0(r2)
  8006d0:	10800198 	cmpnei	r2,r2,6
  8006d4:	1000011e 	bne	r2,zero,8006dc <main+0x520>
			state = fast_sampling;
  8006d8:	e03ebb15 	stw	zero,-1300(fp)
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 5)//snd button
  8006dc:	00804234 	movhi	r2,264
  8006e0:	10848804 	addi	r2,r2,4640
  8006e4:	10800037 	ldwio	r2,0(r2)
  8006e8:	10800158 	cmpnei	r2,r2,5
  8006ec:	1000021e 	bne	r2,zero,8006f8 <main+0x53c>
			state = slow_sampling;
  8006f0:	00800044 	movi	r2,1
  8006f4:	e0bebb15 	stw	r2,-1300(fp)

		switch(state){
  8006f8:	e0bebb17 	ldw	r2,-1300(fp)
  8006fc:	10000326 	beq	r2,zero,80070c <main+0x550>
  800700:	10800060 	cmpeqi	r2,r2,1
  800704:	10004d1e 	bne	r2,zero,80083c <main+0x680>
  800708:	0000a806 	br	8009ac <main+0x7f0>
		case fast_sampling:
#ifdef DEBUG
			alt_printf("fast\n");
#endif
			TIMER_RESET;
  80070c:	00d00034 	movhi	r3,16384
  800710:	00804234 	movhi	r2,264
  800714:	10849904 	addi	r2,r2,4708
  800718:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  80071c:	00e00034 	movhi	r3,32768
  800720:	00804234 	movhi	r2,264
  800724:	10849904 	addi	r2,r2,4708
  800728:	10c00035 	stwio	r3,0(r2)
			while(TIMER_READ < 5000000);
  80072c:	0001883a 	nop
  800730:	00804234 	movhi	r2,264
  800734:	10849804 	addi	r2,r2,4704
  800738:	10c00037 	ldwio	r3,0(r2)
  80073c:	00801334 	movhi	r2,76
  800740:	1092cfc4 	addi	r2,r2,19263
  800744:	10fffa0e 	bge	r2,r3,800730 <__alt_data_end+0xff800730>
			update_time(1);
  800748:	01000044 	movi	r4,1
  80074c:	0801e200 	call	801e20 <update_time>

			for(int i = 2; i<3; i++){
  800750:	00800084 	movi	r2,2
  800754:	e0bebd15 	stw	r2,-1292(fp)
  800758:	00003406 	br	80082c <main+0x670>
				sensors[i].configure_time_base(1,&sensors[i]);
  80075c:	e0bebd17 	ldw	r2,-1292(fp)
  800760:	01402e04 	movi	r5,184
  800764:	1009883a 	mov	r4,r2
  800768:	08022540 	call	802254 <__mulsi3>
  80076c:	e0febb04 	addi	r3,fp,-1300
  800770:	1885883a 	add	r2,r3,r2
  800774:	1080e104 	addi	r2,r2,900
  800778:	14000017 	ldw	r16,0(r2)
  80077c:	e47f7404 	addi	r17,fp,-560
  800780:	01402e04 	movi	r5,184
  800784:	e13ebd17 	ldw	r4,-1292(fp)
  800788:	08022540 	call	802254 <__mulsi3>
  80078c:	8885883a 	add	r2,r17,r2
  800790:	100b883a 	mov	r5,r2
  800794:	01000044 	movi	r4,1
  800798:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  80079c:	e0bebd17 	ldw	r2,-1292(fp)
  8007a0:	01402e04 	movi	r5,184
  8007a4:	1009883a 	mov	r4,r2
  8007a8:	08022540 	call	802254 <__mulsi3>
  8007ac:	e0febb04 	addi	r3,fp,-1300
  8007b0:	1885883a 	add	r2,r3,r2
  8007b4:	1080e304 	addi	r2,r2,908
  8007b8:	14000017 	ldw	r16,0(r2)
  8007bc:	e0bebd17 	ldw	r2,-1292(fp)
  8007c0:	01402e04 	movi	r5,184
  8007c4:	1009883a 	mov	r4,r2
  8007c8:	08022540 	call	802254 <__mulsi3>
  8007cc:	e0febb04 	addi	r3,fp,-1300
  8007d0:	1885883a 	add	r2,r3,r2
  8007d4:	1080e004 	addi	r2,r2,896
  8007d8:	10800017 	ldw	r2,0(r2)
  8007dc:	1009883a 	mov	r4,r2
  8007e0:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  8007e4:	e0bebd17 	ldw	r2,-1292(fp)
  8007e8:	01402e04 	movi	r5,184
  8007ec:	1009883a 	mov	r4,r2
  8007f0:	08022540 	call	802254 <__mulsi3>
  8007f4:	e0febb04 	addi	r3,fp,-1300
  8007f8:	1885883a 	add	r2,r3,r2
  8007fc:	1080e404 	addi	r2,r2,912
  800800:	14000017 	ldw	r16,0(r2)
  800804:	e47f7404 	addi	r17,fp,-560
  800808:	01402e04 	movi	r5,184
  80080c:	e13ebd17 	ldw	r4,-1292(fp)
  800810:	08022540 	call	802254 <__mulsi3>
  800814:	8885883a 	add	r2,r17,r2
  800818:	1009883a 	mov	r4,r2
  80081c:	803ee83a 	callr	r16
			TIMER_RESET;
			TIMER_START;
			while(TIMER_READ < 5000000);
			update_time(1);

			for(int i = 2; i<3; i++){
  800820:	e0bebd17 	ldw	r2,-1292(fp)
  800824:	10800044 	addi	r2,r2,1
  800828:	e0bebd15 	stw	r2,-1292(fp)
  80082c:	e0bebd17 	ldw	r2,-1292(fp)
  800830:	108000d0 	cmplti	r2,r2,3
  800834:	103fc91e 	bne	r2,zero,80075c <__alt_data_end+0xff80075c>
				sensors[i].configure_time_base(1,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
			break;
  800838:	00005c06 	br	8009ac <main+0x7f0>
		case slow_sampling:
#ifdef DEBUG
			alt_printf("slow\n");
#endif
			TIMER_RESET;
  80083c:	00d00034 	movhi	r3,16384
  800840:	00804234 	movhi	r2,264
  800844:	10849904 	addi	r2,r2,4708
  800848:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  80084c:	00e00034 	movhi	r3,32768
  800850:	00804234 	movhi	r2,264
  800854:	10849904 	addi	r2,r2,4708
  800858:	10c00035 	stwio	r3,0(r2)
			for (int i = 0; i < 10;i++){
  80085c:	e03ebe15 	stw	zero,-1288(fp)
  800860:	00001406 	br	8008b4 <main+0x6f8>
				while(TIMER_READ < 50000000);
  800864:	0001883a 	nop
  800868:	00804234 	movhi	r2,264
  80086c:	10849804 	addi	r2,r2,4704
  800870:	10c00037 	ldwio	r3,0(r2)
  800874:	0080bef4 	movhi	r2,763
  800878:	10bc1fc4 	addi	r2,r2,-3969
  80087c:	10fffa0e 	bge	r2,r3,800868 <__alt_data_end+0xff800868>
				update_time(10);
  800880:	01000284 	movi	r4,10
  800884:	0801e200 	call	801e20 <update_time>
				TIMER_RESET;
  800888:	00d00034 	movhi	r3,16384
  80088c:	00804234 	movhi	r2,264
  800890:	10849904 	addi	r2,r2,4708
  800894:	10c00035 	stwio	r3,0(r2)
				TIMER_START;
  800898:	00e00034 	movhi	r3,32768
  80089c:	00804234 	movhi	r2,264
  8008a0:	10849904 	addi	r2,r2,4708
  8008a4:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG
			alt_printf("slow\n");
#endif
			TIMER_RESET;
			TIMER_START;
			for (int i = 0; i < 10;i++){
  8008a8:	e0bebe17 	ldw	r2,-1288(fp)
  8008ac:	10800044 	addi	r2,r2,1
  8008b0:	e0bebe15 	stw	r2,-1288(fp)
  8008b4:	e0bebe17 	ldw	r2,-1288(fp)
  8008b8:	10800290 	cmplti	r2,r2,10
  8008bc:	103fe91e 	bne	r2,zero,800864 <__alt_data_end+0xff800864>
				while(TIMER_READ < 50000000);
				update_time(10);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 2; i<3; i++){
  8008c0:	00800084 	movi	r2,2
  8008c4:	e0bebf15 	stw	r2,-1284(fp)
  8008c8:	00003406 	br	80099c <main+0x7e0>
				sensors[i].configure_time_base(10,&sensors[i]);
  8008cc:	e0bebf17 	ldw	r2,-1284(fp)
  8008d0:	01402e04 	movi	r5,184
  8008d4:	1009883a 	mov	r4,r2
  8008d8:	08022540 	call	802254 <__mulsi3>
  8008dc:	e0febb04 	addi	r3,fp,-1300
  8008e0:	1885883a 	add	r2,r3,r2
  8008e4:	1080e104 	addi	r2,r2,900
  8008e8:	14000017 	ldw	r16,0(r2)
  8008ec:	e47f7404 	addi	r17,fp,-560
  8008f0:	01402e04 	movi	r5,184
  8008f4:	e13ebf17 	ldw	r4,-1284(fp)
  8008f8:	08022540 	call	802254 <__mulsi3>
  8008fc:	8885883a 	add	r2,r17,r2
  800900:	100b883a 	mov	r5,r2
  800904:	01000284 	movi	r4,10
  800908:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  80090c:	e0bebf17 	ldw	r2,-1284(fp)
  800910:	01402e04 	movi	r5,184
  800914:	1009883a 	mov	r4,r2
  800918:	08022540 	call	802254 <__mulsi3>
  80091c:	e0febb04 	addi	r3,fp,-1300
  800920:	1885883a 	add	r2,r3,r2
  800924:	1080e304 	addi	r2,r2,908
  800928:	14000017 	ldw	r16,0(r2)
  80092c:	e0bebf17 	ldw	r2,-1284(fp)
  800930:	01402e04 	movi	r5,184
  800934:	1009883a 	mov	r4,r2
  800938:	08022540 	call	802254 <__mulsi3>
  80093c:	e0febb04 	addi	r3,fp,-1300
  800940:	1885883a 	add	r2,r3,r2
  800944:	1080e004 	addi	r2,r2,896
  800948:	10800017 	ldw	r2,0(r2)
  80094c:	1009883a 	mov	r4,r2
  800950:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  800954:	e0bebf17 	ldw	r2,-1284(fp)
  800958:	01402e04 	movi	r5,184
  80095c:	1009883a 	mov	r4,r2
  800960:	08022540 	call	802254 <__mulsi3>
  800964:	e0febb04 	addi	r3,fp,-1300
  800968:	1885883a 	add	r2,r3,r2
  80096c:	1080e404 	addi	r2,r2,912
  800970:	14000017 	ldw	r16,0(r2)
  800974:	e47f7404 	addi	r17,fp,-560
  800978:	01402e04 	movi	r5,184
  80097c:	e13ebf17 	ldw	r4,-1284(fp)
  800980:	08022540 	call	802254 <__mulsi3>
  800984:	8885883a 	add	r2,r17,r2
  800988:	1009883a 	mov	r4,r2
  80098c:	803ee83a 	callr	r16
				while(TIMER_READ < 50000000);
				update_time(10);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 2; i<3; i++){
  800990:	e0bebf17 	ldw	r2,-1284(fp)
  800994:	10800044 	addi	r2,r2,1
  800998:	e0bebf15 	stw	r2,-1284(fp)
  80099c:	e0bebf17 	ldw	r2,-1284(fp)
  8009a0:	108000d0 	cmplti	r2,r2,3
  8009a4:	103fc91e 	bne	r2,zero,8008cc <__alt_data_end+0xff8008cc>
				sensors[i].configure_time_base(10,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
           break;
  8009a8:	0001883a 	nop
		}
	}
  8009ac:	003f4506 	br	8006c4 <__alt_data_end+0xff8006c4>

008009b0 <read_temp>:

	return 0;
}

void read_temp(QUEUE *q){
  8009b0:	defffc04 	addi	sp,sp,-16
  8009b4:	dfc00315 	stw	ra,12(sp)
  8009b8:	df000215 	stw	fp,8(sp)
  8009bc:	df000204 	addi	fp,sp,8
  8009c0:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  8009c4:	00c00044 	movi	r3,1
  8009c8:	00804234 	movhi	r2,264
  8009cc:	10849c04 	addi	r2,r2,4720
  8009d0:	10c00035 	stwio	r3,0(r2)
		alt_u32 temp = ADC_READ_TEMP;
  8009d4:	00804234 	movhi	r2,264
  8009d8:	10840104 	addi	r2,r2,4100
  8009dc:	10800037 	ldwio	r2,0(r2)
  8009e0:	e0bffe15 	stw	r2,-8(fp)
		if(queue_enqueue(q,temp))
  8009e4:	e0bffe17 	ldw	r2,-8(fp)
  8009e8:	100b883a 	mov	r5,r2
  8009ec:	e13fff17 	ldw	r4,-4(fp)
  8009f0:	08017000 	call	801700 <queue_enqueue>
  8009f4:	1000061e 	bne	r2,zero,800a10 <read_temp+0x60>
								;
						else{
							queue_dequeue(q);
  8009f8:	e13fff17 	ldw	r4,-4(fp)
  8009fc:	080185c0 	call	80185c <queue_dequeue>
							queue_enqueue(q,temp);
  800a00:	e0bffe17 	ldw	r2,-8(fp)
  800a04:	100b883a 	mov	r5,r2
  800a08:	e13fff17 	ldw	r4,-4(fp)
  800a0c:	08017000 	call	801700 <queue_enqueue>
						}
		alt_printf("nu");
  800a10:	01002034 	movhi	r4,128
  800a14:	210dc804 	addi	r4,r4,14112
  800a18:	08028e80 	call	8028e8 <alt_printf>
		 queue_print(q);
  800a1c:	e13fff17 	ldw	r4,-4(fp)
  800a20:	08018c40 	call	8018c4 <queue_print>
}
  800a24:	0001883a 	nop
  800a28:	e037883a 	mov	sp,fp
  800a2c:	dfc00117 	ldw	ra,4(sp)
  800a30:	df000017 	ldw	fp,0(sp)
  800a34:	dec00204 	addi	sp,sp,8
  800a38:	f800283a 	ret

00800a3c <read_light>:
void read_light(QUEUE *q){
  800a3c:	defffc04 	addi	sp,sp,-16
  800a40:	dfc00315 	stw	ra,12(sp)
  800a44:	df000215 	stw	fp,8(sp)
  800a48:	df000204 	addi	fp,sp,8
  800a4c:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  800a50:	00c00044 	movi	r3,1
  800a54:	00804234 	movhi	r2,264
  800a58:	10849c04 	addi	r2,r2,4720
  800a5c:	10c00035 	stwio	r3,0(r2)
			alt_u32 light = ADC_READ_PHOTO;
  800a60:	00804234 	movhi	r2,264
  800a64:	10840004 	addi	r2,r2,4096
  800a68:	10800037 	ldwio	r2,0(r2)
  800a6c:	e0bffe15 	stw	r2,-8(fp)
			if(queue_enqueue(q,light))
  800a70:	e0bffe17 	ldw	r2,-8(fp)
  800a74:	100b883a 	mov	r5,r2
  800a78:	e13fff17 	ldw	r4,-4(fp)
  800a7c:	08017000 	call	801700 <queue_enqueue>
  800a80:	1000091e 	bne	r2,zero,800aa8 <read_light+0x6c>
									;
							else{
								queue_dequeue(q);
  800a84:	e13fff17 	ldw	r4,-4(fp)
  800a88:	080185c0 	call	80185c <queue_dequeue>
								queue_enqueue(q,light);
  800a8c:	e0bffe17 	ldw	r2,-8(fp)
  800a90:	100b883a 	mov	r5,r2
  800a94:	e13fff17 	ldw	r4,-4(fp)
  800a98:	08017000 	call	801700 <queue_enqueue>
			alt_printf("printar nu");				}
  800a9c:	01002034 	movhi	r4,128
  800aa0:	210dc904 	addi	r4,r4,14116
  800aa4:	08028e80 	call	8028e8 <alt_printf>
			queue_print(q);
  800aa8:	e13fff17 	ldw	r4,-4(fp)
  800aac:	08018c40 	call	8018c4 <queue_print>
}
  800ab0:	0001883a 	nop
  800ab4:	e037883a 	mov	sp,fp
  800ab8:	dfc00117 	ldw	ra,4(sp)
  800abc:	df000017 	ldw	fp,0(sp)
  800ac0:	dec00204 	addi	sp,sp,8
  800ac4:	f800283a 	ret

00800ac8 <config_time_base>:
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj){
  800ac8:	defffd04 	addi	sp,sp,-12
  800acc:	df000215 	stw	fp,8(sp)
  800ad0:	df000204 	addi	fp,sp,8
  800ad4:	e13ffe15 	stw	r4,-8(fp)
  800ad8:	e17fff15 	stw	r5,-4(fp)
	 sensor_obj->time_base = time_base;
  800adc:	e0bfff17 	ldw	r2,-4(fp)
  800ae0:	e0fffe17 	ldw	r3,-8(fp)
  800ae4:	10c01615 	stw	r3,88(r2)
}
  800ae8:	0001883a 	nop
  800aec:	e037883a 	mov	sp,fp
  800af0:	df000017 	ldw	fp,0(sp)
  800af4:	dec00104 	addi	sp,sp,4
  800af8:	f800283a 	ret

00800afc <init_measurement>:
void init_measurement(SENSOR_OBJECT* sensor_obj){
  800afc:	defffd04 	addi	sp,sp,-12
  800b00:	dfc00215 	stw	ra,8(sp)
  800b04:	df000115 	stw	fp,4(sp)
  800b08:	df000104 	addi	fp,sp,4
  800b0c:	e13fff15 	stw	r4,-4(fp)
	queue_init(sensor_obj->q);
  800b10:	e0bfff17 	ldw	r2,-4(fp)
  800b14:	10802717 	ldw	r2,156(r2)
  800b18:	1009883a 	mov	r4,r2
  800b1c:	08016ac0 	call	8016ac <queue_init>
	sensor_obj->draw_graph(sensor_obj);
  800b20:	e0bfff17 	ldw	r2,-4(fp)
  800b24:	10802d17 	ldw	r2,180(r2)
  800b28:	e13fff17 	ldw	r4,-4(fp)
  800b2c:	103ee83a 	callr	r2
}
  800b30:	0001883a 	nop
  800b34:	e037883a 	mov	sp,fp
  800b38:	dfc00117 	ldw	ra,4(sp)
  800b3c:	df000017 	ldw	fp,0(sp)
  800b40:	dec00204 	addi	sp,sp,8
  800b44:	f800283a 	ret

00800b48 <draw_graph>:

void draw_graph(SENSOR_OBJECT* sensor_obj){
  800b48:	defffc04 	addi	sp,sp,-16
  800b4c:	dfc00315 	stw	ra,12(sp)
  800b50:	df000215 	stw	fp,8(sp)
  800b54:	df000204 	addi	fp,sp,8
  800b58:	e13fff15 	stw	r4,-4(fp)
	print_char(sensor_obj->x_origo +55,sensor_obj->y_origo -3,7,0,'>');
  800b5c:	e0bfff17 	ldw	r2,-4(fp)
  800b60:	10801417 	ldw	r2,80(r2)
  800b64:	10c00dc4 	addi	r3,r2,55
  800b68:	e0bfff17 	ldw	r2,-4(fp)
  800b6c:	10801517 	ldw	r2,84(r2)
  800b70:	113fff44 	addi	r4,r2,-3
  800b74:	00800f84 	movi	r2,62
  800b78:	d8800015 	stw	r2,0(sp)
  800b7c:	000f883a 	mov	r7,zero
  800b80:	018001c4 	movi	r6,7
  800b84:	200b883a 	mov	r5,r4
  800b88:	1809883a 	mov	r4,r3
  800b8c:	08010400 	call	801040 <print_char>
		print_hline(sensor_obj->x_origo,sensor_obj->y_origo,60,7);
  800b90:	e0bfff17 	ldw	r2,-4(fp)
  800b94:	10c01417 	ldw	r3,80(r2)
  800b98:	e0bfff17 	ldw	r2,-4(fp)
  800b9c:	10801517 	ldw	r2,84(r2)
  800ba0:	01c001c4 	movi	r7,7
  800ba4:	01800f04 	movi	r6,60
  800ba8:	100b883a 	mov	r5,r2
  800bac:	1809883a 	mov	r4,r3
  800bb0:	0800ea00 	call	800ea0 <print_hline>

		print_char(sensor_obj->x_origo -4,sensor_obj->y_origo -45,7,0,'^');
  800bb4:	e0bfff17 	ldw	r2,-4(fp)
  800bb8:	10801417 	ldw	r2,80(r2)
  800bbc:	10ffff04 	addi	r3,r2,-4
  800bc0:	e0bfff17 	ldw	r2,-4(fp)
  800bc4:	10801517 	ldw	r2,84(r2)
  800bc8:	113ff4c4 	addi	r4,r2,-45
  800bcc:	00801784 	movi	r2,94
  800bd0:	d8800015 	stw	r2,0(sp)
  800bd4:	000f883a 	mov	r7,zero
  800bd8:	018001c4 	movi	r6,7
  800bdc:	200b883a 	mov	r5,r4
  800be0:	1809883a 	mov	r4,r3
  800be4:	08010400 	call	801040 <print_char>
		print_vline(sensor_obj->x_origo-1,sensor_obj->y_origo -45,45,7);
  800be8:	e0bfff17 	ldw	r2,-4(fp)
  800bec:	10801417 	ldw	r2,80(r2)
  800bf0:	10ffffc4 	addi	r3,r2,-1
  800bf4:	e0bfff17 	ldw	r2,-4(fp)
  800bf8:	10801517 	ldw	r2,84(r2)
  800bfc:	10bff4c4 	addi	r2,r2,-45
  800c00:	01c001c4 	movi	r7,7
  800c04:	01800b44 	movi	r6,45
  800c08:	100b883a 	mov	r5,r2
  800c0c:	1809883a 	mov	r4,r3
  800c10:	0800f700 	call	800f70 <print_vline>

		print_str(sensor_obj->x_origo -20, sensor_obj->y_origo +10,7,sensor_obj->description);
  800c14:	e0bfff17 	ldw	r2,-4(fp)
  800c18:	10801417 	ldw	r2,80(r2)
  800c1c:	10fffb04 	addi	r3,r2,-20
  800c20:	e0bfff17 	ldw	r2,-4(fp)
  800c24:	10801517 	ldw	r2,84(r2)
  800c28:	10800284 	addi	r2,r2,10
  800c2c:	e13fff17 	ldw	r4,-4(fp)
  800c30:	200f883a 	mov	r7,r4
  800c34:	018001c4 	movi	r6,7
  800c38:	100b883a 	mov	r5,r2
  800c3c:	1809883a 	mov	r4,r3
  800c40:	080114c0 	call	80114c <print_str>
}
  800c44:	0001883a 	nop
  800c48:	e037883a 	mov	sp,fp
  800c4c:	dfc00117 	ldw	ra,4(sp)
  800c50:	df000017 	ldw	fp,0(sp)
  800c54:	dec00204 	addi	sp,sp,8
  800c58:	f800283a 	ret

00800c5c <update_graph>:
void update_graph(SENSOR_OBJECT* sensor_obj){
  800c5c:	defffa04 	addi	sp,sp,-24
  800c60:	dfc00515 	stw	ra,20(sp)
  800c64:	df000415 	stw	fp,16(sp)
  800c68:	df000404 	addi	fp,sp,16
  800c6c:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c70:	e0bfff17 	ldw	r2,-4(fp)
  800c74:	10c02717 	ldw	r3,156(r2)
			sensor_obj->x_origo,
  800c78:	e0bfff17 	ldw	r2,-4(fp)
  800c7c:	10801417 	ldw	r2,80(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c80:	1011883a 	mov	r8,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
  800c84:	e0bfff17 	ldw	r2,-4(fp)
  800c88:	10801517 	ldw	r2,84(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c8c:	100d883a 	mov	r6,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
  800c90:	e0bfff17 	ldw	r2,-4(fp)
  800c94:	10801717 	ldw	r2,92(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c98:	100f883a 	mov	r7,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
  800c9c:	e0bfff17 	ldw	r2,-4(fp)
  800ca0:	10801817 	ldw	r2,96(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800ca4:	1009883a 	mov	r4,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb,sensor_obj );
  800ca8:	e0bfff17 	ldw	r2,-4(fp)
  800cac:	10801917 	ldw	r2,100(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800cb0:	100b883a 	mov	r5,r2
  800cb4:	e0bfff17 	ldw	r2,-4(fp)
  800cb8:	d8800215 	stw	r2,8(sp)
  800cbc:	d9400115 	stw	r5,4(sp)
  800cc0:	d9000015 	stw	r4,0(sp)
  800cc4:	400b883a 	mov	r5,r8
  800cc8:	1809883a 	mov	r4,r3
  800ccc:	08019500 	call	801950 <queue_print_screen>
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb,sensor_obj );
}
  800cd0:	0001883a 	nop
  800cd4:	e037883a 	mov	sp,fp
  800cd8:	dfc00117 	ldw	ra,4(sp)
  800cdc:	df000017 	ldw	fp,0(sp)
  800ce0:	dec00204 	addi	sp,sp,8
  800ce4:	f800283a 	ret

00800ce8 <read_accelerometerX>:
void read_accelerometerX(QUEUE *q)
{
  800ce8:	defff604 	addi	sp,sp,-40
  800cec:	dfc00915 	stw	ra,36(sp)
  800cf0:	df000815 	stw	fp,32(sp)
  800cf4:	df000804 	addi	fp,sp,32
  800cf8:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  800cfc:	008002c4 	movi	r2,11
  800d00:	e0bffcc5 	stb	r2,-13(fp)
  800d04:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800d08:	008002c4 	movi	r2,11
  800d0c:	e0bffd45 	stb	r2,-11(fp)
  800d10:	e03ffd85 	stb	zero,-10(fp)
  800d14:	e03ffdc5 	stb	zero,-9(fp)
  800d18:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800d1c:	00800284 	movi	r2,10
  800d20:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  800d24:	00800b44 	movi	r2,45
  800d28:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800d2c:	00800084 	movi	r2,2
  800d30:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800d34:	e0fffcc4 	addi	r3,fp,-13
  800d38:	d8000215 	stw	zero,8(sp)
  800d3c:	e0bffd44 	addi	r2,fp,-11
  800d40:	d8800115 	stw	r2,4(sp)
  800d44:	d8000015 	stw	zero,0(sp)
  800d48:	180f883a 	mov	r7,r3
  800d4c:	018000c4 	movi	r6,3
  800d50:	000b883a 	mov	r5,zero
  800d54:	01004234 	movhi	r4,264
  800d58:	21048004 	addi	r4,r4,4608
  800d5c:	0802cb40 	call	802cb4 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800d60:	008002c4 	movi	r2,11
  800d64:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800d68:	00800204 	movi	r2,8
  800d6c:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800d70:	e0fffcc4 	addi	r3,fp,-13
  800d74:	d8000215 	stw	zero,8(sp)
  800d78:	e0bffc04 	addi	r2,fp,-16
  800d7c:	d8800115 	stw	r2,4(sp)
  800d80:	008000c4 	movi	r2,3
  800d84:	d8800015 	stw	r2,0(sp)
  800d88:	180f883a 	mov	r7,r3
  800d8c:	01800084 	movi	r6,2
  800d90:	000b883a 	mov	r5,zero
  800d94:	01004234 	movhi	r4,264
  800d98:	21048004 	addi	r4,r4,4608
  800d9c:	0802cb40 	call	802cb4 <alt_avalon_spi_command>
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_x = 0;
  800da0:	e03ffb15 	stw	zero,-20(fp)
		accel_x = (alt_32)accel_data.x;
  800da4:	e0bffc03 	ldbu	r2,-16(fp)
  800da8:	10803fcc 	andi	r2,r2,255
  800dac:	1080201c 	xori	r2,r2,128
  800db0:	10bfe004 	addi	r2,r2,-128
  800db4:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_x))
  800db8:	e17ffb17 	ldw	r5,-20(fp)
  800dbc:	e13fff17 	ldw	r4,-4(fp)
  800dc0:	08017000 	call	801700 <queue_enqueue>
  800dc4:	1000051e 	bne	r2,zero,800ddc <read_accelerometerX+0xf4>
						;
				else{
					queue_dequeue(q);
  800dc8:	e13fff17 	ldw	r4,-4(fp)
  800dcc:	080185c0 	call	80185c <queue_dequeue>
					queue_enqueue(q,accel_x);
  800dd0:	e17ffb17 	ldw	r5,-20(fp)
  800dd4:	e13fff17 	ldw	r4,-4(fp)
  800dd8:	08017000 	call	801700 <queue_enqueue>
				}
}
  800ddc:	0001883a 	nop
  800de0:	e037883a 	mov	sp,fp
  800de4:	dfc00117 	ldw	ra,4(sp)
  800de8:	df000017 	ldw	fp,0(sp)
  800dec:	dec00204 	addi	sp,sp,8
  800df0:	f800283a 	ret

00800df4 <print_pix>:

*/
/*************************************************/

void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
  800df4:	defffb04 	addi	sp,sp,-20
  800df8:	dfc00415 	stw	ra,16(sp)
  800dfc:	df000315 	stw	fp,12(sp)
  800e00:	df000304 	addi	fp,sp,12
  800e04:	e13ffd15 	stw	r4,-12(fp)
  800e08:	e17ffe15 	stw	r5,-8(fp)
  800e0c:	e1bfff15 	stw	r6,-4(fp)
	if(rgb <= 7 && rgb >= 0)
  800e10:	e0bfff17 	ldw	r2,-4(fp)
  800e14:	10800228 	cmpgeui	r2,r2,8
  800e18:	10000e1e 	bne	r2,zero,800e54 <print_pix+0x60>
		set_pixel(x,y,rgb);
  800e1c:	01405004 	movi	r5,320
  800e20:	e13ffe17 	ldw	r4,-8(fp)
  800e24:	08022540 	call	802254 <__mulsi3>
  800e28:	1007883a 	mov	r3,r2
  800e2c:	e0bffd17 	ldw	r2,-12(fp)
  800e30:	1885883a 	add	r2,r3,r2
  800e34:	1085883a 	add	r2,r2,r2
  800e38:	1085883a 	add	r2,r2,r2
  800e3c:	1007883a 	mov	r3,r2
  800e40:	00804034 	movhi	r2,256
  800e44:	1885883a 	add	r2,r3,r2
  800e48:	e0ffff17 	ldw	r3,-4(fp)
  800e4c:	10c00035 	stwio	r3,0(r2)
	else
		set_pixel(x,y,0);
}
  800e50:	00000d06 	br	800e88 <print_pix+0x94>
void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
	if(rgb <= 7 && rgb >= 0)
		set_pixel(x,y,rgb);
	else
		set_pixel(x,y,0);
  800e54:	01405004 	movi	r5,320
  800e58:	e13ffe17 	ldw	r4,-8(fp)
  800e5c:	08022540 	call	802254 <__mulsi3>
  800e60:	1007883a 	mov	r3,r2
  800e64:	e0bffd17 	ldw	r2,-12(fp)
  800e68:	1885883a 	add	r2,r3,r2
  800e6c:	1085883a 	add	r2,r2,r2
  800e70:	1085883a 	add	r2,r2,r2
  800e74:	1007883a 	mov	r3,r2
  800e78:	00804034 	movhi	r2,256
  800e7c:	1885883a 	add	r2,r3,r2
  800e80:	0007883a 	mov	r3,zero
  800e84:	10c00035 	stwio	r3,0(r2)
}
  800e88:	0001883a 	nop
  800e8c:	e037883a 	mov	sp,fp
  800e90:	dfc00117 	ldw	ra,4(sp)
  800e94:	df000017 	ldw	fp,0(sp)
  800e98:	dec00204 	addi	sp,sp,8
  800e9c:	f800283a 	ret

00800ea0 <print_hline>:
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){
  800ea0:	defff804 	addi	sp,sp,-32
  800ea4:	dfc00715 	stw	ra,28(sp)
  800ea8:	df000615 	stw	fp,24(sp)
  800eac:	df000604 	addi	fp,sp,24
  800eb0:	e13ffc15 	stw	r4,-16(fp)
  800eb4:	e17ffd15 	stw	r5,-12(fp)
  800eb8:	e1bffe15 	stw	r6,-8(fp)
  800ebc:	e1ffff15 	stw	r7,-4(fp)



	if(x_start + len <= 320){
  800ec0:	e0fffc17 	ldw	r3,-16(fp)
  800ec4:	e0bffe17 	ldw	r2,-8(fp)
  800ec8:	1885883a 	add	r2,r3,r2
  800ecc:	10805068 	cmpgeui	r2,r2,321
  800ed0:	1000101e 	bne	r2,zero,800f14 <print_hline+0x74>
		for(int i = 0; i < len; i++){
  800ed4:	e03ffa15 	stw	zero,-24(fp)
  800ed8:	00000a06 	br	800f04 <print_hline+0x64>
			print_pix(x_start + i,y_start, RGB);
  800edc:	e0fffa17 	ldw	r3,-24(fp)
  800ee0:	e0bffc17 	ldw	r2,-16(fp)
  800ee4:	1885883a 	add	r2,r3,r2
  800ee8:	e1bfff17 	ldw	r6,-4(fp)
  800eec:	e17ffd17 	ldw	r5,-12(fp)
  800ef0:	1009883a 	mov	r4,r2
  800ef4:	0800df40 	call	800df4 <print_pix>
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){



	if(x_start + len <= 320){
		for(int i = 0; i < len; i++){
  800ef8:	e0bffa17 	ldw	r2,-24(fp)
  800efc:	10800044 	addi	r2,r2,1
  800f00:	e0bffa15 	stw	r2,-24(fp)
  800f04:	e0fffa17 	ldw	r3,-24(fp)
  800f08:	e0bffe17 	ldw	r2,-8(fp)
  800f0c:	18bff336 	bltu	r3,r2,800edc <__alt_data_end+0xff800edc>
		for(int i = 0; i < (320-x_start); i++){
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800f10:	00001106 	br	800f58 <print_hline+0xb8>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800f14:	e03ffb15 	stw	zero,-20(fp)
  800f18:	00000a06 	br	800f44 <print_hline+0xa4>
					print_pix(x_start + i,y_start, RGB);
  800f1c:	e0fffb17 	ldw	r3,-20(fp)
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	1885883a 	add	r2,r3,r2
  800f28:	e1bfff17 	ldw	r6,-4(fp)
  800f2c:	e17ffd17 	ldw	r5,-12(fp)
  800f30:	1009883a 	mov	r4,r2
  800f34:	0800df40 	call	800df4 <print_pix>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800f38:	e0bffb17 	ldw	r2,-20(fp)
  800f3c:	10800044 	addi	r2,r2,1
  800f40:	e0bffb15 	stw	r2,-20(fp)
  800f44:	00c05004 	movi	r3,320
  800f48:	e0bffc17 	ldw	r2,-16(fp)
  800f4c:	1885c83a 	sub	r2,r3,r2
  800f50:	e0fffb17 	ldw	r3,-20(fp)
  800f54:	18bff136 	bltu	r3,r2,800f1c <__alt_data_end+0xff800f1c>
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800f58:	0001883a 	nop
  800f5c:	e037883a 	mov	sp,fp
  800f60:	dfc00117 	ldw	ra,4(sp)
  800f64:	df000017 	ldw	fp,0(sp)
  800f68:	dec00204 	addi	sp,sp,8
  800f6c:	f800283a 	ret

00800f70 <print_vline>:
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
  800f70:	defff804 	addi	sp,sp,-32
  800f74:	dfc00715 	stw	ra,28(sp)
  800f78:	df000615 	stw	fp,24(sp)
  800f7c:	df000604 	addi	fp,sp,24
  800f80:	e13ffc15 	stw	r4,-16(fp)
  800f84:	e17ffd15 	stw	r5,-12(fp)
  800f88:	e1bffe15 	stw	r6,-8(fp)
  800f8c:	e1ffff15 	stw	r7,-4(fp)
	if(y_start + len <= 240){
  800f90:	e0fffd17 	ldw	r3,-12(fp)
  800f94:	e0bffe17 	ldw	r2,-8(fp)
  800f98:	1885883a 	add	r2,r3,r2
  800f9c:	10803c68 	cmpgeui	r2,r2,241
  800fa0:	1000101e 	bne	r2,zero,800fe4 <print_vline+0x74>
			for(int i = 0; i < len; i++){
  800fa4:	e03ffa15 	stw	zero,-24(fp)
  800fa8:	00000a06 	br	800fd4 <print_vline+0x64>
				print_pix(x_start,y_start + i, RGB);
  800fac:	e0fffa17 	ldw	r3,-24(fp)
  800fb0:	e0bffd17 	ldw	r2,-12(fp)
  800fb4:	1885883a 	add	r2,r3,r2
  800fb8:	e1bfff17 	ldw	r6,-4(fp)
  800fbc:	100b883a 	mov	r5,r2
  800fc0:	e13ffc17 	ldw	r4,-16(fp)
  800fc4:	0800df40 	call	800df4 <print_pix>

}
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
	if(y_start + len <= 240){
			for(int i = 0; i < len; i++){
  800fc8:	e0bffa17 	ldw	r2,-24(fp)
  800fcc:	10800044 	addi	r2,r2,1
  800fd0:	e0bffa15 	stw	r2,-24(fp)
  800fd4:	e0fffa17 	ldw	r3,-24(fp)
  800fd8:	e0bffe17 	ldw	r2,-8(fp)
  800fdc:	18bff336 	bltu	r3,r2,800fac <__alt_data_end+0xff800fac>

			for(int i = 0; i < (240-y_start); i++){
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  800fe0:	00001106 	br	801028 <print_vline+0xb8>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  800fe4:	e03ffb15 	stw	zero,-20(fp)
  800fe8:	00000a06 	br	801014 <print_vline+0xa4>
						print_pix(x_start,y_start +i , RGB);
  800fec:	e0fffb17 	ldw	r3,-20(fp)
  800ff0:	e0bffd17 	ldw	r2,-12(fp)
  800ff4:	1885883a 	add	r2,r3,r2
  800ff8:	e1bfff17 	ldw	r6,-4(fp)
  800ffc:	100b883a 	mov	r5,r2
  801000:	e13ffc17 	ldw	r4,-16(fp)
  801004:	0800df40 	call	800df4 <print_pix>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  801008:	e0bffb17 	ldw	r2,-20(fp)
  80100c:	10800044 	addi	r2,r2,1
  801010:	e0bffb15 	stw	r2,-20(fp)
  801014:	00c03c04 	movi	r3,240
  801018:	e0bffd17 	ldw	r2,-12(fp)
  80101c:	1885c83a 	sub	r2,r3,r2
  801020:	e0fffb17 	ldw	r3,-20(fp)
  801024:	18bff136 	bltu	r3,r2,800fec <__alt_data_end+0xff800fec>
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  801028:	0001883a 	nop
  80102c:	e037883a 	mov	sp,fp
  801030:	dfc00117 	ldw	ra,4(sp)
  801034:	df000017 	ldw	fp,0(sp)
  801038:	dec00204 	addi	sp,sp,8
  80103c:	f800283a 	ret

00801040 <print_char>:

void  print_char(alt_u32 x,alt_u32 y,alt_u32 rgb,alt_u32 BG_RGB,char Character)
{
  801040:	defff604 	addi	sp,sp,-40
  801044:	dfc00915 	stw	ra,36(sp)
  801048:	df000815 	stw	fp,32(sp)
  80104c:	df000804 	addi	fp,sp,32
  801050:	e13ffb15 	stw	r4,-20(fp)
  801054:	e17ffc15 	stw	r5,-16(fp)
  801058:	e1bffd15 	stw	r6,-12(fp)
  80105c:	e1fffe15 	stw	r7,-8(fp)
  801060:	e0800217 	ldw	r2,8(fp)
  801064:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
  801068:	e0bfff03 	ldbu	r2,-4(fp)
  80106c:	e0bffa05 	stb	r2,-24(fp)
	for (row = 0; row <8; row++)
  801070:	e03ff815 	stw	zero,-32(fp)
  801074:	00002c06 	br	801128 <print_char+0xe8>
	{
			temp =  (alt_8)font8x8_basic[token][row];
  801078:	e0fffa03 	ldbu	r3,-24(fp)
  80107c:	00802034 	movhi	r2,128
  801080:	108def04 	addi	r2,r2,14268
  801084:	180690fa 	slli	r3,r3,3
  801088:	10c7883a 	add	r3,r2,r3
  80108c:	e0bff817 	ldw	r2,-32(fp)
  801090:	1885883a 	add	r2,r3,r2
  801094:	10800003 	ldbu	r2,0(r2)
  801098:	e0bffa45 	stb	r2,-23(fp)

			for (int pos = 0 ; pos != 8 ; pos++) {
  80109c:	e03ff915 	stw	zero,-28(fp)
  8010a0:	00001b06 	br	801110 <print_char+0xd0>
			    if (temp & (1 << pos)) {
  8010a4:	e0fffa43 	ldbu	r3,-23(fp)
  8010a8:	e0bff917 	ldw	r2,-28(fp)
  8010ac:	1885d83a 	sra	r2,r3,r2
  8010b0:	1080004c 	andi	r2,r2,1
  8010b4:	10000a26 	beq	r2,zero,8010e0 <print_char+0xa0>
			        // Current bit is set to 1
			    	print_pix(x+pos,y+row,rgb);
  8010b8:	e0fff917 	ldw	r3,-28(fp)
  8010bc:	e0bffb17 	ldw	r2,-20(fp)
  8010c0:	1889883a 	add	r4,r3,r2
  8010c4:	e0fff817 	ldw	r3,-32(fp)
  8010c8:	e0bffc17 	ldw	r2,-16(fp)
  8010cc:	1885883a 	add	r2,r3,r2
  8010d0:	e1bffd17 	ldw	r6,-12(fp)
  8010d4:	100b883a 	mov	r5,r2
  8010d8:	0800df40 	call	800df4 <print_pix>
  8010dc:	00000906 	br	801104 <print_char+0xc4>
			    } else {
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
  8010e0:	e0fff917 	ldw	r3,-28(fp)
  8010e4:	e0bffb17 	ldw	r2,-20(fp)
  8010e8:	1889883a 	add	r4,r3,r2
  8010ec:	e0fff817 	ldw	r3,-32(fp)
  8010f0:	e0bffc17 	ldw	r2,-16(fp)
  8010f4:	1885883a 	add	r2,r3,r2
  8010f8:	e1bffe17 	ldw	r6,-8(fp)
  8010fc:	100b883a 	mov	r5,r2
  801100:	0800df40 	call	800df4 <print_pix>
	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
	{
			temp =  (alt_8)font8x8_basic[token][row];

			for (int pos = 0 ; pos != 8 ; pos++) {
  801104:	e0bff917 	ldw	r2,-28(fp)
  801108:	10800044 	addi	r2,r2,1
  80110c:	e0bff915 	stw	r2,-28(fp)
  801110:	e0bff917 	ldw	r2,-28(fp)
  801114:	10800218 	cmpnei	r2,r2,8
  801118:	103fe21e 	bne	r2,zero,8010a4 <__alt_data_end+0xff8010a4>
{
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
  80111c:	e0bff817 	ldw	r2,-32(fp)
  801120:	10800044 	addi	r2,r2,1
  801124:	e0bff815 	stw	r2,-32(fp)
  801128:	e0bff817 	ldw	r2,-32(fp)
  80112c:	10800210 	cmplti	r2,r2,8
  801130:	103fd11e 	bne	r2,zero,801078 <__alt_data_end+0xff801078>
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
			    }
			}
	}
}
  801134:	0001883a 	nop
  801138:	e037883a 	mov	sp,fp
  80113c:	dfc00117 	ldw	ra,4(sp)
  801140:	df000017 	ldw	fp,0(sp)
  801144:	dec00204 	addi	sp,sp,8
  801148:	f800283a 	ret

0080114c <print_str>:
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
  80114c:	defff804 	addi	sp,sp,-32
  801150:	dfc00715 	stw	ra,28(sp)
  801154:	df000615 	stw	fp,24(sp)
  801158:	df000604 	addi	fp,sp,24
  80115c:	e13ffc15 	stw	r4,-16(fp)
  801160:	e17ffd15 	stw	r5,-12(fp)
  801164:	e1bffe15 	stw	r6,-8(fp)
  801168:	e1ffff15 	stw	r7,-4(fp)
	alt_u16 len = (alt_u16) strlen(str);
  80116c:	e13fff17 	ldw	r4,-4(fp)
  801170:	080269c0 	call	80269c <strlen>
  801174:	e0bffb8d 	sth	r2,-18(fp)
	alt_u16 i;
	for(i=0; i< len; i++){
  801178:	e03ffb0d 	sth	zero,-20(fp)
  80117c:	00001406 	br	8011d0 <print_str+0x84>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
  801180:	e0bffb0b 	ldhu	r2,-20(fp)
  801184:	100490fa 	slli	r2,r2,3
  801188:	1007883a 	mov	r3,r2
  80118c:	e0bffc17 	ldw	r2,-16(fp)
  801190:	1889883a 	add	r4,r3,r2
  801194:	e0bffb0b 	ldhu	r2,-20(fp)
  801198:	e0ffff17 	ldw	r3,-4(fp)
  80119c:	1885883a 	add	r2,r3,r2
  8011a0:	10800003 	ldbu	r2,0(r2)
  8011a4:	10803fcc 	andi	r2,r2,255
  8011a8:	1080201c 	xori	r2,r2,128
  8011ac:	10bfe004 	addi	r2,r2,-128
  8011b0:	d8800015 	stw	r2,0(sp)
  8011b4:	000f883a 	mov	r7,zero
  8011b8:	e1bffe17 	ldw	r6,-8(fp)
  8011bc:	e17ffd17 	ldw	r5,-12(fp)
  8011c0:	08010400 	call	801040 <print_char>
}
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
	alt_u16 len = (alt_u16) strlen(str);
	alt_u16 i;
	for(i=0; i< len; i++){
  8011c4:	e0bffb0b 	ldhu	r2,-20(fp)
  8011c8:	10800044 	addi	r2,r2,1
  8011cc:	e0bffb0d 	sth	r2,-20(fp)
  8011d0:	e0fffb0b 	ldhu	r3,-20(fp)
  8011d4:	e0bffb8b 	ldhu	r2,-18(fp)
  8011d8:	18bfe936 	bltu	r3,r2,801180 <__alt_data_end+0xff801180>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
	}
}
  8011dc:	0001883a 	nop
  8011e0:	e037883a 	mov	sp,fp
  8011e4:	dfc00117 	ldw	ra,4(sp)
  8011e8:	df000017 	ldw	fp,0(sp)
  8011ec:	dec00204 	addi	sp,sp,8
  8011f0:	f800283a 	ret

008011f4 <print_symmetry_dots_circle>:

void print_symmetry_dots_circle(alt_u32 x, alt_u32 y, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  8011f4:	defffa04 	addi	sp,sp,-24
  8011f8:	dfc00515 	stw	ra,20(sp)
  8011fc:	df000415 	stw	fp,16(sp)
  801200:	df000404 	addi	fp,sp,16
  801204:	e13ffc15 	stw	r4,-16(fp)
  801208:	e17ffd15 	stw	r5,-12(fp)
  80120c:	e1bffe15 	stw	r6,-8(fp)
  801210:	e1ffff15 	stw	r7,-4(fp)
		print_pix(x+x_centrum,y + y_centrum,rgb);
  801214:	e0fffc17 	ldw	r3,-16(fp)
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	1889883a 	add	r4,r3,r2
  801220:	e0fffd17 	ldw	r3,-12(fp)
  801224:	e0bfff17 	ldw	r2,-4(fp)
  801228:	1885883a 	add	r2,r3,r2
  80122c:	e1800217 	ldw	r6,8(fp)
  801230:	100b883a 	mov	r5,r2
  801234:	0800df40 	call	800df4 <print_pix>
		print_pix(x+x_centrum,-y + y_centrum,rgb);
  801238:	e0fffc17 	ldw	r3,-16(fp)
  80123c:	e0bffe17 	ldw	r2,-8(fp)
  801240:	1889883a 	add	r4,r3,r2
  801244:	e0ffff17 	ldw	r3,-4(fp)
  801248:	e0bffd17 	ldw	r2,-12(fp)
  80124c:	1885c83a 	sub	r2,r3,r2
  801250:	e1800217 	ldw	r6,8(fp)
  801254:	100b883a 	mov	r5,r2
  801258:	0800df40 	call	800df4 <print_pix>
		print_pix(-x+x_centrum,y + y_centrum,rgb);
  80125c:	e0fffe17 	ldw	r3,-8(fp)
  801260:	e0bffc17 	ldw	r2,-16(fp)
  801264:	1889c83a 	sub	r4,r3,r2
  801268:	e0fffd17 	ldw	r3,-12(fp)
  80126c:	e0bfff17 	ldw	r2,-4(fp)
  801270:	1885883a 	add	r2,r3,r2
  801274:	e1800217 	ldw	r6,8(fp)
  801278:	100b883a 	mov	r5,r2
  80127c:	0800df40 	call	800df4 <print_pix>
		print_pix(-x+x_centrum,-y + y_centrum,rgb);
  801280:	e0fffe17 	ldw	r3,-8(fp)
  801284:	e0bffc17 	ldw	r2,-16(fp)
  801288:	1889c83a 	sub	r4,r3,r2
  80128c:	e0ffff17 	ldw	r3,-4(fp)
  801290:	e0bffd17 	ldw	r2,-12(fp)
  801294:	1885c83a 	sub	r2,r3,r2
  801298:	e1800217 	ldw	r6,8(fp)
  80129c:	100b883a 	mov	r5,r2
  8012a0:	0800df40 	call	800df4 <print_pix>

		print_pix(y + x_centrum,x+y_centrum,rgb);
  8012a4:	e0fffd17 	ldw	r3,-12(fp)
  8012a8:	e0bffe17 	ldw	r2,-8(fp)
  8012ac:	1889883a 	add	r4,r3,r2
  8012b0:	e0fffc17 	ldw	r3,-16(fp)
  8012b4:	e0bfff17 	ldw	r2,-4(fp)
  8012b8:	1885883a 	add	r2,r3,r2
  8012bc:	e1800217 	ldw	r6,8(fp)
  8012c0:	100b883a 	mov	r5,r2
  8012c4:	0800df40 	call	800df4 <print_pix>
		print_pix(-y + x_centrum,x+y_centrum,rgb);
  8012c8:	e0fffe17 	ldw	r3,-8(fp)
  8012cc:	e0bffd17 	ldw	r2,-12(fp)
  8012d0:	1889c83a 	sub	r4,r3,r2
  8012d4:	e0fffc17 	ldw	r3,-16(fp)
  8012d8:	e0bfff17 	ldw	r2,-4(fp)
  8012dc:	1885883a 	add	r2,r3,r2
  8012e0:	e1800217 	ldw	r6,8(fp)
  8012e4:	100b883a 	mov	r5,r2
  8012e8:	0800df40 	call	800df4 <print_pix>
		print_pix(y + x_centrum,-x+y_centrum,rgb);
  8012ec:	e0fffd17 	ldw	r3,-12(fp)
  8012f0:	e0bffe17 	ldw	r2,-8(fp)
  8012f4:	1889883a 	add	r4,r3,r2
  8012f8:	e0ffff17 	ldw	r3,-4(fp)
  8012fc:	e0bffc17 	ldw	r2,-16(fp)
  801300:	1885c83a 	sub	r2,r3,r2
  801304:	e1800217 	ldw	r6,8(fp)
  801308:	100b883a 	mov	r5,r2
  80130c:	0800df40 	call	800df4 <print_pix>
		print_pix(-y + x_centrum,-x+y_centrum,rgb);
  801310:	e0fffe17 	ldw	r3,-8(fp)
  801314:	e0bffd17 	ldw	r2,-12(fp)
  801318:	1889c83a 	sub	r4,r3,r2
  80131c:	e0ffff17 	ldw	r3,-4(fp)
  801320:	e0bffc17 	ldw	r2,-16(fp)
  801324:	1885c83a 	sub	r2,r3,r2
  801328:	e1800217 	ldw	r6,8(fp)
  80132c:	100b883a 	mov	r5,r2
  801330:	0800df40 	call	800df4 <print_pix>

}
  801334:	0001883a 	nop
  801338:	e037883a 	mov	sp,fp
  80133c:	dfc00117 	ldw	ra,4(sp)
  801340:	df000017 	ldw	fp,0(sp)
  801344:	dec00204 	addi	sp,sp,8
  801348:	f800283a 	ret

0080134c <print_empty_circle>:
void print_empty_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  80134c:	defff504 	addi	sp,sp,-44
  801350:	dfc00a15 	stw	ra,40(sp)
  801354:	df000915 	stw	fp,36(sp)
  801358:	df000904 	addi	fp,sp,36
  80135c:	e13ffc15 	stw	r4,-16(fp)
  801360:	e17ffd15 	stw	r5,-12(fp)
  801364:	e1bffe15 	stw	r6,-8(fp)
  801368:	e1ffff15 	stw	r7,-4(fp)
		unsigned int value;
		unsigned int radius = radie;
  80136c:	e0bffc17 	ldw	r2,-16(fp)
  801370:	e0bffb15 	stw	r2,-20(fp)
		int x = 0;
  801374:	e03ff815 	stw	zero,-32(fp)
		int y = radie;
  801378:	e0bffc17 	ldw	r2,-16(fp)
  80137c:	e0bff915 	stw	r2,-28(fp)

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
  801380:	e0fff817 	ldw	r3,-32(fp)
  801384:	e13ff917 	ldw	r4,-28(fp)
  801388:	e0bfff17 	ldw	r2,-4(fp)
  80138c:	d8800015 	stw	r2,0(sp)
  801390:	e1fffe17 	ldw	r7,-8(fp)
  801394:	e1bffd17 	ldw	r6,-12(fp)
  801398:	200b883a 	mov	r5,r4
  80139c:	1809883a 	mov	r4,r3
  8013a0:	08011f40 	call	8011f4 <print_symmetry_dots_circle>
		int h = 1- radie;
  8013a4:	00c00044 	movi	r3,1
  8013a8:	e0bffc17 	ldw	r2,-16(fp)
  8013ac:	1885c83a 	sub	r2,r3,r2
  8013b0:	e0bffa15 	stw	r2,-24(fp)
		while(y > x){
  8013b4:	00003306 	br	801484 <print_empty_circle+0x138>
			if (h < 0){//east point
  8013b8:	e0bffa17 	ldw	r2,-24(fp)
  8013bc:	1000150e 	bge	r2,zero,801414 <print_empty_circle+0xc8>

				print_symmetry_dots_circle(x+1,y,x_centrum,y_centrum,rgb);
  8013c0:	e0bff817 	ldw	r2,-32(fp)
  8013c4:	10800044 	addi	r2,r2,1
  8013c8:	1009883a 	mov	r4,r2
  8013cc:	e0fff917 	ldw	r3,-28(fp)
  8013d0:	e0bfff17 	ldw	r2,-4(fp)
  8013d4:	d8800015 	stw	r2,0(sp)
  8013d8:	e1fffe17 	ldw	r7,-8(fp)
  8013dc:	e1bffd17 	ldw	r6,-12(fp)
  8013e0:	180b883a 	mov	r5,r3
  8013e4:	08011f40 	call	8011f4 <print_symmetry_dots_circle>
				h = h +2*x +3;
  8013e8:	e0bff817 	ldw	r2,-32(fp)
  8013ec:	1085883a 	add	r2,r2,r2
  8013f0:	1007883a 	mov	r3,r2
  8013f4:	e0bffa17 	ldw	r2,-24(fp)
  8013f8:	1885883a 	add	r2,r3,r2
  8013fc:	108000c4 	addi	r2,r2,3
  801400:	e0bffa15 	stw	r2,-24(fp)
				x= x+1;
  801404:	e0bff817 	ldw	r2,-32(fp)
  801408:	10800044 	addi	r2,r2,1
  80140c:	e0bff815 	stw	r2,-32(fp)
  801410:	00001c06 	br	801484 <print_empty_circle+0x138>

			}
			else{
				print_symmetry_dots_circle(x+1,y-1,x_centrum,y_centrum,rgb);
  801414:	e0bff817 	ldw	r2,-32(fp)
  801418:	10800044 	addi	r2,r2,1
  80141c:	1007883a 	mov	r3,r2
  801420:	e0bff917 	ldw	r2,-28(fp)
  801424:	10bfffc4 	addi	r2,r2,-1
  801428:	1009883a 	mov	r4,r2
  80142c:	e0bfff17 	ldw	r2,-4(fp)
  801430:	d8800015 	stw	r2,0(sp)
  801434:	e1fffe17 	ldw	r7,-8(fp)
  801438:	e1bffd17 	ldw	r6,-12(fp)
  80143c:	200b883a 	mov	r5,r4
  801440:	1809883a 	mov	r4,r3
  801444:	08011f40 	call	8011f4 <print_symmetry_dots_circle>
				h= h+2*(x-y)+5;
  801448:	e0fff817 	ldw	r3,-32(fp)
  80144c:	e0bff917 	ldw	r2,-28(fp)
  801450:	1885c83a 	sub	r2,r3,r2
  801454:	1085883a 	add	r2,r2,r2
  801458:	1007883a 	mov	r3,r2
  80145c:	e0bffa17 	ldw	r2,-24(fp)
  801460:	1885883a 	add	r2,r3,r2
  801464:	10800144 	addi	r2,r2,5
  801468:	e0bffa15 	stw	r2,-24(fp)
				y=y-1;
  80146c:	e0bff917 	ldw	r2,-28(fp)
  801470:	10bfffc4 	addi	r2,r2,-1
  801474:	e0bff915 	stw	r2,-28(fp)
				x=x+1;
  801478:	e0bff817 	ldw	r2,-32(fp)
  80147c:	10800044 	addi	r2,r2,1
  801480:	e0bff815 	stw	r2,-32(fp)
		int x = 0;
		int y = radie;

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
		int h = 1- radie;
		while(y > x){
  801484:	e0bff917 	ldw	r2,-28(fp)
  801488:	e0fff817 	ldw	r3,-32(fp)
  80148c:	18bfca16 	blt	r3,r2,8013b8 <__alt_data_end+0xff8013b8>
				y=y-1;
				x=x+1;
			}

		}
}
  801490:	0001883a 	nop
  801494:	e037883a 	mov	sp,fp
  801498:	dfc00117 	ldw	ra,4(sp)
  80149c:	df000017 	ldw	fp,0(sp)
  8014a0:	dec00204 	addi	sp,sp,8
  8014a4:	f800283a 	ret

008014a8 <print_circle>:
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  8014a8:	defff904 	addi	sp,sp,-28
  8014ac:	dfc00615 	stw	ra,24(sp)
  8014b0:	df000515 	stw	fp,20(sp)
  8014b4:	df000504 	addi	fp,sp,20
  8014b8:	e13ffc15 	stw	r4,-16(fp)
  8014bc:	e17ffd15 	stw	r5,-12(fp)
  8014c0:	e1bffe15 	stw	r6,-8(fp)
  8014c4:	e1ffff15 	stw	r7,-4(fp)
	unsigned int radius = radie;
  8014c8:	e0bffc17 	ldw	r2,-16(fp)
  8014cc:	e0bffb15 	stw	r2,-20(fp)

	for(radius = radie; radius > 0; radius--)
  8014d0:	e0bffc17 	ldw	r2,-16(fp)
  8014d4:	e0bffb15 	stw	r2,-20(fp)
  8014d8:	00000806 	br	8014fc <print_circle+0x54>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
  8014dc:	e1ffff17 	ldw	r7,-4(fp)
  8014e0:	e1bffe17 	ldw	r6,-8(fp)
  8014e4:	e17ffd17 	ldw	r5,-12(fp)
  8014e8:	e13ffb17 	ldw	r4,-20(fp)
  8014ec:	080134c0 	call	80134c <print_empty_circle>
}
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
	unsigned int radius = radie;

	for(radius = radie; radius > 0; radius--)
  8014f0:	e0bffb17 	ldw	r2,-20(fp)
  8014f4:	10bfffc4 	addi	r2,r2,-1
  8014f8:	e0bffb15 	stw	r2,-20(fp)
  8014fc:	e0bffb17 	ldw	r2,-20(fp)
  801500:	103ff61e 	bne	r2,zero,8014dc <__alt_data_end+0xff8014dc>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
  801504:	0001883a 	nop
  801508:	e037883a 	mov	sp,fp
  80150c:	dfc00117 	ldw	ra,4(sp)
  801510:	df000017 	ldw	fp,0(sp)
  801514:	dec00204 	addi	sp,sp,8
  801518:	f800283a 	ret

0080151c <clear_screen>:
void clear_screen(alt_u32 rgb){
  80151c:	defffb04 	addi	sp,sp,-20
  801520:	dfc00415 	stw	ra,16(sp)
  801524:	df000315 	stw	fp,12(sp)
  801528:	df000304 	addi	fp,sp,12
  80152c:	e13fff15 	stw	r4,-4(fp)
	for(int y = 0 ;y <240;y++)
  801530:	e03ffd15 	stw	zero,-12(fp)
  801534:	00001106 	br	80157c <clear_screen+0x60>
		for(int x = 0; x < 320; x++)
  801538:	e03ffe15 	stw	zero,-8(fp)
  80153c:	00000906 	br	801564 <clear_screen+0x48>
			print_pix(x,y,rgb);
  801540:	e0bffe17 	ldw	r2,-8(fp)
  801544:	e0fffd17 	ldw	r3,-12(fp)
  801548:	e1bfff17 	ldw	r6,-4(fp)
  80154c:	180b883a 	mov	r5,r3
  801550:	1009883a 	mov	r4,r2
  801554:	0800df40 	call	800df4 <print_pix>
	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
		for(int x = 0; x < 320; x++)
  801558:	e0bffe17 	ldw	r2,-8(fp)
  80155c:	10800044 	addi	r2,r2,1
  801560:	e0bffe15 	stw	r2,-8(fp)
  801564:	e0bffe17 	ldw	r2,-8(fp)
  801568:	10805010 	cmplti	r2,r2,320
  80156c:	103ff41e 	bne	r2,zero,801540 <__alt_data_end+0xff801540>

	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
  801570:	e0bffd17 	ldw	r2,-12(fp)
  801574:	10800044 	addi	r2,r2,1
  801578:	e0bffd15 	stw	r2,-12(fp)
  80157c:	e0bffd17 	ldw	r2,-12(fp)
  801580:	10803c10 	cmplti	r2,r2,240
  801584:	103fec1e 	bne	r2,zero,801538 <__alt_data_end+0xff801538>
		for(int x = 0; x < 320; x++)
			print_pix(x,y,rgb);
}
  801588:	0001883a 	nop
  80158c:	e037883a 	mov	sp,fp
  801590:	dfc00117 	ldw	ra,4(sp)
  801594:	df000017 	ldw	fp,0(sp)
  801598:	dec00204 	addi	sp,sp,8
  80159c:	f800283a 	ret

008015a0 <read_pixel_ram_int>:

pixel_data read_pixel_ram_int(alt_u32 x_start, alt_u32 y_start)
{
  8015a0:	defffb04 	addi	sp,sp,-20
  8015a4:	dfc00415 	stw	ra,16(sp)
  8015a8:	df000315 	stw	fp,12(sp)
  8015ac:	df000304 	addi	fp,sp,12
  8015b0:	e13ffe15 	stw	r4,-8(fp)
  8015b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 i = read_pixel(x_start, y_start);
  8015b8:	01405004 	movi	r5,320
  8015bc:	e13fff17 	ldw	r4,-4(fp)
  8015c0:	08022540 	call	802254 <__mulsi3>
  8015c4:	1007883a 	mov	r3,r2
  8015c8:	e0bffe17 	ldw	r2,-8(fp)
  8015cc:	1885883a 	add	r2,r3,r2
  8015d0:	1085883a 	add	r2,r2,r2
  8015d4:	1085883a 	add	r2,r2,r2
  8015d8:	1007883a 	mov	r3,r2
  8015dc:	00804034 	movhi	r2,256
  8015e0:	1885883a 	add	r2,r3,r2
  8015e4:	10800037 	ldwio	r2,0(r2)
  8015e8:	e0bffd15 	stw	r2,-12(fp)
	return (alt_u8) i;
  8015ec:	e0bffd17 	ldw	r2,-12(fp)
}
  8015f0:	e037883a 	mov	sp,fp
  8015f4:	dfc00117 	ldw	ra,4(sp)
  8015f8:	df000017 	ldw	fp,0(sp)
  8015fc:	dec00204 	addi	sp,sp,8
  801600:	f800283a 	ret

00801604 <print_welcome_screen>:

void print_welcome_screen(){
  801604:	defffd04 	addi	sp,sp,-12
  801608:	dfc00215 	stw	ra,8(sp)
  80160c:	df000115 	stw	fp,4(sp)
  801610:	df000104 	addi	fp,sp,4
	clear_screen(0);
  801614:	0009883a 	mov	r4,zero
  801618:	080151c0 	call	80151c <clear_screen>
		int radie = rand() % 50;
		int rgb = rand() % 8;
		print_circle(radie,  x_centrum, y_centrum, rgb);
	}
	*/
	print_circle(10,  320/2, 240/2, 3);
  80161c:	01c000c4 	movi	r7,3
  801620:	01801e04 	movi	r6,120
  801624:	01402804 	movi	r5,160
  801628:	01000284 	movi	r4,10
  80162c:	08014a80 	call	8014a8 <print_circle>
	print_str(50,50,2,"Welcome to measurement station!");
  801630:	01c02034 	movhi	r7,128
  801634:	39cdcc04 	addi	r7,r7,14128
  801638:	01800084 	movi	r6,2
  80163c:	01400c84 	movi	r5,50
  801640:	01000c84 	movi	r4,50
  801644:	080114c0 	call	80114c <print_str>
	print_str(50,150,2,"Press any key to continue");
  801648:	01c02034 	movhi	r7,128
  80164c:	39cdd404 	addi	r7,r7,14160
  801650:	01800084 	movi	r6,2
  801654:	01402584 	movi	r5,150
  801658:	01000c84 	movi	r4,50
  80165c:	080114c0 	call	80114c <print_str>
	alt_u32 key = 0;
  801660:	e03fff15 	stw	zero,-4(fp)
	key = IORD_32DIRECT(KEY_INPUT_BASE,0);
  801664:	00804234 	movhi	r2,264
  801668:	10848804 	addi	r2,r2,4640
  80166c:	10800037 	ldwio	r2,0(r2)
  801670:	e0bfff15 	stw	r2,-4(fp)
	while(key == 7)
  801674:	00000406 	br	801688 <print_welcome_screen+0x84>
		key = IORD_32DIRECT(KEY_INPUT_BASE,0);
  801678:	00804234 	movhi	r2,264
  80167c:	10848804 	addi	r2,r2,4640
  801680:	10800037 	ldwio	r2,0(r2)
  801684:	e0bfff15 	stw	r2,-4(fp)
	print_circle(10,  320/2, 240/2, 3);
	print_str(50,50,2,"Welcome to measurement station!");
	print_str(50,150,2,"Press any key to continue");
	alt_u32 key = 0;
	key = IORD_32DIRECT(KEY_INPUT_BASE,0);
	while(key == 7)
  801688:	e0bfff17 	ldw	r2,-4(fp)
  80168c:	108001e0 	cmpeqi	r2,r2,7
  801690:	103ff91e 	bne	r2,zero,801678 <__alt_data_end+0xff801678>
		key = IORD_32DIRECT(KEY_INPUT_BASE,0);


}
  801694:	0001883a 	nop
  801698:	e037883a 	mov	sp,fp
  80169c:	dfc00117 	ldw	ra,4(sp)
  8016a0:	df000017 	ldw	fp,0(sp)
  8016a4:	dec00204 	addi	sp,sp,8
  8016a8:	f800283a 	ret

008016ac <queue_init>:

/***************************************************/

void queue_init(QUEUE *q)
{
  8016ac:	defffd04 	addi	sp,sp,-12
  8016b0:	dfc00215 	stw	ra,8(sp)
  8016b4:	df000115 	stw	fp,4(sp)
  8016b8:	df000104 	addi	fp,sp,4
  8016bc:	e13fff15 	stw	r4,-4(fp)
    memset(q,0,sizeof(QUEUE));
  8016c0:	01800d04 	movi	r6,52
  8016c4:	000b883a 	mov	r5,zero
  8016c8:	e13fff17 	ldw	r4,-4(fp)
  8016cc:	08022e40 	call	8022e4 <memset>
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
  8016d0:	e0bfff17 	ldw	r2,-4(fp)
  8016d4:	10000a15 	stw	zero,40(r2)
    q->windex = 0;
  8016d8:	e0bfff17 	ldw	r2,-4(fp)
  8016dc:	10000b15 	stw	zero,44(r2)
    q->numitems = 0;
  8016e0:	e0bfff17 	ldw	r2,-4(fp)
  8016e4:	10000c15 	stw	zero,48(r2)
}
  8016e8:	0001883a 	nop
  8016ec:	e037883a 	mov	sp,fp
  8016f0:	dfc00117 	ldw	ra,4(sp)
  8016f4:	df000017 	ldw	fp,0(sp)
  8016f8:	dec00204 	addi	sp,sp,8
  8016fc:	f800283a 	ret

00801700 <queue_enqueue>:

int queue_enqueue(QUEUE *q,int item)
{
  801700:	defff904 	addi	sp,sp,-28
  801704:	dfc00615 	stw	ra,24(sp)
  801708:	df000515 	stw	fp,20(sp)
  80170c:	df000504 	addi	fp,sp,20
  801710:	e13ffe15 	stw	r4,-8(fp)
  801714:	e17fff15 	stw	r5,-4(fp)
    int num_items = q->numitems;
  801718:	e0bffe17 	ldw	r2,-8(fp)
  80171c:	10800c17 	ldw	r2,48(r2)
  801720:	e0bffc15 	stw	r2,-16(fp)
    int* temp_array;
    //int temp_array[QUEUESIZE];
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
  801724:	e0bffc17 	ldw	r2,-16(fp)
  801728:	10800288 	cmpgei	r2,r2,10
  80172c:	1000451e 	bne	r2,zero,801844 <queue_enqueue+0x144>
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
  801730:	e0bffc17 	ldw	r2,-16(fp)
  801734:	01400104 	movi	r5,4
  801738:	1009883a 	mov	r4,r2
  80173c:	080227c0 	call	80227c <calloc>
  801740:	e0bffd15 	stw	r2,-12(fp)
        for(i = 0; i < num_items; i++)
  801744:	e03ffb15 	stw	zero,-20(fp)
  801748:	00001006 	br	80178c <queue_enqueue+0x8c>
            temp_array[i]= q->items[i];       //Copy the queue to temp array
  80174c:	e0bffb17 	ldw	r2,-20(fp)
  801750:	1085883a 	add	r2,r2,r2
  801754:	1085883a 	add	r2,r2,r2
  801758:	1007883a 	mov	r3,r2
  80175c:	e0bffd17 	ldw	r2,-12(fp)
  801760:	10c7883a 	add	r3,r2,r3
  801764:	e13ffe17 	ldw	r4,-8(fp)
  801768:	e0bffb17 	ldw	r2,-20(fp)
  80176c:	1085883a 	add	r2,r2,r2
  801770:	1085883a 	add	r2,r2,r2
  801774:	2085883a 	add	r2,r4,r2
  801778:	10800017 	ldw	r2,0(r2)
  80177c:	18800015 	stw	r2,0(r3)
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
  801780:	e0bffb17 	ldw	r2,-20(fp)
  801784:	10800044 	addi	r2,r2,1
  801788:	e0bffb15 	stw	r2,-20(fp)
  80178c:	e0fffb17 	ldw	r3,-20(fp)
  801790:	e0bffc17 	ldw	r2,-16(fp)
  801794:	18bfed16 	blt	r3,r2,80174c <__alt_data_end+0xff80174c>
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0
  801798:	e0bffe17 	ldw	r2,-8(fp)
  80179c:	e0ffff17 	ldw	r3,-4(fp)
  8017a0:	10c00015 	stw	r3,0(r2)

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  8017a4:	00800044 	movi	r2,1
  8017a8:	e0bffb15 	stw	r2,-20(fp)
  8017ac:	00001306 	br	8017fc <queue_enqueue+0xfc>
            q->items[i] = temp_array[i-1];
  8017b0:	e0fffb17 	ldw	r3,-20(fp)
  8017b4:	00900034 	movhi	r2,16384
  8017b8:	10bfffc4 	addi	r2,r2,-1
  8017bc:	1885883a 	add	r2,r3,r2
  8017c0:	1085883a 	add	r2,r2,r2
  8017c4:	1085883a 	add	r2,r2,r2
  8017c8:	1007883a 	mov	r3,r2
  8017cc:	e0bffd17 	ldw	r2,-12(fp)
  8017d0:	10c5883a 	add	r2,r2,r3
  8017d4:	10c00017 	ldw	r3,0(r2)
  8017d8:	e13ffe17 	ldw	r4,-8(fp)
  8017dc:	e0bffb17 	ldw	r2,-20(fp)
  8017e0:	1085883a 	add	r2,r2,r2
  8017e4:	1085883a 	add	r2,r2,r2
  8017e8:	2085883a 	add	r2,r4,r2
  8017ec:	10c00015 	stw	r3,0(r2)
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  8017f0:	e0bffb17 	ldw	r2,-20(fp)
  8017f4:	10800044 	addi	r2,r2,1
  8017f8:	e0bffb15 	stw	r2,-20(fp)
  8017fc:	e0bffc17 	ldw	r2,-16(fp)
  801800:	10800044 	addi	r2,r2,1
  801804:	e0fffb17 	ldw	r3,-20(fp)
  801808:	18bfe916 	blt	r3,r2,8017b0 <__alt_data_end+0xff8017b0>
            q->items[i] = temp_array[i-1];
        free(temp_array);                             //Dispose the temp array
  80180c:	e13ffd17 	ldw	r4,-12(fp)
  801810:	08022a80 	call	8022a8 <free>
        q->numitems++;                          //increment the number of items
  801814:	e0bffe17 	ldw	r2,-8(fp)
  801818:	10800c17 	ldw	r2,48(r2)
  80181c:	10c00044 	addi	r3,r2,1
  801820:	e0bffe17 	ldw	r2,-8(fp)
  801824:	10c00c15 	stw	r3,48(r2)
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
  801828:	e0bffe17 	ldw	r2,-8(fp)
  80182c:	10800a17 	ldw	r2,40(r2)
  801830:	10c00044 	addi	r3,r2,1
  801834:	e0bffe17 	ldw	r2,-8(fp)
  801838:	10c00a15 	stw	r3,40(r2)
        return 1;                               //The enqueue succeeded
  80183c:	00800044 	movi	r2,1
  801840:	00000106 	br	801848 <queue_enqueue+0x148>
    }
    else return 0;          //The queue is filled, cannot insert more
  801844:	0005883a 	mov	r2,zero

}
  801848:	e037883a 	mov	sp,fp
  80184c:	dfc00117 	ldw	ra,4(sp)
  801850:	df000017 	ldw	fp,0(sp)
  801854:	dec00204 	addi	sp,sp,8
  801858:	f800283a 	ret

0080185c <queue_dequeue>:


}
*/
int queue_dequeue(QUEUE *q)
{
  80185c:	defffd04 	addi	sp,sp,-12
  801860:	df000215 	stw	fp,8(sp)
  801864:	df000204 	addi	fp,sp,8
  801868:	e13fff15 	stw	r4,-4(fp)
    int num_items = q->numitems;
  80186c:	e0bfff17 	ldw	r2,-4(fp)
  801870:	10800c17 	ldw	r2,48(r2)
  801874:	e0bffe15 	stw	r2,-8(fp)

    if (! num_items == 0)// The queue contains items
  801878:	e0bffe17 	ldw	r2,-8(fp)
  80187c:	10000c26 	beq	r2,zero,8018b0 <queue_dequeue+0x54>
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
  801880:	e0bfff17 	ldw	r2,-4(fp)
  801884:	10800a17 	ldw	r2,40(r2)
  801888:	10ffffc4 	addi	r3,r2,-1
  80188c:	e0bfff17 	ldw	r2,-4(fp)
  801890:	10c00a15 	stw	r3,40(r2)
         q->numitems--;                 //Decrement the number of items in the queue
  801894:	e0bfff17 	ldw	r2,-4(fp)
  801898:	10800c17 	ldw	r2,48(r2)
  80189c:	10ffffc4 	addi	r3,r2,-1
  8018a0:	e0bfff17 	ldw	r2,-4(fp)
  8018a4:	10c00c15 	stw	r3,48(r2)
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
  8018a8:	00800044 	movi	r2,1
  8018ac:	00000106 	br	8018b4 <queue_dequeue+0x58>
    }
    else return 0;          //The queue is empty, nothing can be dequeued
  8018b0:	0005883a 	mov	r2,zero


}
  8018b4:	e037883a 	mov	sp,fp
  8018b8:	df000017 	ldw	fp,0(sp)
  8018bc:	dec00104 	addi	sp,sp,4
  8018c0:	f800283a 	ret

008018c4 <queue_print>:


void queue_print(QUEUE *q)
{
  8018c4:	defffc04 	addi	sp,sp,-16
  8018c8:	dfc00315 	stw	ra,12(sp)
  8018cc:	df000215 	stw	fp,8(sp)
  8018d0:	df000204 	addi	fp,sp,8
  8018d4:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
  8018d8:	e03ffe15 	stw	zero,-8(fp)
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  8018dc:	e0bfff17 	ldw	r2,-4(fp)
  8018e0:	10800c17 	ldw	r2,48(r2)
  8018e4:	10bfffc4 	addi	r2,r2,-1
  8018e8:	e0bffe15 	stw	r2,-8(fp)
  8018ec:	00000d06 	br	801924 <queue_print+0x60>
        alt_printf("%d", q->items[i] );
  8018f0:	e0ffff17 	ldw	r3,-4(fp)
  8018f4:	e0bffe17 	ldw	r2,-8(fp)
  8018f8:	1085883a 	add	r2,r2,r2
  8018fc:	1085883a 	add	r2,r2,r2
  801900:	1885883a 	add	r2,r3,r2
  801904:	10800017 	ldw	r2,0(r2)
  801908:	100b883a 	mov	r5,r2
  80190c:	01002034 	movhi	r4,128
  801910:	210ddb04 	addi	r4,r4,14188
  801914:	08028e80 	call	8028e8 <alt_printf>


void queue_print(QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801918:	e0bffe17 	ldw	r2,-8(fp)
  80191c:	10bfffc4 	addi	r2,r2,-1
  801920:	e0bffe15 	stw	r2,-8(fp)
  801924:	e0bffe17 	ldw	r2,-8(fp)
  801928:	103ff10e 	bge	r2,zero,8018f0 <__alt_data_end+0xff8018f0>
        alt_printf("%d", q->items[i] );
    }
    alt_printf("\n");
  80192c:	01002034 	movhi	r4,128
  801930:	210ddc04 	addi	r4,r4,14192
  801934:	08028e80 	call	8028e8 <alt_printf>
}
  801938:	0001883a 	nop
  80193c:	e037883a 	mov	sp,fp
  801940:	dfc00117 	ldw	ra,4(sp)
  801944:	df000017 	ldw	fp,0(sp)
  801948:	dec00204 	addi	sp,sp,8
  80194c:	f800283a 	ret

00801950 <queue_print_screen>:
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb, SENSOR_OBJECT *sensor_obj){
  801950:	defff104 	addi	sp,sp,-60
  801954:	dfc00e15 	stw	ra,56(sp)
  801958:	df000d15 	stw	fp,52(sp)
  80195c:	df000d04 	addi	fp,sp,52
  801960:	e13ffc15 	stw	r4,-16(fp)
  801964:	e17ffd15 	stw	r5,-12(fp)
  801968:	e1bffe15 	stw	r6,-8(fp)
  80196c:	e1ffff15 	stw	r7,-4(fp)
	 int i = 0;
  801970:	e03ff415 	stw	zero,-48(fp)
	 int j;
	 int mean = 0;
  801974:	e03ff515 	stw	zero,-44(fp)
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801978:	e0bffc17 	ldw	r2,-16(fp)
  80197c:	10800c17 	ldw	r2,48(r2)
  801980:	10bfffc4 	addi	r2,r2,-1
  801984:	e0bff415 	stw	r2,-48(fp)
  801988:	0000db06 	br	801cf8 <queue_print_screen+0x3a8>
#ifdef DEBUG
	        alt_printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
#endif
	        j = q->numitems-1 -i;
  80198c:	e0bffc17 	ldw	r2,-16(fp)
  801990:	10800c17 	ldw	r2,48(r2)
  801994:	10ffffc4 	addi	r3,r2,-1
  801998:	e0bff417 	ldw	r2,-48(fp)
  80199c:	1885c83a 	sub	r2,r3,r2
  8019a0:	e0bff815 	stw	r2,-32(fp)
	        mean = mean + q->items[i];
  8019a4:	e0fffc17 	ldw	r3,-16(fp)
  8019a8:	e0bff417 	ldw	r2,-48(fp)
  8019ac:	1085883a 	add	r2,r2,r2
  8019b0:	1085883a 	add	r2,r2,r2
  8019b4:	1885883a 	add	r2,r3,r2
  8019b8:	10800017 	ldw	r2,0(r2)
  8019bc:	e0fff517 	ldw	r3,-44(fp)
  8019c0:	1885883a 	add	r2,r3,r2
  8019c4:	e0bff515 	stw	r2,-44(fp)
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
  8019c8:	00800044 	movi	r2,1
  8019cc:	e0bff715 	stw	r2,-36(fp)
  8019d0:	00000d06 	br	801a08 <queue_print_screen+0xb8>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
  8019d4:	e0fffd17 	ldw	r3,-12(fp)
  8019d8:	e0bff817 	ldw	r2,-32(fp)
  8019dc:	1885883a 	add	r2,r3,r2
  8019e0:	1009883a 	mov	r4,r2
  8019e4:	e0fffe17 	ldw	r3,-8(fp)
  8019e8:	e0bff717 	ldw	r2,-36(fp)
  8019ec:	1885c83a 	sub	r2,r3,r2
  8019f0:	000d883a 	mov	r6,zero
  8019f4:	100b883a 	mov	r5,r2
  8019f8:	0800df40 	call	800df4 <print_pix>
	        mean = mean + q->items[i];
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
  8019fc:	e0bff717 	ldw	r2,-36(fp)
  801a00:	10800044 	addi	r2,r2,1
  801a04:	e0bff715 	stw	r2,-36(fp)
  801a08:	e0bff717 	ldw	r2,-36(fp)
  801a0c:	10800dd0 	cmplti	r2,r2,55
  801a10:	103ff01e 	bne	r2,zero,8019d4 <__alt_data_end+0xff8019d4>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
  801a14:	e0fffd17 	ldw	r3,-12(fp)
  801a18:	e0bff817 	ldw	r2,-32(fp)
  801a1c:	1885883a 	add	r2,r3,r2
  801a20:	1007883a 	mov	r3,r2
  801a24:	e0bffe17 	ldw	r2,-8(fp)
  801a28:	018001c4 	movi	r6,7
  801a2c:	100b883a 	mov	r5,r2
  801a30:	1809883a 	mov	r4,r3
  801a34:	0800df40 	call	800df4 <print_pix>
	        sensor_obj->draw_graph(sensor_obj);
  801a38:	e0800417 	ldw	r2,16(fp)
  801a3c:	10802d17 	ldw	r2,180(r2)
  801a40:	e1000417 	ldw	r4,16(fp)
  801a44:	103ee83a 	callr	r2
	        value = offset + q->items[i]/normalization;
  801a48:	e0fffc17 	ldw	r3,-16(fp)
  801a4c:	e0bff417 	ldw	r2,-48(fp)
  801a50:	1085883a 	add	r2,r2,r2
  801a54:	1085883a 	add	r2,r2,r2
  801a58:	1885883a 	add	r2,r3,r2
  801a5c:	10800017 	ldw	r2,0(r2)
  801a60:	e17fff17 	ldw	r5,-4(fp)
  801a64:	1009883a 	mov	r4,r2
  801a68:	08020a00 	call	8020a0 <__divsi3>
  801a6c:	1007883a 	mov	r3,r2
  801a70:	e0800217 	ldw	r2,8(fp)
  801a74:	1885883a 	add	r2,r3,r2
  801a78:	e0bff615 	stw	r2,-40(fp)
	        if(offset + q->items[i]/normalization > 40)
  801a7c:	e0fffc17 	ldw	r3,-16(fp)
  801a80:	e0bff417 	ldw	r2,-48(fp)
  801a84:	1085883a 	add	r2,r2,r2
  801a88:	1085883a 	add	r2,r2,r2
  801a8c:	1885883a 	add	r2,r3,r2
  801a90:	10800017 	ldw	r2,0(r2)
  801a94:	e17fff17 	ldw	r5,-4(fp)
  801a98:	1009883a 	mov	r4,r2
  801a9c:	08020a00 	call	8020a0 <__divsi3>
  801aa0:	1007883a 	mov	r3,r2
  801aa4:	e0800217 	ldw	r2,8(fp)
  801aa8:	1885883a 	add	r2,r3,r2
  801aac:	10800a50 	cmplti	r2,r2,41
  801ab0:	1000021e 	bne	r2,zero,801abc <queue_print_screen+0x16c>
	        	value = 40;
  801ab4:	00800a04 	movi	r2,40
  801ab8:	e0bff615 	stw	r2,-40(fp)
	        if (offset + q->items[i]/normalization < 0)
  801abc:	e0fffc17 	ldw	r3,-16(fp)
  801ac0:	e0bff417 	ldw	r2,-48(fp)
  801ac4:	1085883a 	add	r2,r2,r2
  801ac8:	1085883a 	add	r2,r2,r2
  801acc:	1885883a 	add	r2,r3,r2
  801ad0:	10800017 	ldw	r2,0(r2)
  801ad4:	e17fff17 	ldw	r5,-4(fp)
  801ad8:	1009883a 	mov	r4,r2
  801adc:	08020a00 	call	8020a0 <__divsi3>
  801ae0:	1007883a 	mov	r3,r2
  801ae4:	e0800217 	ldw	r2,8(fp)
  801ae8:	1885883a 	add	r2,r3,r2
  801aec:	1000010e 	bge	r2,zero,801af4 <queue_print_screen+0x1a4>
	          value = 0;
  801af0:	e03ff615 	stw	zero,-40(fp)

	        print_pix(x_origo + j,y_origo-value,rgb);
  801af4:	e0fffd17 	ldw	r3,-12(fp)
  801af8:	e0bff817 	ldw	r2,-32(fp)
  801afc:	1885883a 	add	r2,r3,r2
  801b00:	1009883a 	mov	r4,r2
  801b04:	e0fffe17 	ldw	r3,-8(fp)
  801b08:	e0bff617 	ldw	r2,-40(fp)
  801b0c:	1885c83a 	sub	r2,r3,r2
  801b10:	1007883a 	mov	r3,r2
  801b14:	e0800317 	ldw	r2,12(fp)
  801b18:	100d883a 	mov	r6,r2
  801b1c:	180b883a 	mov	r5,r3
  801b20:	0800df40 	call	800df4 <print_pix>
	        int  bcd = i2bcd(abs(q->items[0]));
  801b24:	e0bffc17 	ldw	r2,-16(fp)
  801b28:	10800017 	ldw	r2,0(r2)
  801b2c:	1000010e 	bge	r2,zero,801b34 <queue_print_screen+0x1e4>
  801b30:	0085c83a 	sub	r2,zero,r2
  801b34:	1009883a 	mov	r4,r2
  801b38:	0801d580 	call	801d58 <i2bcd>
  801b3c:	e0bff915 	stw	r2,-28(fp)
	        if(q->items[0] & 0x80000000)//negative
  801b40:	e0bffc17 	ldw	r2,-16(fp)
  801b44:	10800017 	ldw	r2,0(r2)
  801b48:	10000d0e 	bge	r2,zero,801b80 <queue_print_screen+0x230>
	        	print_char(x_origo +24, y_origo+30,4,0,'-');
  801b4c:	e0bffd17 	ldw	r2,-12(fp)
  801b50:	10800604 	addi	r2,r2,24
  801b54:	1007883a 	mov	r3,r2
  801b58:	e0bffe17 	ldw	r2,-8(fp)
  801b5c:	10800784 	addi	r2,r2,30
  801b60:	1009883a 	mov	r4,r2
  801b64:	00800b44 	movi	r2,45
  801b68:	d8800015 	stw	r2,0(sp)
  801b6c:	000f883a 	mov	r7,zero
  801b70:	01800104 	movi	r6,4
  801b74:	200b883a 	mov	r5,r4
  801b78:	1809883a 	mov	r4,r3
  801b7c:	08010400 	call	801040 <print_char>

	        	char c = (char)((bcd & 0xF000) >>12);
  801b80:	e0bff917 	ldw	r2,-28(fp)
  801b84:	10bc000c 	andi	r2,r2,61440
  801b88:	1005d33a 	srai	r2,r2,12
  801b8c:	e0bffa05 	stb	r2,-24(fp)
	        	short s = (short) c +48;
  801b90:	e0bffa07 	ldb	r2,-24(fp)
  801b94:	10800c04 	addi	r2,r2,48
  801b98:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +30, y_origo+30,4,0,(char)s);
  801b9c:	e0bffd17 	ldw	r2,-12(fp)
  801ba0:	10800784 	addi	r2,r2,30
  801ba4:	1007883a 	mov	r3,r2
  801ba8:	e0bffe17 	ldw	r2,-8(fp)
  801bac:	10800784 	addi	r2,r2,30
  801bb0:	1009883a 	mov	r4,r2
  801bb4:	e0bffa8b 	ldhu	r2,-22(fp)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	d8800015 	stw	r2,0(sp)
  801bc8:	000f883a 	mov	r7,zero
  801bcc:	01800104 	movi	r6,4
  801bd0:	200b883a 	mov	r5,r4
  801bd4:	1809883a 	mov	r4,r3
  801bd8:	08010400 	call	801040 <print_char>

	        	c = (char)((bcd & 0x0F00) >>8);
  801bdc:	e0bff917 	ldw	r2,-28(fp)
  801be0:	1083c00c 	andi	r2,r2,3840
  801be4:	1005d23a 	srai	r2,r2,8
  801be8:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801bec:	e0bffa07 	ldb	r2,-24(fp)
  801bf0:	10800c04 	addi	r2,r2,48
  801bf4:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +38, y_origo+30,4,0,(char)s);
  801bf8:	e0bffd17 	ldw	r2,-12(fp)
  801bfc:	10800984 	addi	r2,r2,38
  801c00:	1007883a 	mov	r3,r2
  801c04:	e0bffe17 	ldw	r2,-8(fp)
  801c08:	10800784 	addi	r2,r2,30
  801c0c:	1009883a 	mov	r4,r2
  801c10:	e0bffa8b 	ldhu	r2,-22(fp)
  801c14:	10803fcc 	andi	r2,r2,255
  801c18:	1080201c 	xori	r2,r2,128
  801c1c:	10bfe004 	addi	r2,r2,-128
  801c20:	d8800015 	stw	r2,0(sp)
  801c24:	000f883a 	mov	r7,zero
  801c28:	01800104 	movi	r6,4
  801c2c:	200b883a 	mov	r5,r4
  801c30:	1809883a 	mov	r4,r3
  801c34:	08010400 	call	801040 <print_char>

	        	c = (char)((bcd & 0x0F0) >>4);
  801c38:	e0bff917 	ldw	r2,-28(fp)
  801c3c:	10803c0c 	andi	r2,r2,240
  801c40:	1005d13a 	srai	r2,r2,4
  801c44:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801c48:	e0bffa07 	ldb	r2,-24(fp)
  801c4c:	10800c04 	addi	r2,r2,48
  801c50:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +46, y_origo+30,4,0,(char)s);
  801c54:	e0bffd17 	ldw	r2,-12(fp)
  801c58:	10800b84 	addi	r2,r2,46
  801c5c:	1007883a 	mov	r3,r2
  801c60:	e0bffe17 	ldw	r2,-8(fp)
  801c64:	10800784 	addi	r2,r2,30
  801c68:	1009883a 	mov	r4,r2
  801c6c:	e0bffa8b 	ldhu	r2,-22(fp)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	1080201c 	xori	r2,r2,128
  801c78:	10bfe004 	addi	r2,r2,-128
  801c7c:	d8800015 	stw	r2,0(sp)
  801c80:	000f883a 	mov	r7,zero
  801c84:	01800104 	movi	r6,4
  801c88:	200b883a 	mov	r5,r4
  801c8c:	1809883a 	mov	r4,r3
  801c90:	08010400 	call	801040 <print_char>

	        	c = (char)(bcd & 0x0F);
  801c94:	e0bff917 	ldw	r2,-28(fp)
  801c98:	108003cc 	andi	r2,r2,15
  801c9c:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801ca0:	e0bffa07 	ldb	r2,-24(fp)
  801ca4:	10800c04 	addi	r2,r2,48
  801ca8:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);
  801cac:	e0bffd17 	ldw	r2,-12(fp)
  801cb0:	10800d84 	addi	r2,r2,54
  801cb4:	1007883a 	mov	r3,r2
  801cb8:	e0bffe17 	ldw	r2,-8(fp)
  801cbc:	10800784 	addi	r2,r2,30
  801cc0:	1009883a 	mov	r4,r2
  801cc4:	e0bffa8b 	ldhu	r2,-22(fp)
  801cc8:	10803fcc 	andi	r2,r2,255
  801ccc:	1080201c 	xori	r2,r2,128
  801cd0:	10bfe004 	addi	r2,r2,-128
  801cd4:	d8800015 	stw	r2,0(sp)
  801cd8:	000f883a 	mov	r7,zero
  801cdc:	01800104 	movi	r6,4
  801ce0:	200b883a 	mov	r5,r4
  801ce4:	1809883a 	mov	r4,r3
  801ce8:	08010400 	call	801040 <print_char>
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb, SENSOR_OBJECT *sensor_obj){
	 int i = 0;
	 int j;
	 int mean = 0;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801cec:	e0bff417 	ldw	r2,-48(fp)
  801cf0:	10bfffc4 	addi	r2,r2,-1
  801cf4:	e0bff415 	stw	r2,-48(fp)
  801cf8:	e0bff417 	ldw	r2,-48(fp)
  801cfc:	103f230e 	bge	r2,zero,80198c <__alt_data_end+0xff80198c>
	        	s = (short) c +48;
	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);


	    }
	    mean = mean/q->numitems;
  801d00:	e0bffc17 	ldw	r2,-16(fp)
  801d04:	10800c17 	ldw	r2,48(r2)
  801d08:	100b883a 	mov	r5,r2
  801d0c:	e13ff517 	ldw	r4,-44(fp)
  801d10:	08020a00 	call	8020a0 <__divsi3>
  801d14:	e0bff515 	stw	r2,-44(fp)
	    int offs = 25 - mean/normalization;
  801d18:	e17fff17 	ldw	r5,-4(fp)
  801d1c:	e13ff517 	ldw	r4,-44(fp)
  801d20:	08020a00 	call	8020a0 <__divsi3>
  801d24:	1007883a 	mov	r3,r2
  801d28:	00800644 	movi	r2,25
  801d2c:	10c5c83a 	sub	r2,r2,r3
  801d30:	e0bffb15 	stw	r2,-20(fp)
	    sensor_obj->offset = offs;
  801d34:	e0fffb17 	ldw	r3,-20(fp)
  801d38:	e0800417 	ldw	r2,16(fp)
  801d3c:	10c01815 	stw	r3,96(r2)
}
  801d40:	0001883a 	nop
  801d44:	e037883a 	mov	sp,fp
  801d48:	dfc00117 	ldw	ra,4(sp)
  801d4c:	df000017 	ldw	fp,0(sp)
  801d50:	dec00204 	addi	sp,sp,8
  801d54:	f800283a 	ret

00801d58 <i2bcd>:

unsigned int i2bcd(unsigned int i) {
  801d58:	defffa04 	addi	sp,sp,-24
  801d5c:	dfc00515 	stw	ra,20(sp)
  801d60:	df000415 	stw	fp,16(sp)
  801d64:	df000404 	addi	fp,sp,16
  801d68:	e13fff15 	stw	r4,-4(fp)
    unsigned int binaryShift = 1;
  801d6c:	00800044 	movi	r2,1
  801d70:	e0bffc15 	stw	r2,-16(fp)
    unsigned int digit,n,mask;
    unsigned int bcd = 0;
  801d74:	e03ffd15 	stw	zero,-12(fp)
    alt_printf("%d\n",i);
  801d78:	e17fff17 	ldw	r5,-4(fp)
  801d7c:	01002034 	movhi	r4,128
  801d80:	210ddd04 	addi	r4,r4,14196
  801d84:	08028e80 	call	8028e8 <alt_printf>
    while (i > 0) {
  801d88:	00001306 	br	801dd8 <i2bcd+0x80>
        digit = i % 10;
  801d8c:	e0bfff17 	ldw	r2,-4(fp)
  801d90:	01400284 	movi	r5,10
  801d94:	1009883a 	mov	r4,r2
  801d98:	08021fc0 	call	8021fc <__umodsi3>
  801d9c:	e0bffe15 	stw	r2,-8(fp)
        bcd += (digit << binaryShift);
  801da0:	e0fffe17 	ldw	r3,-8(fp)
  801da4:	e0bffc17 	ldw	r2,-16(fp)
  801da8:	1884983a 	sll	r2,r3,r2
  801dac:	e0fffd17 	ldw	r3,-12(fp)
  801db0:	1885883a 	add	r2,r3,r2
  801db4:	e0bffd15 	stw	r2,-12(fp)
        binaryShift += 4;
  801db8:	e0bffc17 	ldw	r2,-16(fp)
  801dbc:	10800104 	addi	r2,r2,4
  801dc0:	e0bffc15 	stw	r2,-16(fp)
        i /= 10;
  801dc4:	e0bfff17 	ldw	r2,-4(fp)
  801dc8:	01400284 	movi	r5,10
  801dcc:	1009883a 	mov	r4,r2
  801dd0:	08021980 	call	802198 <__udivsi3>
  801dd4:	e0bfff15 	stw	r2,-4(fp)
unsigned int i2bcd(unsigned int i) {
    unsigned int binaryShift = 1;
    unsigned int digit,n,mask;
    unsigned int bcd = 0;
    alt_printf("%d\n",i);
    while (i > 0) {
  801dd8:	e0bfff17 	ldw	r2,-4(fp)
  801ddc:	103feb1e 	bne	r2,zero,801d8c <__alt_data_end+0xff801d8c>
        digit = i % 10;
        bcd += (digit << binaryShift);
        binaryShift += 4;
        i /= 10;
    }
    bcd = bcd >> 1;
  801de0:	e0bffd17 	ldw	r2,-12(fp)
  801de4:	1004d07a 	srli	r2,r2,1
  801de8:	e0bffd15 	stw	r2,-12(fp)
                putchar(' ');
            putchar((bcd & mask)? '1':'0');
            n++;
        }
#endif
    putchar('\n');
  801dec:	00802034 	movhi	r2,128
  801df0:	108fae04 	addi	r2,r2,16056
  801df4:	10800017 	ldw	r2,0(r2)
  801df8:	10800217 	ldw	r2,8(r2)
  801dfc:	100b883a 	mov	r5,r2
  801e00:	01000284 	movi	r4,10
  801e04:	08025a00 	call	8025a0 <putc>
    return bcd;
  801e08:	e0bffd17 	ldw	r2,-12(fp)
}
  801e0c:	e037883a 	mov	sp,fp
  801e10:	dfc00117 	ldw	ra,4(sp)
  801e14:	df000017 	ldw	fp,0(sp)
  801e18:	dec00204 	addi	sp,sp,8
  801e1c:	f800283a 	ret

00801e20 <update_time>:

void update_time(unsigned int i){
  801e20:	defff704 	addi	sp,sp,-36
  801e24:	dfc00815 	stw	ra,32(sp)
  801e28:	df000715 	stw	fp,28(sp)
  801e2c:	df000704 	addi	fp,sp,28
  801e30:	e13fff15 	stw	r4,-4(fp)

	static int hours = 0;
	static int minutes = 0;
	static int seconds = 0;
	unsigned int bcd = 0;
  801e34:	e03ffa15 	stw	zero,-24(fp)
	unsigned int time[3]={hours, minutes,seconds};
  801e38:	d0a1da17 	ldw	r2,-30872(gp)
  801e3c:	e0bffc15 	stw	r2,-16(fp)
  801e40:	d0a1db17 	ldw	r2,-30868(gp)
  801e44:	e0bffd15 	stw	r2,-12(fp)
  801e48:	d0a1dc17 	ldw	r2,-30864(gp)
  801e4c:	e0bffe15 	stw	r2,-8(fp)

	seconds++;
  801e50:	d0a1dc17 	ldw	r2,-30864(gp)
  801e54:	10800044 	addi	r2,r2,1
  801e58:	d0a1dc15 	stw	r2,-30864(gp)
	if(seconds == 60){
  801e5c:	d0a1dc17 	ldw	r2,-30864(gp)
  801e60:	10800f18 	cmpnei	r2,r2,60
  801e64:	10000b1e 	bne	r2,zero,801e94 <update_time+0x74>
		seconds = 0;
  801e68:	d021dc15 	stw	zero,-30864(gp)
		minutes++;
  801e6c:	d0a1db17 	ldw	r2,-30868(gp)
  801e70:	10800044 	addi	r2,r2,1
  801e74:	d0a1db15 	stw	r2,-30868(gp)
		if (minutes == 60){
  801e78:	d0a1db17 	ldw	r2,-30868(gp)
  801e7c:	10800f18 	cmpnei	r2,r2,60
  801e80:	1000041e 	bne	r2,zero,801e94 <update_time+0x74>
			minutes = 0;
  801e84:	d021db15 	stw	zero,-30868(gp)
			hours++;
  801e88:	d0a1da17 	ldw	r2,-30872(gp)
  801e8c:	10800044 	addi	r2,r2,1
  801e90:	d0a1da15 	stw	r2,-30872(gp)
		}
	}

	char c;
	short s;
	bcd = i2bcd(hours);
  801e94:	d0a1da17 	ldw	r2,-30872(gp)
  801e98:	1009883a 	mov	r4,r2
  801e9c:	0801d580 	call	801d58 <i2bcd>
  801ea0:	e0bffa15 	stw	r2,-24(fp)
	c = (char)((bcd & 0x0F0) >>4);
  801ea4:	e0bffa17 	ldw	r2,-24(fp)
  801ea8:	10803c0c 	andi	r2,r2,240
  801eac:	1004d13a 	srli	r2,r2,4
  801eb0:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801eb4:	e0bffb07 	ldb	r2,-20(fp)
  801eb8:	10800c04 	addi	r2,r2,48
  801ebc:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +46, 50+30,4,0,(char)s);
  801ec0:	e0bffb8b 	ldhu	r2,-18(fp)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	d8800015 	stw	r2,0(sp)
  801ed4:	000f883a 	mov	r7,zero
  801ed8:	01800104 	movi	r6,4
  801edc:	01401404 	movi	r5,80
  801ee0:	01002104 	movi	r4,132
  801ee4:	08010400 	call	801040 <print_char>

	c = (char)(bcd & 0x0F);
  801ee8:	e0bffa17 	ldw	r2,-24(fp)
  801eec:	108003cc 	andi	r2,r2,15
  801ef0:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801ef4:	e0bffb07 	ldb	r2,-20(fp)
  801ef8:	10800c04 	addi	r2,r2,48
  801efc:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3 -50+30 +54,50+30,4,0,(char)s);
  801f00:	e0bffb8b 	ldhu	r2,-18(fp)
  801f04:	10803fcc 	andi	r2,r2,255
  801f08:	1080201c 	xori	r2,r2,128
  801f0c:	10bfe004 	addi	r2,r2,-128
  801f10:	d8800015 	stw	r2,0(sp)
  801f14:	000f883a 	mov	r7,zero
  801f18:	01800104 	movi	r6,4
  801f1c:	01401404 	movi	r5,80
  801f20:	01002304 	movi	r4,140
  801f24:	08010400 	call	801040 <print_char>

	print_char(320/3-50 +30 +54+8,50+30,4,0,':');
  801f28:	00800e84 	movi	r2,58
  801f2c:	d8800015 	stw	r2,0(sp)
  801f30:	000f883a 	mov	r7,zero
  801f34:	01800104 	movi	r6,4
  801f38:	01401404 	movi	r5,80
  801f3c:	01002504 	movi	r4,148
  801f40:	08010400 	call	801040 <print_char>

	bcd = i2bcd(minutes);
  801f44:	d0a1db17 	ldw	r2,-30868(gp)
  801f48:	1009883a 	mov	r4,r2
  801f4c:	0801d580 	call	801d58 <i2bcd>
  801f50:	e0bffa15 	stw	r2,-24(fp)
	c = (char)((bcd & 0x0F0) >>4);
  801f54:	e0bffa17 	ldw	r2,-24(fp)
  801f58:	10803c0c 	andi	r2,r2,240
  801f5c:	1004d13a 	srli	r2,r2,4
  801f60:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801f64:	e0bffb07 	ldb	r2,-20(fp)
  801f68:	10800c04 	addi	r2,r2,48
  801f6c:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +54+8+8, 50+30,4,0,(char)s);
  801f70:	e0bffb8b 	ldhu	r2,-18(fp)
  801f74:	10803fcc 	andi	r2,r2,255
  801f78:	1080201c 	xori	r2,r2,128
  801f7c:	10bfe004 	addi	r2,r2,-128
  801f80:	d8800015 	stw	r2,0(sp)
  801f84:	000f883a 	mov	r7,zero
  801f88:	01800104 	movi	r6,4
  801f8c:	01401404 	movi	r5,80
  801f90:	01002704 	movi	r4,156
  801f94:	08010400 	call	801040 <print_char>

	c = (char)(bcd & 0x0F);
  801f98:	e0bffa17 	ldw	r2,-24(fp)
  801f9c:	108003cc 	andi	r2,r2,15
  801fa0:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801fa4:	e0bffb07 	ldb	r2,-20(fp)
  801fa8:	10800c04 	addi	r2,r2,48
  801fac:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +54+8+8+8,50+30,4,0,(char)s);
  801fb0:	e0bffb8b 	ldhu	r2,-18(fp)
  801fb4:	10803fcc 	andi	r2,r2,255
  801fb8:	1080201c 	xori	r2,r2,128
  801fbc:	10bfe004 	addi	r2,r2,-128
  801fc0:	d8800015 	stw	r2,0(sp)
  801fc4:	000f883a 	mov	r7,zero
  801fc8:	01800104 	movi	r6,4
  801fcc:	01401404 	movi	r5,80
  801fd0:	01002904 	movi	r4,164
  801fd4:	08010400 	call	801040 <print_char>

	print_char(320/3-50 +30 +54+8+8+8+8,50+30,4,0,':');
  801fd8:	00800e84 	movi	r2,58
  801fdc:	d8800015 	stw	r2,0(sp)
  801fe0:	000f883a 	mov	r7,zero
  801fe4:	01800104 	movi	r6,4
  801fe8:	01401404 	movi	r5,80
  801fec:	01002b04 	movi	r4,172
  801ff0:	08010400 	call	801040 <print_char>


	bcd = i2bcd(seconds);
  801ff4:	d0a1dc17 	ldw	r2,-30864(gp)
  801ff8:	1009883a 	mov	r4,r2
  801ffc:	0801d580 	call	801d58 <i2bcd>
  802000:	e0bffa15 	stw	r2,-24(fp)
		c = (char)((bcd & 0x0F0) >>4);
  802004:	e0bffa17 	ldw	r2,-24(fp)
  802008:	10803c0c 	andi	r2,r2,240
  80200c:	1004d13a 	srli	r2,r2,4
  802010:	e0bffb05 	stb	r2,-20(fp)
		s = (short) c +48;
  802014:	e0bffb07 	ldb	r2,-20(fp)
  802018:	10800c04 	addi	r2,r2,48
  80201c:	e0bffb8d 	sth	r2,-18(fp)
		print_char(320/3-50 +30 +54+40, 50+30,4,0,(char)s);
  802020:	e0bffb8b 	ldhu	r2,-18(fp)
  802024:	10803fcc 	andi	r2,r2,255
  802028:	1080201c 	xori	r2,r2,128
  80202c:	10bfe004 	addi	r2,r2,-128
  802030:	d8800015 	stw	r2,0(sp)
  802034:	000f883a 	mov	r7,zero
  802038:	01800104 	movi	r6,4
  80203c:	01401404 	movi	r5,80
  802040:	01002d04 	movi	r4,180
  802044:	08010400 	call	801040 <print_char>

		c = (char)(bcd & 0x0F);
  802048:	e0bffa17 	ldw	r2,-24(fp)
  80204c:	108003cc 	andi	r2,r2,15
  802050:	e0bffb05 	stb	r2,-20(fp)
		s = (short) c +48;
  802054:	e0bffb07 	ldb	r2,-20(fp)
  802058:	10800c04 	addi	r2,r2,48
  80205c:	e0bffb8d 	sth	r2,-18(fp)
		print_char(320/3-50 +30 +54+48,50+30,4,0,(char)s);
  802060:	e0bffb8b 	ldhu	r2,-18(fp)
  802064:	10803fcc 	andi	r2,r2,255
  802068:	1080201c 	xori	r2,r2,128
  80206c:	10bfe004 	addi	r2,r2,-128
  802070:	d8800015 	stw	r2,0(sp)
  802074:	000f883a 	mov	r7,zero
  802078:	01800104 	movi	r6,4
  80207c:	01401404 	movi	r5,80
  802080:	01002f04 	movi	r4,188
  802084:	08010400 	call	801040 <print_char>


}
  802088:	0001883a 	nop
  80208c:	e037883a 	mov	sp,fp
  802090:	dfc00117 	ldw	ra,4(sp)
  802094:	df000017 	ldw	fp,0(sp)
  802098:	dec00204 	addi	sp,sp,8
  80209c:	f800283a 	ret

008020a0 <__divsi3>:
  8020a0:	20001b16 	blt	r4,zero,802110 <__divsi3+0x70>
  8020a4:	000f883a 	mov	r7,zero
  8020a8:	28001616 	blt	r5,zero,802104 <__divsi3+0x64>
  8020ac:	200d883a 	mov	r6,r4
  8020b0:	29001a2e 	bgeu	r5,r4,80211c <__divsi3+0x7c>
  8020b4:	00800804 	movi	r2,32
  8020b8:	00c00044 	movi	r3,1
  8020bc:	00000106 	br	8020c4 <__divsi3+0x24>
  8020c0:	10000d26 	beq	r2,zero,8020f8 <__divsi3+0x58>
  8020c4:	294b883a 	add	r5,r5,r5
  8020c8:	10bfffc4 	addi	r2,r2,-1
  8020cc:	18c7883a 	add	r3,r3,r3
  8020d0:	293ffb36 	bltu	r5,r4,8020c0 <__alt_data_end+0xff8020c0>
  8020d4:	0005883a 	mov	r2,zero
  8020d8:	18000726 	beq	r3,zero,8020f8 <__divsi3+0x58>
  8020dc:	0005883a 	mov	r2,zero
  8020e0:	31400236 	bltu	r6,r5,8020ec <__divsi3+0x4c>
  8020e4:	314dc83a 	sub	r6,r6,r5
  8020e8:	10c4b03a 	or	r2,r2,r3
  8020ec:	1806d07a 	srli	r3,r3,1
  8020f0:	280ad07a 	srli	r5,r5,1
  8020f4:	183ffa1e 	bne	r3,zero,8020e0 <__alt_data_end+0xff8020e0>
  8020f8:	38000126 	beq	r7,zero,802100 <__divsi3+0x60>
  8020fc:	0085c83a 	sub	r2,zero,r2
  802100:	f800283a 	ret
  802104:	014bc83a 	sub	r5,zero,r5
  802108:	39c0005c 	xori	r7,r7,1
  80210c:	003fe706 	br	8020ac <__alt_data_end+0xff8020ac>
  802110:	0109c83a 	sub	r4,zero,r4
  802114:	01c00044 	movi	r7,1
  802118:	003fe306 	br	8020a8 <__alt_data_end+0xff8020a8>
  80211c:	00c00044 	movi	r3,1
  802120:	003fee06 	br	8020dc <__alt_data_end+0xff8020dc>

00802124 <__modsi3>:
  802124:	20001716 	blt	r4,zero,802184 <__modsi3+0x60>
  802128:	000f883a 	mov	r7,zero
  80212c:	2005883a 	mov	r2,r4
  802130:	28001216 	blt	r5,zero,80217c <__modsi3+0x58>
  802134:	2900162e 	bgeu	r5,r4,802190 <__modsi3+0x6c>
  802138:	01800804 	movi	r6,32
  80213c:	00c00044 	movi	r3,1
  802140:	00000106 	br	802148 <__modsi3+0x24>
  802144:	30000a26 	beq	r6,zero,802170 <__modsi3+0x4c>
  802148:	294b883a 	add	r5,r5,r5
  80214c:	31bfffc4 	addi	r6,r6,-1
  802150:	18c7883a 	add	r3,r3,r3
  802154:	293ffb36 	bltu	r5,r4,802144 <__alt_data_end+0xff802144>
  802158:	18000526 	beq	r3,zero,802170 <__modsi3+0x4c>
  80215c:	1806d07a 	srli	r3,r3,1
  802160:	11400136 	bltu	r2,r5,802168 <__modsi3+0x44>
  802164:	1145c83a 	sub	r2,r2,r5
  802168:	280ad07a 	srli	r5,r5,1
  80216c:	183ffb1e 	bne	r3,zero,80215c <__alt_data_end+0xff80215c>
  802170:	38000126 	beq	r7,zero,802178 <__modsi3+0x54>
  802174:	0085c83a 	sub	r2,zero,r2
  802178:	f800283a 	ret
  80217c:	014bc83a 	sub	r5,zero,r5
  802180:	003fec06 	br	802134 <__alt_data_end+0xff802134>
  802184:	0109c83a 	sub	r4,zero,r4
  802188:	01c00044 	movi	r7,1
  80218c:	003fe706 	br	80212c <__alt_data_end+0xff80212c>
  802190:	00c00044 	movi	r3,1
  802194:	003ff106 	br	80215c <__alt_data_end+0xff80215c>

00802198 <__udivsi3>:
  802198:	200d883a 	mov	r6,r4
  80219c:	2900152e 	bgeu	r5,r4,8021f4 <__udivsi3+0x5c>
  8021a0:	28001416 	blt	r5,zero,8021f4 <__udivsi3+0x5c>
  8021a4:	00800804 	movi	r2,32
  8021a8:	00c00044 	movi	r3,1
  8021ac:	00000206 	br	8021b8 <__udivsi3+0x20>
  8021b0:	10000e26 	beq	r2,zero,8021ec <__udivsi3+0x54>
  8021b4:	28000516 	blt	r5,zero,8021cc <__udivsi3+0x34>
  8021b8:	294b883a 	add	r5,r5,r5
  8021bc:	10bfffc4 	addi	r2,r2,-1
  8021c0:	18c7883a 	add	r3,r3,r3
  8021c4:	293ffa36 	bltu	r5,r4,8021b0 <__alt_data_end+0xff8021b0>
  8021c8:	18000826 	beq	r3,zero,8021ec <__udivsi3+0x54>
  8021cc:	0005883a 	mov	r2,zero
  8021d0:	31400236 	bltu	r6,r5,8021dc <__udivsi3+0x44>
  8021d4:	314dc83a 	sub	r6,r6,r5
  8021d8:	10c4b03a 	or	r2,r2,r3
  8021dc:	1806d07a 	srli	r3,r3,1
  8021e0:	280ad07a 	srli	r5,r5,1
  8021e4:	183ffa1e 	bne	r3,zero,8021d0 <__alt_data_end+0xff8021d0>
  8021e8:	f800283a 	ret
  8021ec:	0005883a 	mov	r2,zero
  8021f0:	f800283a 	ret
  8021f4:	00c00044 	movi	r3,1
  8021f8:	003ff406 	br	8021cc <__alt_data_end+0xff8021cc>

008021fc <__umodsi3>:
  8021fc:	2005883a 	mov	r2,r4
  802200:	2900122e 	bgeu	r5,r4,80224c <__umodsi3+0x50>
  802204:	28001116 	blt	r5,zero,80224c <__umodsi3+0x50>
  802208:	01800804 	movi	r6,32
  80220c:	00c00044 	movi	r3,1
  802210:	00000206 	br	80221c <__umodsi3+0x20>
  802214:	30000c26 	beq	r6,zero,802248 <__umodsi3+0x4c>
  802218:	28000516 	blt	r5,zero,802230 <__umodsi3+0x34>
  80221c:	294b883a 	add	r5,r5,r5
  802220:	31bfffc4 	addi	r6,r6,-1
  802224:	18c7883a 	add	r3,r3,r3
  802228:	293ffa36 	bltu	r5,r4,802214 <__alt_data_end+0xff802214>
  80222c:	18000626 	beq	r3,zero,802248 <__umodsi3+0x4c>
  802230:	1806d07a 	srli	r3,r3,1
  802234:	11400136 	bltu	r2,r5,80223c <__umodsi3+0x40>
  802238:	1145c83a 	sub	r2,r2,r5
  80223c:	280ad07a 	srli	r5,r5,1
  802240:	183ffb1e 	bne	r3,zero,802230 <__alt_data_end+0xff802230>
  802244:	f800283a 	ret
  802248:	f800283a 	ret
  80224c:	00c00044 	movi	r3,1
  802250:	003ff706 	br	802230 <__alt_data_end+0xff802230>

00802254 <__mulsi3>:
  802254:	0005883a 	mov	r2,zero
  802258:	20000726 	beq	r4,zero,802278 <__mulsi3+0x24>
  80225c:	20c0004c 	andi	r3,r4,1
  802260:	2008d07a 	srli	r4,r4,1
  802264:	18000126 	beq	r3,zero,80226c <__mulsi3+0x18>
  802268:	1145883a 	add	r2,r2,r5
  80226c:	294b883a 	add	r5,r5,r5
  802270:	203ffa1e 	bne	r4,zero,80225c <__alt_data_end+0xff80225c>
  802274:	f800283a 	ret
  802278:	f800283a 	ret

0080227c <calloc>:
  80227c:	00802034 	movhi	r2,128
  802280:	108fae04 	addi	r2,r2,16056
  802284:	280d883a 	mov	r6,r5
  802288:	200b883a 	mov	r5,r4
  80228c:	11000017 	ldw	r4,0(r2)
  802290:	08023041 	jmpi	802304 <_calloc_r>

00802294 <malloc>:
  802294:	00802034 	movhi	r2,128
  802298:	108fae04 	addi	r2,r2,16056
  80229c:	200b883a 	mov	r5,r4
  8022a0:	11000017 	ldw	r4,0(r2)
  8022a4:	08024481 	jmpi	802448 <_malloc_r>

008022a8 <free>:
  8022a8:	00802034 	movhi	r2,128
  8022ac:	108fae04 	addi	r2,r2,16056
  8022b0:	200b883a 	mov	r5,r4
  8022b4:	11000017 	ldw	r4,0(r2)
  8022b8:	08023641 	jmpi	802364 <_free_r>

008022bc <memcpy>:
  8022bc:	2005883a 	mov	r2,r4
  8022c0:	2007883a 	mov	r3,r4
  8022c4:	218d883a 	add	r6,r4,r6
  8022c8:	19800526 	beq	r3,r6,8022e0 <memcpy+0x24>
  8022cc:	29000003 	ldbu	r4,0(r5)
  8022d0:	18c00044 	addi	r3,r3,1
  8022d4:	29400044 	addi	r5,r5,1
  8022d8:	193fffc5 	stb	r4,-1(r3)
  8022dc:	003ffa06 	br	8022c8 <__alt_data_end+0xff8022c8>
  8022e0:	f800283a 	ret

008022e4 <memset>:
  8022e4:	2005883a 	mov	r2,r4
  8022e8:	2007883a 	mov	r3,r4
  8022ec:	218d883a 	add	r6,r4,r6
  8022f0:	19800326 	beq	r3,r6,802300 <memset+0x1c>
  8022f4:	19400005 	stb	r5,0(r3)
  8022f8:	18c00044 	addi	r3,r3,1
  8022fc:	003ffc06 	br	8022f0 <__alt_data_end+0xff8022f0>
  802300:	f800283a 	ret

00802304 <_calloc_r>:
  802304:	defffd04 	addi	sp,sp,-12
  802308:	dc000015 	stw	r16,0(sp)
  80230c:	2021883a 	mov	r16,r4
  802310:	2809883a 	mov	r4,r5
  802314:	300b883a 	mov	r5,r6
  802318:	dfc00215 	stw	ra,8(sp)
  80231c:	dc400115 	stw	r17,4(sp)
  802320:	08022540 	call	802254 <__mulsi3>
  802324:	8009883a 	mov	r4,r16
  802328:	100b883a 	mov	r5,r2
  80232c:	1023883a 	mov	r17,r2
  802330:	08024480 	call	802448 <_malloc_r>
  802334:	1021883a 	mov	r16,r2
  802338:	10000426 	beq	r2,zero,80234c <_calloc_r+0x48>
  80233c:	880d883a 	mov	r6,r17
  802340:	000b883a 	mov	r5,zero
  802344:	1009883a 	mov	r4,r2
  802348:	08022e40 	call	8022e4 <memset>
  80234c:	8005883a 	mov	r2,r16
  802350:	dfc00217 	ldw	ra,8(sp)
  802354:	dc400117 	ldw	r17,4(sp)
  802358:	dc000017 	ldw	r16,0(sp)
  80235c:	dec00304 	addi	sp,sp,12
  802360:	f800283a 	ret

00802364 <_free_r>:
  802364:	28003726 	beq	r5,zero,802444 <_free_r+0xe0>
  802368:	28ffff17 	ldw	r3,-4(r5)
  80236c:	28bfff04 	addi	r2,r5,-4
  802370:	1800010e 	bge	r3,zero,802378 <_free_r+0x14>
  802374:	10c5883a 	add	r2,r2,r3
  802378:	01402034 	movhi	r5,128
  80237c:	29518a04 	addi	r5,r5,17960
  802380:	28c00017 	ldw	r3,0(r5)
  802384:	280d883a 	mov	r6,r5
  802388:	1800031e 	bne	r3,zero,802398 <_free_r+0x34>
  80238c:	10000115 	stw	zero,4(r2)
  802390:	28800015 	stw	r2,0(r5)
  802394:	f800283a 	ret
  802398:	10c00c2e 	bgeu	r2,r3,8023cc <_free_r+0x68>
  80239c:	11000017 	ldw	r4,0(r2)
  8023a0:	110b883a 	add	r5,r2,r4
  8023a4:	1940041e 	bne	r3,r5,8023b8 <_free_r+0x54>
  8023a8:	19400017 	ldw	r5,0(r3)
  8023ac:	18c00117 	ldw	r3,4(r3)
  8023b0:	2909883a 	add	r4,r5,r4
  8023b4:	11000015 	stw	r4,0(r2)
  8023b8:	10c00115 	stw	r3,4(r2)
  8023bc:	30800015 	stw	r2,0(r6)
  8023c0:	f800283a 	ret
  8023c4:	11400336 	bltu	r2,r5,8023d4 <_free_r+0x70>
  8023c8:	2807883a 	mov	r3,r5
  8023cc:	19400117 	ldw	r5,4(r3)
  8023d0:	283ffc1e 	bne	r5,zero,8023c4 <__alt_data_end+0xff8023c4>
  8023d4:	19c00017 	ldw	r7,0(r3)
  8023d8:	19cd883a 	add	r6,r3,r7
  8023dc:	30800a1e 	bne	r6,r2,802408 <_free_r+0xa4>
  8023e0:	10800017 	ldw	r2,0(r2)
  8023e4:	3885883a 	add	r2,r7,r2
  8023e8:	18800015 	stw	r2,0(r3)
  8023ec:	1889883a 	add	r4,r3,r2
  8023f0:	2900141e 	bne	r5,r4,802444 <_free_r+0xe0>
  8023f4:	29000017 	ldw	r4,0(r5)
  8023f8:	2085883a 	add	r2,r4,r2
  8023fc:	18800015 	stw	r2,0(r3)
  802400:	28800117 	ldw	r2,4(r5)
  802404:	00000e06 	br	802440 <_free_r+0xdc>
  802408:	1180032e 	bgeu	r2,r6,802418 <_free_r+0xb4>
  80240c:	00800304 	movi	r2,12
  802410:	20800015 	stw	r2,0(r4)
  802414:	f800283a 	ret
  802418:	11000017 	ldw	r4,0(r2)
  80241c:	110d883a 	add	r6,r2,r4
  802420:	2980061e 	bne	r5,r6,80243c <_free_r+0xd8>
  802424:	29800017 	ldw	r6,0(r5)
  802428:	3109883a 	add	r4,r6,r4
  80242c:	11000015 	stw	r4,0(r2)
  802430:	29000117 	ldw	r4,4(r5)
  802434:	11000115 	stw	r4,4(r2)
  802438:	00000106 	br	802440 <_free_r+0xdc>
  80243c:	11400115 	stw	r5,4(r2)
  802440:	18800115 	stw	r2,4(r3)
  802444:	f800283a 	ret

00802448 <_malloc_r>:
  802448:	defffb04 	addi	sp,sp,-20
  80244c:	00bfff04 	movi	r2,-4
  802450:	dc400115 	stw	r17,4(sp)
  802454:	2c4000c4 	addi	r17,r5,3
  802458:	88a2703a 	and	r17,r17,r2
  80245c:	dc800215 	stw	r18,8(sp)
  802460:	dfc00415 	stw	ra,16(sp)
  802464:	dcc00315 	stw	r19,12(sp)
  802468:	dc000015 	stw	r16,0(sp)
  80246c:	8c400204 	addi	r17,r17,8
  802470:	00800304 	movi	r2,12
  802474:	2025883a 	mov	r18,r4
  802478:	8880022e 	bgeu	r17,r2,802484 <_malloc_r+0x3c>
  80247c:	1023883a 	mov	r17,r2
  802480:	00000506 	br	802498 <_malloc_r+0x50>
  802484:	8800040e 	bge	r17,zero,802498 <_malloc_r+0x50>
  802488:	00800304 	movi	r2,12
  80248c:	90800015 	stw	r2,0(r18)
  802490:	0005883a 	mov	r2,zero
  802494:	00003b06 	br	802584 <_malloc_r+0x13c>
  802498:	897ffb36 	bltu	r17,r5,802488 <__alt_data_end+0xff802488>
  80249c:	00802034 	movhi	r2,128
  8024a0:	10918a04 	addi	r2,r2,17960
  8024a4:	10c00017 	ldw	r3,0(r2)
  8024a8:	1009883a 	mov	r4,r2
  8024ac:	1821883a 	mov	r16,r3
  8024b0:	80000926 	beq	r16,zero,8024d8 <_malloc_r+0x90>
  8024b4:	80800017 	ldw	r2,0(r16)
  8024b8:	1445c83a 	sub	r2,r2,r17
  8024bc:	10001516 	blt	r2,zero,802514 <_malloc_r+0xcc>
  8024c0:	014002c4 	movi	r5,11
  8024c4:	28800d2e 	bgeu	r5,r2,8024fc <_malloc_r+0xb4>
  8024c8:	80800015 	stw	r2,0(r16)
  8024cc:	80a1883a 	add	r16,r16,r2
  8024d0:	84400015 	stw	r17,0(r16)
  8024d4:	8000221e 	bne	r16,zero,802560 <_malloc_r+0x118>
  8024d8:	04002034 	movhi	r16,128
  8024dc:	84118904 	addi	r16,r16,17956
  8024e0:	80800017 	ldw	r2,0(r16)
  8024e4:	10000e1e 	bne	r2,zero,802520 <_malloc_r+0xd8>
  8024e8:	000b883a 	mov	r5,zero
  8024ec:	9009883a 	mov	r4,r18
  8024f0:	080264c0 	call	80264c <_sbrk_r>
  8024f4:	80800015 	stw	r2,0(r16)
  8024f8:	00000906 	br	802520 <_malloc_r+0xd8>
  8024fc:	80800117 	ldw	r2,4(r16)
  802500:	1c00021e 	bne	r3,r16,80250c <_malloc_r+0xc4>
  802504:	20800015 	stw	r2,0(r4)
  802508:	00001506 	br	802560 <_malloc_r+0x118>
  80250c:	18800115 	stw	r2,4(r3)
  802510:	00001306 	br	802560 <_malloc_r+0x118>
  802514:	8007883a 	mov	r3,r16
  802518:	84000117 	ldw	r16,4(r16)
  80251c:	003fe406 	br	8024b0 <__alt_data_end+0xff8024b0>
  802520:	880b883a 	mov	r5,r17
  802524:	9009883a 	mov	r4,r18
  802528:	080264c0 	call	80264c <_sbrk_r>
  80252c:	04ffffc4 	movi	r19,-1
  802530:	14ffd526 	beq	r2,r19,802488 <__alt_data_end+0xff802488>
  802534:	140000c4 	addi	r16,r2,3
  802538:	00ffff04 	movi	r3,-4
  80253c:	80e0703a 	and	r16,r16,r3
  802540:	1400021e 	bne	r2,r16,80254c <_malloc_r+0x104>
  802544:	84400015 	stw	r17,0(r16)
  802548:	00000506 	br	802560 <_malloc_r+0x118>
  80254c:	808bc83a 	sub	r5,r16,r2
  802550:	9009883a 	mov	r4,r18
  802554:	080264c0 	call	80264c <_sbrk_r>
  802558:	14fffa1e 	bne	r2,r19,802544 <__alt_data_end+0xff802544>
  80255c:	003fca06 	br	802488 <__alt_data_end+0xff802488>
  802560:	810002c4 	addi	r4,r16,11
  802564:	00bffe04 	movi	r2,-8
  802568:	80c00104 	addi	r3,r16,4
  80256c:	2084703a 	and	r2,r4,r2
  802570:	10c7c83a 	sub	r3,r2,r3
  802574:	18000326 	beq	r3,zero,802584 <_malloc_r+0x13c>
  802578:	80e1883a 	add	r16,r16,r3
  80257c:	00c7c83a 	sub	r3,zero,r3
  802580:	80c00015 	stw	r3,0(r16)
  802584:	dfc00417 	ldw	ra,16(sp)
  802588:	dcc00317 	ldw	r19,12(sp)
  80258c:	dc800217 	ldw	r18,8(sp)
  802590:	dc400117 	ldw	r17,4(sp)
  802594:	dc000017 	ldw	r16,0(sp)
  802598:	dec00504 	addi	sp,sp,20
  80259c:	f800283a 	ret

008025a0 <putc>:
  8025a0:	defffd04 	addi	sp,sp,-12
  8025a4:	00802034 	movhi	r2,128
  8025a8:	dc000115 	stw	r16,4(sp)
  8025ac:	dfc00215 	stw	ra,8(sp)
  8025b0:	1089ae04 	addi	r2,r2,9912
  8025b4:	28800115 	stw	r2,4(r5)
  8025b8:	00802034 	movhi	r2,128
  8025bc:	108fae04 	addi	r2,r2,16056
  8025c0:	d9000005 	stb	r4,0(sp)
  8025c4:	2021883a 	mov	r16,r4
  8025c8:	11000017 	ldw	r4,0(r2)
  8025cc:	01c00044 	movi	r7,1
  8025d0:	d80d883a 	mov	r6,sp
  8025d4:	08026b80 	call	8026b8 <__sfvwrite_small_dev>
  8025d8:	00ffffc4 	movi	r3,-1
  8025dc:	10c00126 	beq	r2,r3,8025e4 <putc+0x44>
  8025e0:	8005883a 	mov	r2,r16
  8025e4:	dfc00217 	ldw	ra,8(sp)
  8025e8:	dc000117 	ldw	r16,4(sp)
  8025ec:	dec00304 	addi	sp,sp,12
  8025f0:	f800283a 	ret

008025f4 <_putc_r>:
  8025f4:	defffd04 	addi	sp,sp,-12
  8025f8:	00802034 	movhi	r2,128
  8025fc:	dc000115 	stw	r16,4(sp)
  802600:	dfc00215 	stw	ra,8(sp)
  802604:	1089ae04 	addi	r2,r2,9912
  802608:	30800115 	stw	r2,4(r6)
  80260c:	00802034 	movhi	r2,128
  802610:	108fae04 	addi	r2,r2,16056
  802614:	11000017 	ldw	r4,0(r2)
  802618:	2821883a 	mov	r16,r5
  80261c:	01c00044 	movi	r7,1
  802620:	300b883a 	mov	r5,r6
  802624:	d80d883a 	mov	r6,sp
  802628:	dc000005 	stb	r16,0(sp)
  80262c:	08026b80 	call	8026b8 <__sfvwrite_small_dev>
  802630:	00ffffc4 	movi	r3,-1
  802634:	10c00126 	beq	r2,r3,80263c <_putc_r+0x48>
  802638:	8005883a 	mov	r2,r16
  80263c:	dfc00217 	ldw	ra,8(sp)
  802640:	dc000117 	ldw	r16,4(sp)
  802644:	dec00304 	addi	sp,sp,12
  802648:	f800283a 	ret

0080264c <_sbrk_r>:
  80264c:	defffd04 	addi	sp,sp,-12
  802650:	dc000015 	stw	r16,0(sp)
  802654:	04002034 	movhi	r16,128
  802658:	dc400115 	stw	r17,4(sp)
  80265c:	84118b04 	addi	r16,r16,17964
  802660:	2023883a 	mov	r17,r4
  802664:	2809883a 	mov	r4,r5
  802668:	dfc00215 	stw	ra,8(sp)
  80266c:	80000015 	stw	zero,0(r16)
  802670:	0802a6c0 	call	802a6c <sbrk>
  802674:	00ffffc4 	movi	r3,-1
  802678:	10c0031e 	bne	r2,r3,802688 <_sbrk_r+0x3c>
  80267c:	80c00017 	ldw	r3,0(r16)
  802680:	18000126 	beq	r3,zero,802688 <_sbrk_r+0x3c>
  802684:	88c00015 	stw	r3,0(r17)
  802688:	dfc00217 	ldw	ra,8(sp)
  80268c:	dc400117 	ldw	r17,4(sp)
  802690:	dc000017 	ldw	r16,0(sp)
  802694:	dec00304 	addi	sp,sp,12
  802698:	f800283a 	ret

0080269c <strlen>:
  80269c:	2005883a 	mov	r2,r4
  8026a0:	10c00007 	ldb	r3,0(r2)
  8026a4:	18000226 	beq	r3,zero,8026b0 <strlen+0x14>
  8026a8:	10800044 	addi	r2,r2,1
  8026ac:	003ffc06 	br	8026a0 <__alt_data_end+0xff8026a0>
  8026b0:	1105c83a 	sub	r2,r2,r4
  8026b4:	f800283a 	ret

008026b8 <__sfvwrite_small_dev>:
  8026b8:	2880000b 	ldhu	r2,0(r5)
  8026bc:	1080020c 	andi	r2,r2,8
  8026c0:	10002126 	beq	r2,zero,802748 <__sfvwrite_small_dev+0x90>
  8026c4:	2880008f 	ldh	r2,2(r5)
  8026c8:	defffa04 	addi	sp,sp,-24
  8026cc:	dc000015 	stw	r16,0(sp)
  8026d0:	dfc00515 	stw	ra,20(sp)
  8026d4:	dd000415 	stw	r20,16(sp)
  8026d8:	dcc00315 	stw	r19,12(sp)
  8026dc:	dc800215 	stw	r18,8(sp)
  8026e0:	dc400115 	stw	r17,4(sp)
  8026e4:	2821883a 	mov	r16,r5
  8026e8:	10001216 	blt	r2,zero,802734 <__sfvwrite_small_dev+0x7c>
  8026ec:	2027883a 	mov	r19,r4
  8026f0:	3025883a 	mov	r18,r6
  8026f4:	3823883a 	mov	r17,r7
  8026f8:	05010004 	movi	r20,1024
  8026fc:	04400b0e 	bge	zero,r17,80272c <__sfvwrite_small_dev+0x74>
  802700:	880f883a 	mov	r7,r17
  802704:	a440010e 	bge	r20,r17,80270c <__sfvwrite_small_dev+0x54>
  802708:	01c10004 	movi	r7,1024
  80270c:	8140008f 	ldh	r5,2(r16)
  802710:	900d883a 	mov	r6,r18
  802714:	9809883a 	mov	r4,r19
  802718:	08027700 	call	802770 <_write_r>
  80271c:	0080050e 	bge	zero,r2,802734 <__sfvwrite_small_dev+0x7c>
  802720:	88a3c83a 	sub	r17,r17,r2
  802724:	90a5883a 	add	r18,r18,r2
  802728:	003ff406 	br	8026fc <__alt_data_end+0xff8026fc>
  80272c:	0005883a 	mov	r2,zero
  802730:	00000706 	br	802750 <__sfvwrite_small_dev+0x98>
  802734:	8080000b 	ldhu	r2,0(r16)
  802738:	10801014 	ori	r2,r2,64
  80273c:	8080000d 	sth	r2,0(r16)
  802740:	00bfffc4 	movi	r2,-1
  802744:	00000206 	br	802750 <__sfvwrite_small_dev+0x98>
  802748:	00bfffc4 	movi	r2,-1
  80274c:	f800283a 	ret
  802750:	dfc00517 	ldw	ra,20(sp)
  802754:	dd000417 	ldw	r20,16(sp)
  802758:	dcc00317 	ldw	r19,12(sp)
  80275c:	dc800217 	ldw	r18,8(sp)
  802760:	dc400117 	ldw	r17,4(sp)
  802764:	dc000017 	ldw	r16,0(sp)
  802768:	dec00604 	addi	sp,sp,24
  80276c:	f800283a 	ret

00802770 <_write_r>:
  802770:	defffd04 	addi	sp,sp,-12
  802774:	dc000015 	stw	r16,0(sp)
  802778:	04002034 	movhi	r16,128
  80277c:	dc400115 	stw	r17,4(sp)
  802780:	84118b04 	addi	r16,r16,17964
  802784:	2023883a 	mov	r17,r4
  802788:	2809883a 	mov	r4,r5
  80278c:	300b883a 	mov	r5,r6
  802790:	380d883a 	mov	r6,r7
  802794:	dfc00215 	stw	ra,8(sp)
  802798:	80000015 	stw	zero,0(r16)
  80279c:	0802ad80 	call	802ad8 <write>
  8027a0:	00ffffc4 	movi	r3,-1
  8027a4:	10c0031e 	bne	r2,r3,8027b4 <_write_r+0x44>
  8027a8:	80c00017 	ldw	r3,0(r16)
  8027ac:	18000126 	beq	r3,zero,8027b4 <_write_r+0x44>
  8027b0:	88c00015 	stw	r3,0(r17)
  8027b4:	dfc00217 	ldw	ra,8(sp)
  8027b8:	dc400117 	ldw	r17,4(sp)
  8027bc:	dc000017 	ldw	r16,0(sp)
  8027c0:	dec00304 	addi	sp,sp,12
  8027c4:	f800283a 	ret

008027c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8027c8:	deffff04 	addi	sp,sp,-4
  8027cc:	01002034 	movhi	r4,128
  8027d0:	01402034 	movhi	r5,128
  8027d4:	dfc00015 	stw	ra,0(sp)
  8027d8:	210def04 	addi	r4,r4,14268
  8027dc:	294fb904 	addi	r5,r5,16100

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8027e0:	2140061e 	bne	r4,r5,8027fc <alt_load+0x34>
  8027e4:	01002034 	movhi	r4,128
  8027e8:	01402034 	movhi	r5,128
  8027ec:	21000804 	addi	r4,r4,32
  8027f0:	29400804 	addi	r5,r5,32
  8027f4:	2140121e 	bne	r4,r5,802840 <alt_load+0x78>
  8027f8:	00000b06 	br	802828 <alt_load+0x60>
  8027fc:	00c02034 	movhi	r3,128
  802800:	18cfb904 	addi	r3,r3,16100
  802804:	1907c83a 	sub	r3,r3,r4
  802808:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80280c:	10fff526 	beq	r2,r3,8027e4 <__alt_data_end+0xff8027e4>
    {
      *to++ = *from++;
  802810:	114f883a 	add	r7,r2,r5
  802814:	39c00017 	ldw	r7,0(r7)
  802818:	110d883a 	add	r6,r2,r4
  80281c:	10800104 	addi	r2,r2,4
  802820:	31c00015 	stw	r7,0(r6)
  802824:	003ff906 	br	80280c <__alt_data_end+0xff80280c>
  802828:	01002034 	movhi	r4,128
  80282c:	01402034 	movhi	r5,128
  802830:	210dbd04 	addi	r4,r4,14068
  802834:	294dbd04 	addi	r5,r5,14068

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  802838:	2140101e 	bne	r4,r5,80287c <alt_load+0xb4>
  80283c:	00000b06 	br	80286c <alt_load+0xa4>
  802840:	00c02034 	movhi	r3,128
  802844:	18c06004 	addi	r3,r3,384
  802848:	1907c83a 	sub	r3,r3,r4
  80284c:	0005883a 	mov	r2,zero
  {
    while( to != end )
  802850:	10fff526 	beq	r2,r3,802828 <__alt_data_end+0xff802828>
    {
      *to++ = *from++;
  802854:	114f883a 	add	r7,r2,r5
  802858:	39c00017 	ldw	r7,0(r7)
  80285c:	110d883a 	add	r6,r2,r4
  802860:	10800104 	addi	r2,r2,4
  802864:	31c00015 	stw	r7,0(r6)
  802868:	003ff906 	br	802850 <__alt_data_end+0xff802850>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80286c:	08030000 	call	803000 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  802870:	dfc00017 	ldw	ra,0(sp)
  802874:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  802878:	08030f81 	jmpi	8030f8 <alt_icache_flush_all>
  80287c:	00c02034 	movhi	r3,128
  802880:	18cdef04 	addi	r3,r3,14268
  802884:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  802888:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80288c:	18bff726 	beq	r3,r2,80286c <__alt_data_end+0xff80286c>
    {
      *to++ = *from++;
  802890:	114f883a 	add	r7,r2,r5
  802894:	39c00017 	ldw	r7,0(r7)
  802898:	110d883a 	add	r6,r2,r4
  80289c:	10800104 	addi	r2,r2,4
  8028a0:	31c00015 	stw	r7,0(r6)
  8028a4:	003ff906 	br	80288c <__alt_data_end+0xff80288c>

008028a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8028a8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8028ac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8028b0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8028b4:	0802bac0 	call	802bac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8028b8:	0802bcc0 	call	802bcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8028bc:	01802034 	movhi	r6,128
  8028c0:	318dde04 	addi	r6,r6,14200
  8028c4:	300b883a 	mov	r5,r6
  8028c8:	3009883a 	mov	r4,r6
  8028cc:	08032880 	call	803288 <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8028d0:	d1a1e117 	ldw	r6,-30844(gp)
  8028d4:	d161e217 	ldw	r5,-30840(gp)
  8028d8:	d121e317 	ldw	r4,-30836(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  8028dc:	dfc00017 	ldw	ra,0(sp)
  8028e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8028e4:	08001bc1 	jmpi	8001bc <main>

008028e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  8028e8:	defff204 	addi	sp,sp,-56
  8028ec:	2005883a 	mov	r2,r4
  8028f0:	dfc00a15 	stw	ra,40(sp)
  8028f4:	df000915 	stw	fp,36(sp)
  8028f8:	ddc00815 	stw	r23,32(sp)
  8028fc:	dd800715 	stw	r22,28(sp)
  802900:	dd400615 	stw	r21,24(sp)
  802904:	dd000515 	stw	r20,20(sp)
  802908:	dcc00415 	stw	r19,16(sp)
  80290c:	dc800315 	stw	r18,12(sp)
  802910:	dc400215 	stw	r17,8(sp)
  802914:	dc000115 	stw	r16,4(sp)
  802918:	d9400b15 	stw	r5,44(sp)
  80291c:	d9800c15 	stw	r6,48(sp)
  802920:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  802924:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  802928:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  80292c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  802930:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  802934:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  802938:	11000007 	ldb	r4,0(r2)
  80293c:	20003a26 	beq	r4,zero,802a28 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  802940:	24000226 	beq	r4,r16,80294c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  802944:	14400044 	addi	r17,r2,1
  802948:	00001406 	br	80299c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80294c:	14400084 	addi	r17,r2,2
  802950:	10800047 	ldb	r2,1(r2)
  802954:	10003426 	beq	r2,zero,802a28 <alt_printf+0x140>
            {
                if (c == '%')
  802958:	1400021e 	bne	r2,r16,802964 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80295c:	8009883a 	mov	r4,r16
  802960:	00000e06 	br	80299c <alt_printf+0xb4>
                } 
                else if (c == 'c')
  802964:	1480051e 	bne	r2,r18,80297c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  802968:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  80296c:	ad800104 	addi	r22,r21,4
  802970:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  802974:	0802a580 	call	802a58 <alt_putchar>
  802978:	00002906 	br	802a20 <alt_printf+0x138>
                }
                else if (c == 'x')
  80297c:	14c0201e 	bne	r2,r19,802a00 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  802980:	adc00017 	ldw	r23,0(r21)
  802984:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  802988:	b8000326 	beq	r23,zero,802998 <alt_printf+0xb0>
  80298c:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  802990:	00c003c4 	movi	r3,15
  802994:	00000306 	br	8029a4 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  802998:	01000c04 	movi	r4,48
  80299c:	0802a580 	call	802a58 <alt_putchar>
                        continue;
  8029a0:	00001f06 	br	802a20 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  8029a4:	1d84983a 	sll	r2,r3,r22
  8029a8:	15c4703a 	and	r2,r2,r23
  8029ac:	1000021e 	bne	r2,zero,8029b8 <alt_printf+0xd0>
                        digit_shift -= 4;
  8029b0:	b5bfff04 	addi	r22,r22,-4
  8029b4:	003ffb06 	br	8029a4 <__alt_data_end+0xff8029a4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  8029b8:	070003c4 	movi	fp,15
                        if (digit <= 9)
  8029bc:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  8029c0:	b0001716 	blt	r22,zero,802a20 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  8029c4:	e588983a 	sll	r4,fp,r22
  8029c8:	25c8703a 	and	r4,r4,r23
  8029cc:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  8029d0:	19000236 	bltu	r3,r4,8029dc <alt_printf+0xf4>
                            c = '0' + digit;
  8029d4:	21000c04 	addi	r4,r4,48
  8029d8:	00000106 	br	8029e0 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  8029dc:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  8029e0:	21003fcc 	andi	r4,r4,255
  8029e4:	2100201c 	xori	r4,r4,128
  8029e8:	213fe004 	addi	r4,r4,-128
  8029ec:	d8c00015 	stw	r3,0(sp)
  8029f0:	0802a580 	call	802a58 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  8029f4:	b5bfff04 	addi	r22,r22,-4
  8029f8:	d8c00017 	ldw	r3,0(sp)
  8029fc:	003ff006 	br	8029c0 <__alt_data_end+0xff8029c0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  802a00:	1500071e 	bne	r2,r20,802a20 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  802a04:	ad800017 	ldw	r22,0(r21)
  802a08:	ad400104 	addi	r21,r21,4

                    while(*s)
  802a0c:	b1000007 	ldb	r4,0(r22)
  802a10:	20000326 	beq	r4,zero,802a20 <alt_printf+0x138>
                      alt_putchar(*s++);
  802a14:	b5800044 	addi	r22,r22,1
  802a18:	0802a580 	call	802a58 <alt_putchar>
  802a1c:	003ffb06 	br	802a0c <__alt_data_end+0xff802a0c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  802a20:	8805883a 	mov	r2,r17
  802a24:	003fc406 	br	802938 <__alt_data_end+0xff802938>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  802a28:	dfc00a17 	ldw	ra,40(sp)
  802a2c:	df000917 	ldw	fp,36(sp)
  802a30:	ddc00817 	ldw	r23,32(sp)
  802a34:	dd800717 	ldw	r22,28(sp)
  802a38:	dd400617 	ldw	r21,24(sp)
  802a3c:	dd000517 	ldw	r20,20(sp)
  802a40:	dcc00417 	ldw	r19,16(sp)
  802a44:	dc800317 	ldw	r18,12(sp)
  802a48:	dc400217 	ldw	r17,8(sp)
  802a4c:	dc000117 	ldw	r16,4(sp)
  802a50:	dec00e04 	addi	sp,sp,56
  802a54:	f800283a 	ret

00802a58 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  802a58:	00802034 	movhi	r2,128
  802a5c:	108fae04 	addi	r2,r2,16056
  802a60:	10800017 	ldw	r2,0(r2)
  802a64:	11400217 	ldw	r5,8(r2)
  802a68:	08025a01 	jmpi	8025a0 <putc>

00802a6c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802a6c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802a70:	00bfff84 	movi	r2,-2
  802a74:	2884703a 	and	r2,r5,r2
  802a78:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  802a7c:	d0a00417 	ldw	r2,-32752(gp)
  802a80:	00ffff04 	movi	r3,-4
  802a84:	108000c4 	addi	r2,r2,3
  802a88:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  802a8c:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  802a90:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  802a94:	1109883a 	add	r4,r2,r4
  802a98:	18c00004 	addi	r3,r3,0
  802a9c:	1900032e 	bgeu	r3,r4,802aac <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802aa0:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  802aa4:	00bfffc4 	movi	r2,-1
  802aa8:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  802aac:	d1200415 	stw	r4,-32752(gp)
  802ab0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  802ab4:	f800283a 	ret

00802ab8 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  802ab8:	00802034 	movhi	r2,128
  802abc:	108fb704 	addi	r2,r2,16092
  802ac0:	10800017 	ldw	r2,0(r2)
  802ac4:	10000126 	beq	r2,zero,802acc <alt_get_errno+0x14>
  802ac8:	1000683a 	jmp	r2
}
  802acc:	00802034 	movhi	r2,128
  802ad0:	10918b04 	addi	r2,r2,17964
  802ad4:	f800283a 	ret

00802ad8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  802ad8:	defffa04 	addi	sp,sp,-24
  802adc:	dfc00515 	stw	ra,20(sp)
  802ae0:	dd000415 	stw	r20,16(sp)
  802ae4:	dcc00315 	stw	r19,12(sp)
  802ae8:	dc800215 	stw	r18,8(sp)
  802aec:	dc400115 	stw	r17,4(sp)
  802af0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802af4:	20002016 	blt	r4,zero,802b78 <write+0xa0>
  802af8:	2827883a 	mov	r19,r5
  802afc:	04002034 	movhi	r16,128
  802b00:	01400304 	movi	r5,12
  802b04:	2025883a 	mov	r18,r4
  802b08:	3029883a 	mov	r20,r6
  802b0c:	840f4104 	addi	r16,r16,15620
  802b10:	08022540 	call	802254 <__mulsi3>
  802b14:	80a3883a 	add	r17,r16,r2
  
  if (fd)
  802b18:	88001726 	beq	r17,zero,802b78 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  802b1c:	88800217 	ldw	r2,8(r17)
  802b20:	108000cc 	andi	r2,r2,3
  802b24:	10001126 	beq	r2,zero,802b6c <write+0x94>
  802b28:	01400304 	movi	r5,12
  802b2c:	9009883a 	mov	r4,r18
  802b30:	08022540 	call	802254 <__mulsi3>
  802b34:	8085883a 	add	r2,r16,r2
  802b38:	10800017 	ldw	r2,0(r2)
  802b3c:	10800617 	ldw	r2,24(r2)
  802b40:	10000a26 	beq	r2,zero,802b6c <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  802b44:	a00d883a 	mov	r6,r20
  802b48:	980b883a 	mov	r5,r19
  802b4c:	8809883a 	mov	r4,r17
  802b50:	103ee83a 	callr	r2
  802b54:	1021883a 	mov	r16,r2
  802b58:	10000b0e 	bge	r2,zero,802b88 <write+0xb0>
      {
        ALT_ERRNO = -rval;
  802b5c:	0802ab80 	call	802ab8 <alt_get_errno>
  802b60:	0421c83a 	sub	r16,zero,r16
  802b64:	14000015 	stw	r16,0(r2)
  802b68:	00000606 	br	802b84 <write+0xac>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  802b6c:	0802ab80 	call	802ab8 <alt_get_errno>
  802b70:	00c00344 	movi	r3,13
  802b74:	00000206 	br	802b80 <write+0xa8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  802b78:	0802ab80 	call	802ab8 <alt_get_errno>
  802b7c:	00c01444 	movi	r3,81
  802b80:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  802b84:	043fffc4 	movi	r16,-1
}
  802b88:	8005883a 	mov	r2,r16
  802b8c:	dfc00517 	ldw	ra,20(sp)
  802b90:	dd000417 	ldw	r20,16(sp)
  802b94:	dcc00317 	ldw	r19,12(sp)
  802b98:	dc800217 	ldw	r18,8(sp)
  802b9c:	dc400117 	ldw	r17,4(sp)
  802ba0:	dc000017 	ldw	r16,0(sp)
  802ba4:	dec00604 	addi	sp,sp,24
  802ba8:	f800283a 	ret

00802bac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  802bac:	deffff04 	addi	sp,sp,-4
  802bb0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, Nios2_CPU);
  802bb4:	08035100 	call	803510 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  802bb8:	00800044 	movi	r2,1
  802bbc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  802bc0:	dfc00017 	ldw	ra,0(sp)
  802bc4:	dec00104 	addi	sp,sp,4
  802bc8:	f800283a 	ret

00802bcc <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  802bcc:	01402034 	movhi	r5,128
  802bd0:	01002034 	movhi	r4,128
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  802bd4:	deffff04 	addi	sp,sp,-4
  802bd8:	294fb304 	addi	r5,r5,16076
  802bdc:	210f3604 	addi	r4,r4,15576
  802be0:	dfc00015 	stw	ra,0(sp)
  802be4:	080300c0 	call	80300c <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802be8:	01bfffc4 	movi	r6,-1
  802bec:	01002034 	movhi	r4,128
  802bf0:	300b883a 	mov	r5,r6
  802bf4:	210f2704 	addi	r4,r4,15516
}
  802bf8:	dfc00017 	ldw	ra,0(sp)
  802bfc:	dec00104 	addi	sp,sp,4

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802c00:	0802dd41 	jmpi	802dd4 <altera_modular_adc_init>

00802c04 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  802c04:	20800017 	ldw	r2,0(r4)
  802c08:	21c00217 	ldw	r7,8(r4)
  802c0c:	11000a04 	addi	r4,r2,40
  802c10:	0802c241 	jmpi	802c24 <altera_avalon_jtag_uart_read>

00802c14 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  802c14:	20800017 	ldw	r2,0(r4)
  802c18:	21c00217 	ldw	r7,8(r4)
  802c1c:	11000a04 	addi	r4,r2,40
  802c20:	0802c801 	jmpi	802c80 <altera_avalon_jtag_uart_write>

00802c24 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  802c24:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  802c28:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  802c2c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  802c30:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  802c34:	11800b2e 	bgeu	r2,r6,802c64 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  802c38:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  802c3c:	1a60000c 	andi	r9,r3,32768
  802c40:	48000326 	beq	r9,zero,802c50 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  802c44:	10c00005 	stb	r3,0(r2)
  802c48:	10800044 	addi	r2,r2,1
  802c4c:	003ff906 	br	802c34 <__alt_data_end+0xff802c34>
    else if (ptr != buffer)
  802c50:	11400226 	beq	r2,r5,802c5c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  802c54:	1145c83a 	sub	r2,r2,r5
  802c58:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  802c5c:	403ff526 	beq	r8,zero,802c34 <__alt_data_end+0xff802c34>
  802c60:	00000106 	br	802c68 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  802c64:	117ffb1e 	bne	r2,r5,802c54 <__alt_data_end+0xff802c54>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  802c68:	39d0000c 	andi	r7,r7,16384
  802c6c:	3800021e 	bne	r7,zero,802c78 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  802c70:	00bffec4 	movi	r2,-5
  802c74:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  802c78:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  802c7c:	f800283a 	ret

00802c80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  802c80:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  802c84:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  802c88:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  802c8c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  802c90:	2980072e 	bgeu	r5,r6,802cb0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  802c94:	38c00037 	ldwio	r3,0(r7)
  802c98:	18ffffec 	andhi	r3,r3,65535
  802c9c:	183ffc26 	beq	r3,zero,802c90 <__alt_data_end+0xff802c90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  802ca0:	28c00007 	ldb	r3,0(r5)
  802ca4:	20c00035 	stwio	r3,0(r4)
  802ca8:	29400044 	addi	r5,r5,1
  802cac:	003ff806 	br	802c90 <__alt_data_end+0xff802c90>

  return count;
}
  802cb0:	f800283a 	ret

00802cb4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  802cb4:	d8800017 	ldw	r2,0(sp)
  802cb8:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802cbc:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  802cc0:	da400217 	ldw	r9,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802cc4:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  802cc8:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
  802ccc:	409f883a 	add	r15,r8,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802cd0:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  802cd4:	48c0008c 	andi	r3,r9,2
  802cd8:	1800021e 	bne	r3,zero,802ce4 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  802cdc:	00c10004 	movi	r3,1024
  802ce0:	20c00335 	stwio	r3,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  802ce4:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  802ce8:	00c00044 	movi	r3,1
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
  802cec:	1015883a 	mov	r10,r2
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802cf0:	22c00204 	addi	r11,r4,8
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  802cf4:	23000104 	addi	r12,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802cf8:	59400037 	ldwio	r5,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802cfc:	2b40100c 	andi	r13,r5,64
  802d00:	2940200c 	andi	r5,r5,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  802d04:	68000126 	beq	r13,zero,802d0c <alt_avalon_spi_command+0x58>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802d08:	1800031e 	bne	r3,zero,802d18 <alt_avalon_spi_command+0x64>
  802d0c:	283ffa26 	beq	r5,zero,802cf8 <__alt_data_end+0xff802cf8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  802d10:	68000e26 	beq	r13,zero,802d4c <alt_avalon_spi_command+0x98>
  802d14:	00001e06 	br	802d90 <alt_avalon_spi_command+0xdc>
  802d18:	00c00c0e 	bge	zero,r3,802d4c <alt_avalon_spi_command+0x98>
    {
      credits--;
  802d1c:	18ffffc4 	addi	r3,r3,-1

      if (write_data < write_end)
  802d20:	3b80052e 	bgeu	r7,r14,802d38 <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  802d24:	3b400044 	addi	r13,r7,1
  802d28:	39c00003 	ldbu	r7,0(r7)
  802d2c:	61c00035 	stwio	r7,0(r12)
  802d30:	680f883a 	mov	r7,r13
  802d34:	00000506 	br	802d4c <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
  802d38:	50000326 	beq	r10,zero,802d48 <alt_avalon_spi_command+0x94>
      {
        write_zeros--;
  802d3c:	52bfffc4 	addi	r10,r10,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  802d40:	60000035 	stwio	zero,0(r12)
  802d44:	00000106 	br	802d4c <alt_avalon_spi_command+0x98>
      }
      else
        credits = -1024;
  802d48:	00ff0004 	movi	r3,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  802d4c:	283fea26 	beq	r5,zero,802cf8 <__alt_data_end+0xff802cf8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  802d50:	21400037 	ldwio	r5,0(r4)

      if (read_ignore > 0)
  802d54:	30000226 	beq	r6,zero,802d60 <alt_avalon_spi_command+0xac>
        read_ignore--;
  802d58:	31bfffc4 	addi	r6,r6,-1
  802d5c:	00000206 	br	802d68 <alt_avalon_spi_command+0xb4>
      else
        *read_data++ = (alt_u8)rxdata;
  802d60:	41400005 	stb	r5,0(r8)
  802d64:	42000044 	addi	r8,r8,1
      credits++;
  802d68:	18c00044 	addi	r3,r3,1

      if (read_ignore == 0 && read_data == read_end)
  802d6c:	303fe21e 	bne	r6,zero,802cf8 <__alt_data_end+0xff802cf8>
  802d70:	43ffe11e 	bne	r8,r15,802cf8 <__alt_data_end+0xff802cf8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802d74:	58c00037 	ldwio	r3,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  802d78:	18c0080c 	andi	r3,r3,32
  802d7c:	183ffd26 	beq	r3,zero,802d74 <__alt_data_end+0xff802d74>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  802d80:	4a40004c 	andi	r9,r9,1
  802d84:	4800041e 	bne	r9,zero,802d98 <alt_avalon_spi_command+0xe4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  802d88:	20000335 	stwio	zero,12(r4)

  return read_length;
  802d8c:	f800283a 	ret
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  802d90:	00ffef0e 	bge	zero,r3,802d50 <__alt_data_end+0xff802d50>
  802d94:	003fe106 	br	802d1c <__alt_data_end+0xff802d1c>
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
  802d98:	f800283a 	ret

00802d9c <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
  802d9c:	28000b26 	beq	r5,zero,802dcc <alt_adc_word_read+0x30>
  802da0:	0005883a 	mov	r2,zero
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  802da4:	2149c83a 	sub	r4,r4,r5
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  802da8:	11800626 	beq	r2,r6,802dc4 <alt_adc_word_read+0x28>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  802dac:	2907883a 	add	r3,r5,r4
  802db0:	18c00037 	ldwio	r3,0(r3)
  802db4:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  802db8:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
  802dbc:	29400104 	addi	r5,r5,4
  802dc0:	003ff906 	br	802da8 <__alt_data_end+0xff802da8>
    }

    return 0;
  802dc4:	0005883a 	mov	r2,zero
  802dc8:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
  802dcc:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
  802dd0:	f800283a 	ret

00802dd4 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  802dd4:	defffb04 	addi	sp,sp,-20
  802dd8:	dc000115 	stw	r16,4(sp)
  802ddc:	2821883a 	mov	r16,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  802de0:	d1600504 	addi	r5,gp,-32748

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  802de4:	dc800315 	stw	r18,12(sp)
  802de8:	dc400215 	stw	r17,8(sp)
  802dec:	dfc00415 	stw	ra,16(sp)
  802df0:	2025883a 	mov	r18,r4
  802df4:	3023883a 	mov	r17,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  802df8:	080300c0 	call	80300c <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
  802dfc:	80000816 	blt	r16,zero,802e20 <altera_modular_adc_init+0x4c>
  802e00:	88000716 	blt	r17,zero,802e20 <altera_modular_adc_init+0x4c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
  802e04:	01802034 	movhi	r6,128
  802e08:	d8000015 	stw	zero,0(sp)
  802e0c:	900f883a 	mov	r7,r18
  802e10:	318bcc04 	addi	r6,r6,12080
  802e14:	880b883a 	mov	r5,r17
  802e18:	8009883a 	mov	r4,r16
  802e1c:	08030fc0 	call	8030fc <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
  802e20:	dfc00417 	ldw	ra,16(sp)
  802e24:	dc800317 	ldw	r18,12(sp)
  802e28:	dc400217 	ldw	r17,8(sp)
  802e2c:	dc000117 	ldw	r16,4(sp)
  802e30:	dec00504 	addi	sp,sp,20
  802e34:	f800283a 	ret

00802e38 <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
  802e38:	d1600504 	addi	r5,gp,-32748
  802e3c:	08030841 	jmpi	803084 <alt_find_dev>

00802e40 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
  802e40:	20c00037 	ldwio	r3,0(r4)
  802e44:	00bfff84 	movi	r2,-2
  802e48:	1884703a 	and	r2,r3,r2
  802e4c:	20800035 	stwio	r2,0(r4)
  802e50:	20800037 	ldwio	r2,0(r4)
  802e54:	1080004c 	andi	r2,r2,1
  802e58:	103ffd1e 	bne	r2,zero,802e50 <__alt_data_end+0xff802e50>
}
  802e5c:	f800283a 	ret

00802e60 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
  802e60:	20800037 	ldwio	r2,0(r4)
  802e64:	10800054 	ori	r2,r2,1
  802e68:	20800035 	stwio	r2,0(r4)
  802e6c:	f800283a 	ret

00802e70 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
  802e70:	20c00037 	ldwio	r3,0(r4)
  802e74:	00bffc44 	movi	r2,-15
  802e78:	1884703a 	and	r2,r3,r2
  802e7c:	10800094 	ori	r2,r2,2
  802e80:	20800035 	stwio	r2,0(r4)
  802e84:	f800283a 	ret

00802e88 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
  802e88:	20c00037 	ldwio	r3,0(r4)
  802e8c:	00bffc44 	movi	r2,-15
  802e90:	1884703a 	and	r2,r3,r2
  802e94:	20800035 	stwio	r2,0(r4)
  802e98:	f800283a 	ret

00802e9c <adc_recalibrate>:
}

void adc_recalibrate(int sequencer_base)
{
  802e9c:	defffd04 	addi	sp,sp,-12
  802ea0:	dc000015 	stw	r16,0(sp)
  802ea4:	2021883a 	mov	r16,r4
  802ea8:	dfc00215 	stw	ra,8(sp)
  802eac:	dc400115 	stw	r17,4(sp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
  802eb0:	24400037 	ldwio	r17,0(r4)
    adc_stop(sequencer_base);
  802eb4:	0802e400 	call	802e40 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
  802eb8:	80800037 	ldwio	r2,0(r16)
  802ebc:	10800394 	ori	r2,r2,14
  802ec0:	80800035 	stwio	r2,0(r16)
    adc_start(sequencer_base);
  802ec4:	8009883a 	mov	r4,r16
  802ec8:	0802e600 	call	802e60 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  802ecc:	80800037 	ldwio	r2,0(r16)
  802ed0:	1080004c 	andi	r2,r2,1
  802ed4:	103ffd1e 	bne	r2,zero,802ecc <__alt_data_end+0xff802ecc>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
  802ed8:	84400035 	stwio	r17,0(r16)
}
  802edc:	dfc00217 	ldw	ra,8(sp)
  802ee0:	dc400117 	ldw	r17,4(sp)
  802ee4:	dc000017 	ldw	r16,0(sp)
  802ee8:	dec00304 	addi	sp,sp,12
  802eec:	f800283a 	ret

00802ef0 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
  802ef0:	21004004 	addi	r4,r4,256
  802ef4:	20800037 	ldwio	r2,0(r4)
  802ef8:	10800054 	ori	r2,r2,1
  802efc:	20800035 	stwio	r2,0(r4)
  802f00:	f800283a 	ret

00802f04 <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
  802f04:	21004004 	addi	r4,r4,256
  802f08:	20c00037 	ldwio	r3,0(r4)
  802f0c:	00bfff84 	movi	r2,-2
  802f10:	1884703a 	and	r2,r3,r2
  802f14:	20800035 	stwio	r2,0(r4)
  802f18:	f800283a 	ret

00802f1c <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
  802f1c:	21004104 	addi	r4,r4,260
  802f20:	20800037 	ldwio	r2,0(r4)
  802f24:	10800054 	ori	r2,r2,1
  802f28:	20800035 	stwio	r2,0(r4)
  802f2c:	f800283a 	ret

00802f30 <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
  802f30:	20001426 	beq	r4,zero,802f84 <alt_adc_irq+0x54>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
  802f34:	defffd04 	addi	sp,sp,-12
  802f38:	dc000015 	stw	r16,0(sp)
  802f3c:	2021883a 	mov	r16,r4
  802f40:	dfc00215 	stw	ra,8(sp)
  802f44:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f48:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f4c:	00bfff84 	movi	r2,-2
  802f50:	8884703a 	and	r2,r17,r2
  802f54:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
  802f58:	20800a17 	ldw	r2,40(r4)
  802f5c:	10000226 	beq	r2,zero,802f68 <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
  802f60:	21000b17 	ldw	r4,44(r4)
  802f64:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
  802f68:	81000c17 	ldw	r4,48(r16)
  802f6c:	0802f1c0 	call	802f1c <adc_clear_interrupt_status>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f70:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
  802f74:	dfc00217 	ldw	ra,8(sp)
  802f78:	dc400117 	ldw	r17,4(sp)
  802f7c:	dc000017 	ldw	r16,0(sp)
  802f80:	dec00304 	addi	sp,sp,12
  802f84:	f800283a 	ret

00802f88 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  802f88:	defffe04 	addi	sp,sp,-8
  802f8c:	dc000015 	stw	r16,0(sp)
  802f90:	dfc00115 	stw	ra,4(sp)
    dev->callback         = callback;
  802f94:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
  802f98:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
  802f9c:	21c00c15 	stw	r7,48(r4)
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  802fa0:	3821883a 	mov	r16,r7
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
  802fa4:	3809883a 	mov	r4,r7
{
    dev->callback         = callback;
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
  802fa8:	28000626 	beq	r5,zero,802fc4 <alt_adc_register_callback+0x3c>
	{
                adc_clear_interrupt_status(sample_store_base);
  802fac:	0802f1c0 	call	802f1c <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
  802fb0:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  802fb4:	dfc00117 	ldw	ra,4(sp)
  802fb8:	dc000017 	ldw	r16,0(sp)
  802fbc:	dec00204 	addi	sp,sp,8
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
  802fc0:	0802ef01 	jmpi	802ef0 <adc_interrupt_enable>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
  802fc4:	0802f040 	call	802f04 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
  802fc8:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  802fcc:	dfc00117 	ldw	ra,4(sp)
  802fd0:	dc000017 	ldw	r16,0(sp)
  802fd4:	dec00204 	addi	sp,sp,8
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
                adc_clear_interrupt_status(sample_store_base);
  802fd8:	0802f1c1 	jmpi	802f1c <adc_clear_interrupt_status>

00802fdc <adc_interrupt_asserted>:
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
  802fdc:	20804137 	ldwio	r2,260(r4)
  802fe0:	1080004c 	andi	r2,r2,1
}
  802fe4:	0085c83a 	sub	r2,zero,r2
  802fe8:	f800283a 	ret

00802fec <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
  802fec:	21004104 	addi	r4,r4,260
  802ff0:	20800037 	ldwio	r2,0(r4)
  802ff4:	1080004c 	andi	r2,r2,1
  802ff8:	103ffd26 	beq	r2,zero,802ff0 <__alt_data_end+0xff802ff0>
}
  802ffc:	f800283a 	ret

00803000 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  803000:	f800283a 	ret

00803004 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  803004:	3005883a 	mov	r2,r6
  803008:	f800283a 	ret

0080300c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80300c:	20000226 	beq	r4,zero,803018 <alt_dev_llist_insert+0xc>
  803010:	20800217 	ldw	r2,8(r4)
  803014:	1000131e 	bne	r2,zero,803064 <alt_dev_llist_insert+0x58>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  803018:	00802034 	movhi	r2,128
  80301c:	108fb704 	addi	r2,r2,16092
  803020:	10800017 	ldw	r2,0(r2)
  803024:	10000926 	beq	r2,zero,80304c <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  803028:	deffff04 	addi	sp,sp,-4
  80302c:	dfc00015 	stw	ra,0(sp)
  803030:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  803034:	00c00584 	movi	r3,22
  803038:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  80303c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  803040:	dfc00017 	ldw	ra,0(sp)
  803044:	dec00104 	addi	sp,sp,4
  803048:	f800283a 	ret
  80304c:	00802034 	movhi	r2,128
  803050:	10918b04 	addi	r2,r2,17964
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  803054:	00c00584 	movi	r3,22
  803058:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  80305c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  803060:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  803064:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803068:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  80306c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  803070:	28800017 	ldw	r2,0(r5)
  803074:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  803078:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  80307c:	0005883a 	mov	r2,zero
  803080:	f800283a 	ret

00803084 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803084:	defffb04 	addi	sp,sp,-20
  803088:	dcc00315 	stw	r19,12(sp)
  80308c:	dc800215 	stw	r18,8(sp)
  803090:	dc400115 	stw	r17,4(sp)
  803094:	dc000015 	stw	r16,0(sp)
  803098:	dfc00415 	stw	ra,16(sp)
  80309c:	2027883a 	mov	r19,r4
  8030a0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  8030a4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  8030a8:	080269c0 	call	80269c <strlen>
  8030ac:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8030b0:	84400726 	beq	r16,r17,8030d0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8030b4:	81000217 	ldw	r4,8(r16)
  8030b8:	900d883a 	mov	r6,r18
  8030bc:	980b883a 	mov	r5,r19
  8030c0:	08036c40 	call	8036c4 <memcmp>
  8030c4:	10000426 	beq	r2,zero,8030d8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8030c8:	84000017 	ldw	r16,0(r16)
  8030cc:	003ff806 	br	8030b0 <__alt_data_end+0xff8030b0>
  }
  
  /* No match found */
  
  return NULL;
  8030d0:	0005883a 	mov	r2,zero
  8030d4:	00000106 	br	8030dc <alt_find_dev+0x58>
  8030d8:	8005883a 	mov	r2,r16
}
  8030dc:	dfc00417 	ldw	ra,16(sp)
  8030e0:	dcc00317 	ldw	r19,12(sp)
  8030e4:	dc800217 	ldw	r18,8(sp)
  8030e8:	dc400117 	ldw	r17,4(sp)
  8030ec:	dc000017 	ldw	r16,0(sp)
  8030f0:	dec00504 	addi	sp,sp,20
  8030f4:	f800283a 	ret

008030f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8030f8:	f800283a 	ret

008030fc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8030fc:	08031981 	jmpi	803198 <alt_iic_isr_register>

00803100 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803100:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803104:	00bfff84 	movi	r2,-2
  803108:	3084703a 	and	r2,r6,r2
  80310c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  803110:	00802034 	movhi	r2,128
  803114:	10918f04 	addi	r2,r2,17980
  803118:	01000044 	movi	r4,1
  80311c:	10c00017 	ldw	r3,0(r2)
  803120:	214a983a 	sll	r5,r4,r5
  803124:	28cab03a 	or	r5,r5,r3
  803128:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80312c:	10800017 	ldw	r2,0(r2)
  803130:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803134:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  803138:	0005883a 	mov	r2,zero
  80313c:	f800283a 	ret

00803140 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803140:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803144:	00bfff84 	movi	r2,-2
  803148:	3084703a 	and	r2,r6,r2
  80314c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  803150:	00802034 	movhi	r2,128
  803154:	10918f04 	addi	r2,r2,17980
  803158:	013fff84 	movi	r4,-2
  80315c:	10c00017 	ldw	r3,0(r2)
  803160:	214a183a 	rol	r5,r4,r5
  803164:	28ca703a 	and	r5,r5,r3
  803168:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80316c:	10800017 	ldw	r2,0(r2)
  803170:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803174:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  803178:	0005883a 	mov	r2,zero
  80317c:	f800283a 	ret

00803180 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  803180:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803184:	00800044 	movi	r2,1
  803188:	1144983a 	sll	r2,r2,r5
  80318c:	10c4703a 	and	r2,r2,r3
}
  803190:	1004c03a 	cmpne	r2,r2,zero
  803194:	f800283a 	ret

00803198 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803198:	00c007c4 	movi	r3,31
  80319c:	19401616 	blt	r3,r5,8031f8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8031a0:	defffe04 	addi	sp,sp,-8
  8031a4:	dfc00115 	stw	ra,4(sp)
  8031a8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8031ac:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8031b0:	00ffff84 	movi	r3,-2
  8031b4:	80c6703a 	and	r3,r16,r3
  8031b8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  8031bc:	280490fa 	slli	r2,r5,3
  8031c0:	00c02034 	movhi	r3,128
  8031c4:	18d19104 	addi	r3,r3,17988
  8031c8:	1885883a 	add	r2,r3,r2
  8031cc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  8031d0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8031d4:	30000226 	beq	r6,zero,8031e0 <alt_iic_isr_register+0x48>
  8031d8:	08031000 	call	803100 <alt_ic_irq_enable>
  8031dc:	00000106 	br	8031e4 <alt_iic_isr_register+0x4c>
  8031e0:	08031400 	call	803140 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8031e4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  8031e8:	dfc00117 	ldw	ra,4(sp)
  8031ec:	dc000017 	ldw	r16,0(sp)
  8031f0:	dec00204 	addi	sp,sp,8
  8031f4:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  8031f8:	00bffa84 	movi	r2,-22
  8031fc:	f800283a 	ret

00803200 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  803200:	defffd04 	addi	sp,sp,-12
  803204:	dc400115 	stw	r17,4(sp)
  803208:	2023883a 	mov	r17,r4
  80320c:	2809883a 	mov	r4,r5
  803210:	300b883a 	mov	r5,r6
{
  int old;

  old = open (name, flags, mode);
  803214:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  803218:	dfc00215 	stw	ra,8(sp)
  80321c:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
  803220:	08032fc0 	call	8032fc <open>

  if (old >= 0)
  803224:	10001316 	blt	r2,zero,803274 <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
  803228:	01400304 	movi	r5,12
  80322c:	1009883a 	mov	r4,r2
  803230:	1021883a 	mov	r16,r2
  803234:	08022540 	call	802254 <__mulsi3>
  803238:	00c02034 	movhi	r3,128
  80323c:	18cf4104 	addi	r3,r3,15620
  803240:	1885883a 	add	r2,r3,r2
  803244:	10c00017 	ldw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  803248:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80324c:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
  803250:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803254:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  803258:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80325c:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
  803260:	dfc00217 	ldw	ra,8(sp)
  803264:	dc400117 	ldw	r17,4(sp)
  803268:	dc000017 	ldw	r16,0(sp)
  80326c:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  803270:	08034b41 	jmpi	8034b4 <alt_release_fd>
  }
} 
  803274:	dfc00217 	ldw	ra,8(sp)
  803278:	dc400117 	ldw	r17,4(sp)
  80327c:	dc000017 	ldw	r16,0(sp)
  803280:	dec00304 	addi	sp,sp,12
  803284:	f800283a 	ret

00803288 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  803288:	defffb04 	addi	sp,sp,-20
  80328c:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  803290:	04002034 	movhi	r16,128
  803294:	840f4404 	addi	r16,r16,15632
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  803298:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80329c:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8032a0:	dcc00315 	stw	r19,12(sp)
  8032a4:	dc800215 	stw	r18,8(sp)
  8032a8:	2827883a 	mov	r19,r5
  8032ac:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8032b0:	200b883a 	mov	r5,r4
  8032b4:	880d883a 	mov	r6,r17
  8032b8:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8032bc:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8032c0:	08032000 	call	803200 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8032c4:	980b883a 	mov	r5,r19
  8032c8:	813ffd04 	addi	r4,r16,-12
  8032cc:	000d883a 	mov	r6,zero
  8032d0:	08032000 	call	803200 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8032d4:	880d883a 	mov	r6,r17
  8032d8:	900b883a 	mov	r5,r18
  8032dc:	81000304 	addi	r4,r16,12
}  
  8032e0:	dfc00417 	ldw	ra,16(sp)
  8032e4:	dcc00317 	ldw	r19,12(sp)
  8032e8:	dc800217 	ldw	r18,8(sp)
  8032ec:	dc400117 	ldw	r17,4(sp)
  8032f0:	dc000017 	ldw	r16,0(sp)
  8032f4:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8032f8:	08032001 	jmpi	803200 <alt_open_fd.constprop.0>

008032fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8032fc:	defff504 	addi	sp,sp,-44
  803300:	dd000515 	stw	r20,20(sp)
  803304:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803308:	01402034 	movhi	r5,128
  80330c:	294fb304 	addi	r5,r5,16076
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803310:	dd400615 	stw	r21,24(sp)
  803314:	dcc00415 	stw	r19,16(sp)
  803318:	dfc00a15 	stw	ra,40(sp)
  80331c:	df000915 	stw	fp,36(sp)
  803320:	ddc00815 	stw	r23,32(sp)
  803324:	dd800715 	stw	r22,28(sp)
  803328:	dc800315 	stw	r18,12(sp)
  80332c:	dc400215 	stw	r17,8(sp)
  803330:	dc000115 	stw	r16,4(sp)
  803334:	2027883a 	mov	r19,r4
  803338:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80333c:	08030840 	call	803084 <alt_find_dev>
  803340:	1000061e 	bne	r2,zero,80335c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803344:	9809883a 	mov	r4,r19
  803348:	08035180 	call	803518 <alt_find_file>
  80334c:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803350:	10004526 	beq	r2,zero,803468 <open+0x16c>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
  803354:	04800044 	movi	r18,1
  803358:	00000206 	br	803364 <open+0x68>
  80335c:	1023883a 	mov	r17,r2
  803360:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  803364:	8809883a 	mov	r4,r17
  803368:	08035c40 	call	8035c4 <alt_get_fd>
  80336c:	1021883a 	mov	r16,r2
  803370:	10004016 	blt	r2,zero,803474 <open+0x178>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  803374:	01400304 	movi	r5,12
  803378:	1009883a 	mov	r4,r2
  80337c:	05802034 	movhi	r22,128
  803380:	08022540 	call	802254 <__mulsi3>
  803384:	b58f4104 	addi	r22,r22,15620
  803388:	b0af883a 	add	r23,r22,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80338c:	00900034 	movhi	r2,16384
  803390:	10bfffc4 	addi	r2,r2,-1
  803394:	a084703a 	and	r2,r20,r2
  803398:	b8c00204 	addi	r3,r23,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80339c:	90000526 	beq	r18,zero,8033b4 <open+0xb8>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8033a0:	18800015 	stw	r2,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8033a4:	88800317 	ldw	r2,12(r17)
  8033a8:	1000191e 	bne	r2,zero,803410 <open+0x114>
  8033ac:	8005883a 	mov	r2,r16
  8033b0:	00003406 	br	803484 <open+0x188>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8033b4:	10900034 	orhi	r2,r2,16384
  8033b8:	18800015 	stw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8033bc:	00802034 	movhi	r2,128
  8033c0:	108fb204 	addi	r2,r2,16072
  8033c4:	10c00017 	ldw	r3,0(r2)
  8033c8:	b025883a 	mov	r18,r22
  8033cc:	0039883a 	mov	fp,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8033d0:	8009883a 	mov	r4,r16
  8033d4:	01400304 	movi	r5,12
  8033d8:	d8c00015 	stw	r3,0(sp)
  8033dc:	08022540 	call	802254 <__mulsi3>
  8033e0:	b085883a 	add	r2,r22,r2
  8033e4:	91000017 	ldw	r4,0(r18)
  8033e8:	10800017 	ldw	r2,0(r2)
  8033ec:	d8c00017 	ldw	r3,0(sp)
  8033f0:	2080031e 	bne	r4,r2,803400 <open+0x104>
  8033f4:	90800217 	ldw	r2,8(r18)
  8033f8:	1000010e 	bge	r2,zero,803400 <open+0x104>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8033fc:	95c01f1e 	bne	r18,r23,80347c <open+0x180>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803400:	e7000044 	addi	fp,fp,1
  803404:	94800304 	addi	r18,r18,12
  803408:	1f3ff12e 	bgeu	r3,fp,8033d0 <__alt_data_end+0xff8033d0>
  80340c:	003fe506 	br	8033a4 <__alt_data_end+0xff8033a4>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803410:	a80f883a 	mov	r7,r21
  803414:	a00d883a 	mov	r6,r20
  803418:	980b883a 	mov	r5,r19
  80341c:	b809883a 	mov	r4,r23
  803420:	103ee83a 	callr	r2
  803424:	1023883a 	mov	r17,r2
  803428:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80342c:	8800150e 	bge	r17,zero,803484 <open+0x188>
  {
    alt_release_fd (index);  
  803430:	8009883a 	mov	r4,r16
  803434:	08034b40 	call	8034b4 <alt_release_fd>
  803438:	00802034 	movhi	r2,128
  80343c:	108fb704 	addi	r2,r2,16092
  803440:	10800017 	ldw	r2,0(r2)
  803444:	10000226 	beq	r2,zero,803450 <open+0x154>
  803448:	103ee83a 	callr	r2
  80344c:	00000206 	br	803458 <open+0x15c>
  803450:	00802034 	movhi	r2,128
  803454:	10918b04 	addi	r2,r2,17964
    ALT_ERRNO = -status;
  803458:	0463c83a 	sub	r17,zero,r17
  80345c:	14400015 	stw	r17,0(r2)
    return -1;
  803460:	00bfffc4 	movi	r2,-1
  803464:	00000706 	br	803484 <open+0x188>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803468:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80346c:	043fffc4 	movi	r16,-1
  803470:	003fef06 	br	803430 <__alt_data_end+0xff803430>
  803474:	1023883a 	mov	r17,r2
  803478:	003fed06 	br	803430 <__alt_data_end+0xff803430>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80347c:	047ffcc4 	movi	r17,-13
  803480:	003feb06 	br	803430 <__alt_data_end+0xff803430>
  }
  
  /* return the reference upon success */

  return index;
}
  803484:	dfc00a17 	ldw	ra,40(sp)
  803488:	df000917 	ldw	fp,36(sp)
  80348c:	ddc00817 	ldw	r23,32(sp)
  803490:	dd800717 	ldw	r22,28(sp)
  803494:	dd400617 	ldw	r21,24(sp)
  803498:	dd000517 	ldw	r20,20(sp)
  80349c:	dcc00417 	ldw	r19,16(sp)
  8034a0:	dc800317 	ldw	r18,12(sp)
  8034a4:	dc400217 	ldw	r17,8(sp)
  8034a8:	dc000117 	ldw	r16,4(sp)
  8034ac:	dec00b04 	addi	sp,sp,44
  8034b0:	f800283a 	ret

008034b4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  8034b4:	00c00084 	movi	r3,2
  8034b8:	1900140e 	bge	r3,r4,80350c <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8034bc:	defffd04 	addi	sp,sp,-12
  8034c0:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  8034c4:	01400304 	movi	r5,12
  8034c8:	04002034 	movhi	r16,128
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8034cc:	dfc00215 	stw	ra,8(sp)
  8034d0:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  8034d4:	840f4104 	addi	r16,r16,15620
  8034d8:	2023883a 	mov	r17,r4
  8034dc:	08022540 	call	802254 <__mulsi3>
  8034e0:	8085883a 	add	r2,r16,r2
    alt_fd_list[fd].dev      = 0;
  8034e4:	01400304 	movi	r5,12
  8034e8:	8809883a 	mov	r4,r17

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  8034ec:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  8034f0:	08022540 	call	802254 <__mulsi3>
  8034f4:	8085883a 	add	r2,r16,r2
  8034f8:	10000015 	stw	zero,0(r2)
  }
}
  8034fc:	dfc00217 	ldw	ra,8(sp)
  803500:	dc400117 	ldw	r17,4(sp)
  803504:	dc000017 	ldw	r16,0(sp)
  803508:	dec00304 	addi	sp,sp,12
  80350c:	f800283a 	ret

00803510 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  803510:	000170fa 	wrctl	ienable,zero
  803514:	f800283a 	ret

00803518 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803518:	00802034 	movhi	r2,128
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80351c:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803520:	108fb504 	addi	r2,r2,16084
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803524:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803528:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80352c:	dd000415 	stw	r20,16(sp)
  803530:	dcc00315 	stw	r19,12(sp)
  803534:	dc800215 	stw	r18,8(sp)
  803538:	dfc00515 	stw	ra,20(sp)
  80353c:	dc400115 	stw	r17,4(sp)
  803540:	2027883a 	mov	r19,r4
  803544:	1025883a 	mov	r18,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  803548:	05000bc4 	movi	r20,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80354c:	84801226 	beq	r16,r18,803598 <alt_find_file+0x80>
  {
    len = strlen(next->name);
  803550:	84400217 	ldw	r17,8(r16)
  803554:	8809883a 	mov	r4,r17
  803558:	080269c0 	call	80269c <strlen>
    
    if (next->name[len-1] == '/')
  80355c:	8887883a 	add	r3,r17,r2
  803560:	18ffffc7 	ldb	r3,-1(r3)
  803564:	1d00011e 	bne	r3,r20,80356c <alt_find_file+0x54>
    {
      len -= 1;
  803568:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80356c:	9887883a 	add	r3,r19,r2
  803570:	18c00007 	ldb	r3,0(r3)
  803574:	1d000126 	beq	r3,r20,80357c <alt_find_file+0x64>
  803578:	1800051e 	bne	r3,zero,803590 <alt_find_file+0x78>
        !memcmp (next->name, name, len))
  80357c:	100d883a 	mov	r6,r2
  803580:	980b883a 	mov	r5,r19
  803584:	8809883a 	mov	r4,r17
  803588:	08036c40 	call	8036c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80358c:	10000426 	beq	r2,zero,8035a0 <alt_find_file+0x88>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  803590:	84000017 	ldw	r16,0(r16)
  803594:	003fed06 	br	80354c <__alt_data_end+0xff80354c>
  }
  
  /* No match found */
  
  return NULL;     
  803598:	0005883a 	mov	r2,zero
  80359c:	00000106 	br	8035a4 <alt_find_file+0x8c>
  8035a0:	8005883a 	mov	r2,r16
}
  8035a4:	dfc00517 	ldw	ra,20(sp)
  8035a8:	dd000417 	ldw	r20,16(sp)
  8035ac:	dcc00317 	ldw	r19,12(sp)
  8035b0:	dc800217 	ldw	r18,8(sp)
  8035b4:	dc400117 	ldw	r17,4(sp)
  8035b8:	dc000017 	ldw	r16,0(sp)
  8035bc:	dec00604 	addi	sp,sp,24
  8035c0:	f800283a 	ret

008035c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8035c4:	defffb04 	addi	sp,sp,-20
  8035c8:	dcc00315 	stw	r19,12(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
  8035cc:	04c02034 	movhi	r19,128
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8035d0:	dc800215 	stw	r18,8(sp)
  8035d4:	dc400115 	stw	r17,4(sp)
  8035d8:	dc000015 	stw	r16,0(sp)
  8035dc:	dfc00415 	stw	ra,16(sp)
  8035e0:	2025883a 	mov	r18,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8035e4:	0021883a 	mov	r16,zero
  {
    if (!alt_fd_list[i].dev)
  8035e8:	9ccf4104 	addi	r19,r19,15620
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8035ec:	04400804 	movi	r17,32
  {
    if (!alt_fd_list[i].dev)
  8035f0:	01400304 	movi	r5,12
  8035f4:	8009883a 	mov	r4,r16
  8035f8:	08022540 	call	802254 <__mulsi3>
  8035fc:	9885883a 	add	r2,r19,r2
  803600:	10c00017 	ldw	r3,0(r2)
  803604:	1800071e 	bne	r3,zero,803624 <alt_get_fd+0x60>
    {
      alt_fd_list[i].dev = dev;
  803608:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
  80360c:	00802034 	movhi	r2,128
  803610:	108fb204 	addi	r2,r2,16072
  803614:	10c00017 	ldw	r3,0(r2)
  803618:	1c00050e 	bge	r3,r16,803630 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80361c:	14000015 	stw	r16,0(r2)
  803620:	00000306 	br	803630 <alt_get_fd+0x6c>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803624:	84000044 	addi	r16,r16,1
  803628:	847ff11e 	bne	r16,r17,8035f0 <__alt_data_end+0xff8035f0>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
  80362c:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  803630:	8005883a 	mov	r2,r16
  803634:	dfc00417 	ldw	ra,16(sp)
  803638:	dcc00317 	ldw	r19,12(sp)
  80363c:	dc800217 	ldw	r18,8(sp)
  803640:	dc400117 	ldw	r17,4(sp)
  803644:	dc000017 	ldw	r16,0(sp)
  803648:	dec00504 	addi	sp,sp,20
  80364c:	f800283a 	ret

00803650 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  803650:	213ffe84 	addi	r4,r4,-6
  803654:	008003c4 	movi	r2,15
  803658:	11001636 	bltu	r2,r4,8036b4 <alt_exception_cause_generated_bad_addr+0x64>
  80365c:	200890ba 	slli	r4,r4,2
  803660:	00802034 	movhi	r2,128
  803664:	108d9d04 	addi	r2,r2,13940
  803668:	2089883a 	add	r4,r4,r2
  80366c:	20800017 	ldw	r2,0(r4)
  803670:	1000683a 	jmp	r2
  803674:	008036bc 	xorhi	r2,zero,218
  803678:	008036bc 	xorhi	r2,zero,218
  80367c:	008036b4 	movhi	r2,218
  803680:	008036b4 	movhi	r2,218
  803684:	008036b4 	movhi	r2,218
  803688:	008036bc 	xorhi	r2,zero,218
  80368c:	008036b4 	movhi	r2,218
  803690:	008036b4 	movhi	r2,218
  803694:	008036bc 	xorhi	r2,zero,218
  803698:	008036bc 	xorhi	r2,zero,218
  80369c:	008036b4 	movhi	r2,218
  8036a0:	008036bc 	xorhi	r2,zero,218
  8036a4:	008036b4 	movhi	r2,218
  8036a8:	008036b4 	movhi	r2,218
  8036ac:	008036b4 	movhi	r2,218
  8036b0:	008036bc 	xorhi	r2,zero,218
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8036b4:	0005883a 	mov	r2,zero
  8036b8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8036bc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  8036c0:	f800283a 	ret

008036c4 <memcmp>:
  8036c4:	218d883a 	add	r6,r4,r6
  8036c8:	21800826 	beq	r4,r6,8036ec <memcmp+0x28>
  8036cc:	20800003 	ldbu	r2,0(r4)
  8036d0:	28c00003 	ldbu	r3,0(r5)
  8036d4:	10c00226 	beq	r2,r3,8036e0 <memcmp+0x1c>
  8036d8:	10c5c83a 	sub	r2,r2,r3
  8036dc:	f800283a 	ret
  8036e0:	21000044 	addi	r4,r4,1
  8036e4:	29400044 	addi	r5,r5,1
  8036e8:	003ff706 	br	8036c8 <__alt_data_end+0xff8036c8>
  8036ec:	0005883a 	mov	r2,zero
  8036f0:	f800283a 	ret
