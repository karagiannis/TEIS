
C_eng_job.elf:     file format elf32-littlenios2
C_eng_job.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800230

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000042dc memsz 0x000042dc flags r-x
    LOAD off    0x000052fc vaddr 0x008042fc paddr 0x00804a24 align 2**12
         filesz 0x00000728 memsz 0x00000728 flags rw-
    LOAD off    0x0000614c vaddr 0x0080514c paddr 0x0080514c align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003ff4  00800230  00800230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  00804224  00804224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000728  008042fc  00804a24  000052fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0080514c  0080514c  0000614c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller 00000000  00805278  00805278  00005a24  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005a24  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000750  00000000  00000000  00005a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c0c6  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003ca0  00000000  00000000  0001225e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000444b  00000000  00000000  00015efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001210  00000000  00000000  0001a34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000251d  00000000  00000000  0001b55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b7b  00000000  00000000  0001da79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001f5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000390  00000000  00000000  0001f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021a85  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00021a88  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021a91  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021a92  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00021a93  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00021a9e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00021aa9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  00021ab4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  00021acb  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c6c2  00000000  00000000  00021b11  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800230 l    d  .text	00000000 .text
00804224 l    d  .rodata	00000000 .rodata
008042fc l    d  .rwdata	00000000 .rwdata
0080514c l    d  .bss	00000000 .bss
00805278 l    d  .SDRAM_Controller	00000000 .SDRAM_Controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../C_eng_job_bsp//obj/HAL/src/crt0.o
00800268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
008046fc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00801dcc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
0080253c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008049fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00802744 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00802894 l     F .text	00000038 alt_dev_reg
008047dc l     O .rwdata	0000002c jtag_uart_0
00804808 l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00802d8c l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_close.c
008032f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803440 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080346c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008038e0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00803a40 l     F .text	00000050 alt_get_errno
00803a90 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00805174 g     O .bss	00000004 alt_instruction_exception_handler
00801cb0 g     F .text	0000001c putchar
0080302c g     F .text	00000050 adc_stop
00802628 g     F .text	0000006c alt_main
00801ccc g     F .text	00000080 _puts_r
00805178 g     O .bss	00000100 alt_irq
00804a24 g       *ABS*	00000000 __flash_rwdata_start
008007e0 g     F .text	00000134 read_accelerometerY
00805278 g       *ABS*	00000000 __alt_heap_start
00801c5c g     F .text	0000004c printf
00805150 g     O .bss	00000004 j
00800d00 g     F .text	0000010c print_char
00803d68 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000000c __reset
008031f0 g     F .text	00000048 adc_interrupt_disable
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805160 g     O .bss	00000004 errno
0080068c g     F .text	00000154 read_accelerometerX
00802ee0 g     F .text	00000074 altera_modular_adc_init
00805168 g     O .bss	00000004 alt_argv
0080c9ec g       *ABS*	00000000 _gp
0080486c g     O .rwdata	00000180 alt_fd_list
00801ca8 g     F .text	00000008 _putchar_r
00803560 g     F .text	00000090 alt_find_dev
0080193c g     F .text	00000028 memcpy
00800e0c g     F .text	000000a8 print_str
008030f4 g     F .text	0000003c adc_set_mode_run_continuously
008039c4 g     F .text	0000007c alt_io_redirect
00801d4c g     F .text	00000014 puts
00803f74 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00802a10 g     F .text	000000ec altera_avalon_jtag_uart_read
00801914 g     F .text	00000014 malloc
00801c20 g     F .text	0000003c _printf_r
00801818 g     F .text	00000064 .hidden __udivsi3
00801d60 g     F .text	00000050 _sbrk_r
00800b60 g     F .text	000000d0 print_hline
008004b0 g     F .text	00000034 config_time_base
00804a00 g     O .rwdata	00000008 altera_modular_adc_list
00804a18 g     O .rwdata	00000004 alt_max_fd
008042fc g     O .rwdata	00000400 font8x8_basic
008049ee g     O .rwdata	00000004 spi_command_rx
008049f4 g     O .rwdata	00000004 _global_impure_ptr
00805278 g       *ABS*	00000000 __bss_end
008037f0 g     F .text	000000f0 alt_iic_isr_register
008032bc g     F .text	0000003c adc_wait_for_interrupt
00800ab4 g     F .text	000000ac print_pix
008037a4 g     F .text	0000004c alt_ic_irq_enabled
00805170 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
00804844 g     O .rwdata	00000028 alt_dev_null
008030b4 g     F .text	00000040 adc_set_mode_run_once
00803420 g     F .text	00000020 alt_dcache_flush_all
008018fc g     F .text	00000018 calloc
00804a24 g       *ABS*	00000000 __ram_rwdata_end
00804a10 g     O .rwdata	00000008 alt_dev_list
00800c30 g     F .text	000000d0 print_vline
00802794 g     F .text	00000100 write
0080248c g     F .text	00000058 _putc_r
008042fc g       *ABS*	00000000 __ram_rodata_end
0080307c g     F .text	00000038 adc_start
0080187c g     F .text	00000058 .hidden __umodsi3
00805278 g       *ABS*	00000000 end
0080514c g     O .bss	00000004 i
008001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802afc g     F .text	00000094 altera_avalon_jtag_uart_write
00801e38 g     F .text	0000052c ___vfprintf_internal_r
008019e4 g     F .text	000000e4 _free_r
008004e4 g     F .text	0000011c init_measurement
00804060 g     F .text	00000190 __call_exitprocs
00800230 g     F .text	0000003c _start
00800600 g     F .text	0000008c update_graph
00802b90 g     F .text	000001fc alt_avalon_spi_command
00802904 g     F .text	0000004c alt_sys_init
008018d4 g     F .text	00000028 .hidden __mulsi3
008042fc g       *ABS*	00000000 __ram_rwdata_start
00804224 g       *ABS*	00000000 __ram_rodata_start
00802950 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00803ea0 g     F .text	000000d4 alt_get_fd
00804030 g     F .text	00000030 memcmp
00805278 g       *ABS*	00000000 __alt_stack_base
00801474 g     F .text	00000068 queue_dequeue
008031ac g     F .text	00000044 adc_interrupt_enable
00803d8c g     F .text	00000114 alt_find_file
008034bc g     F .text	000000a4 alt_dev_llist_insert
00802694 g     F .text	000000b0 sbrk
00801984 g     F .text	00000060 _calloc_r
00802380 g     F .text	000000b8 __sfvwrite_small_dev
0080514c g       *ABS*	00000000 __bss_start
00801964 g     F .text	00000020 memset
0080026c g     F .text	00000244 main
0080516c g     O .bss	00000004 alt_envp
008029b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00805154 g     O .bss	00000003 accel_data
00802e34 g     F .text	000000ac alt_adc_word_read
01000000 g       *ABS*	00000000 __alt_heap_limit
00801ac8 g     F .text	00000158 _malloc_r
00804a1c g     O .rwdata	00000004 alt_errno
00802438 g     F .text	00000054 putc
00801720 g     F .text	00000084 .hidden __divsi3
00804224 g       *ABS*	00000000 __flash_rodata_start
00801260 g     F .text	00000064 read_pixel_ram_int
008028cc g     F .text	00000038 alt_irq_init
00803ce4 g     F .text	00000084 alt_release_fd
008024e4 g     F .text	00000058 _write_r
008049f8 g     O .rwdata	00000004 _impure_ptr
00805164 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller
00800020 g       .exceptions	00000000 alt_irq_entry
00804a08 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00803610 g     F .text	00000050 alt_ic_isr_register
00804a24 g       *ABS*	00000000 _edata
00805278 g       *ABS*	00000000 _end
0080327c g     F .text	00000040 adc_interrupt_asserted
00800eb4 g     F .text	00000158 print_symmetry_dots_circle
00800230 g       *ABS*	00000000 __ram_exceptions_end
00803700 g     F .text	000000a4 alt_ic_irq_disable
00803238 g     F .text	00000044 adc_clear_interrupt_status
00804010 g     F .text	00000020 exit
008017a4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800914 g     F .text	000001a0 read_accelerometerZ
00802fec g     F .text	00000040 altera_modular_adc_open
008041f0 g     F .text	00000034 _exit
00801564 g     F .text	000001bc queue_print_screen
00801db0 g     F .text	0000001c strlen
008049ec g     O .rwdata	00000002 spi_command_tx
00803b84 g     F .text	00000160 open
00805158 g     O .bss	00000004 __malloc_sbrk_start
00803130 g     F .text	0000007c adc_recalibrate
008035f0 g     F .text	00000020 alt_icache_flush_all
00804a20 g     O .rwdata	00000004 alt_priority_mask
0080515c g     O .bss	00000004 __malloc_free_list
00803660 g     F .text	000000a0 alt_ic_irq_enable
0080100c g     F .text	0000015c print_empty_circle
00802364 g     F .text	0000001c __vfprintf_internal
008011dc g     F .text	00000084 clear_screen
008014dc g     F .text	00000088 queue_print
00803348 g     F .text	000000d8 close
008012c4 g     F .text	00000054 queue_init
00801318 g     F .text	0000015c queue_enqueue
00801168 g     F .text	00000074 print_circle
008025a4 g     F .text	00000084 alt_load
00802f54 g     F .text	00000098 alt_adc_register_callback
00801928 g     F .text	00000014 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08408c14 	ori	at,at,560
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802034 	movhi	r2,128
  800140:	10945e04 	addi	r2,r2,20856
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	10945e04 	addi	r2,r2,20856
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  8001e4:	00bfffc4 	movi	r2,-1
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  8001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f0:	d0a1e217 	ldw	r2,-30840(gp)
  8001f4:	10000726 	beq	r2,zero,800214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  8001f8:	d0a1e217 	ldw	r2,-30840(gp)
  8001fc:	e0fffd17 	ldw	r3,-12(fp)
  800200:	e1bffe17 	ldw	r6,-8(fp)
  800204:	e17fff17 	ldw	r5,-4(fp)
  800208:	1809883a 	mov	r4,r3
  80020c:	103ee83a 	callr	r2
  800210:	00000206 	br	80021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800218:	0005883a 	mov	r2,zero
}
  80021c:	e037883a 	mov	sp,fp
  800220:	dfc00117 	ldw	ra,4(sp)
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00204 	addi	sp,sp,8
  80022c:	f800283a 	ret

Disassembly of section .text:

00800230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800230:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800238:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80023c:	d6b27b14 	ori	gp,gp,51692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800240:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800244:	10945314 	ori	r2,r2,20812

    movhi r3, %hi(__bss_end)
  800248:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80024c:	18d49e14 	ori	r3,r3,21112

    beq r2, r3, 1f
  800250:	10c00326 	beq	r2,r3,800260 <_start+0x30>

0:
    stw zero, (r2)
  800254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80025c:	10fffd36 	bltu	r2,r3,800254 <__alt_data_end+0xff800254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800260:	08025a40 	call	8025a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800264:	08026280 	call	802628 <alt_main>

00800268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800268:	003fff06 	br	800268 <__alt_data_end+0xff800268>

0080026c <main>:


};*/

int main()
{
  80026c:	defe9d04 	addi	sp,sp,-1420
  800270:	dfc16215 	stw	ra,1416(sp)
  800274:	df016115 	stw	fp,1412(sp)
  800278:	df016104 	addi	fp,sp,1412
	enum sampling_state state = fast_sampling;
  80027c:	e03ea015 	stw	zero,-1408(fp)
	QUEUE q1,q2,q3,q4,q5;
	QUEUE* q11 = &q1;
  800280:	e0bea204 	addi	r2,fp,-1400
  800284:	e0bea115 	stw	r2,-1404(fp)
	SENSOR_OBJECT accelorometerX =
  800288:	009958f4 	movhi	r2,25955
  80028c:	1098d044 	addi	r2,r2,25409
  800290:	e0bfab15 	stw	r2,-340(fp)
  800294:	009bdcb4 	movhi	r2,28530
  800298:	10995b04 	addi	r2,r2,25964
  80029c:	e0bfac15 	stw	r2,-336(fp)
  8002a0:	00995d34 	movhi	r2,25972
  8002a4:	10995b44 	addi	r2,r2,25965
  8002a8:	e0bfad15 	stw	r2,-332(fp)
  8002ac:	00801e34 	movhi	r2,120
  8002b0:	10881c84 	addi	r2,r2,8306
  8002b4:	e0bfae15 	stw	r2,-328(fp)
  8002b8:	e0bfaf04 	addi	r2,fp,-324
  8002bc:	00c01004 	movi	r3,64
  8002c0:	180d883a 	mov	r6,r3
  8002c4:	000b883a 	mov	r5,zero
  8002c8:	1009883a 	mov	r4,r2
  8002cc:	08019640 	call	801964 <memset>
  8002d0:	00800c84 	movi	r2,50
  8002d4:	e0bfbf15 	stw	r2,-260(fp)
  8002d8:	00800c84 	movi	r2,50
  8002dc:	e0bfc015 	stw	r2,-256(fp)
  8002e0:	00800044 	movi	r2,1
  8002e4:	e0bfc115 	stw	r2,-252(fp)
  8002e8:	00800044 	movi	r2,1
  8002ec:	e0bfc215 	stw	r2,-248(fp)
  8002f0:	00800504 	movi	r2,20
  8002f4:	e0bfc315 	stw	r2,-244(fp)
  8002f8:	00800104 	movi	r2,4
  8002fc:	e0bfc415 	stw	r2,-240(fp)
  800300:	e0bfc504 	addi	r2,fp,-236
  800304:	e0fea204 	addi	r3,fp,-1400
  800308:	01003504 	movi	r4,212
  80030c:	200d883a 	mov	r6,r4
  800310:	180b883a 	mov	r5,r3
  800314:	1009883a 	mov	r4,r2
  800318:	080193c0 	call	80193c <memcpy>
  80031c:	e0bea117 	ldw	r2,-1404(fp)
  800320:	e0bffa15 	stw	r2,-24(fp)
  800324:	00802034 	movhi	r2,128
  800328:	10812c04 	addi	r2,r2,1200
  80032c:	e0bffb15 	stw	r2,-20(fp)
  800330:	00802034 	movhi	r2,128
  800334:	10813904 	addi	r2,r2,1252
  800338:	e0bffc15 	stw	r2,-16(fp)
  80033c:	00802034 	movhi	r2,128
  800340:	1081a304 	addi	r2,r2,1676
  800344:	e0bffd15 	stw	r2,-12(fp)
  800348:	00802034 	movhi	r2,128
  80034c:	10818004 	addi	r2,r2,1536
  800350:	e0bffe15 	stw	r2,-8(fp)
  800354:	e0bfab04 	addi	r2,fp,-340
  800358:	e0bfff15 	stw	r2,-4(fp)
			init_measurement,
			read_accelerometerX,
			update_graph,
			&accelorometerX
		};
	printf("Test for all components initiate!\n\n");
  80035c:	01002034 	movhi	r4,128
  800360:	21108904 	addi	r4,r4,16932
  800364:	0801d4c0 	call	801d4c <puts>
		for(i = 0; i < 78600; i++)
  800368:	d021d815 	stw	zero,-30880(gp)
  80036c:	00000b06 	br	80039c <main+0x130>
			set_address_pixel(i, 0);
  800370:	d0a1d817 	ldw	r2,-30880(gp)
  800374:	1085883a 	add	r2,r2,r2
  800378:	1085883a 	add	r2,r2,r2
  80037c:	1007883a 	mov	r3,r2
  800380:	00804034 	movhi	r2,256
  800384:	1885883a 	add	r2,r3,r2
  800388:	0007883a 	mov	r3,zero
  80038c:	10c00035 	stwio	r3,0(r2)
			read_accelerometerX,
			update_graph,
			&accelorometerX
		};
	printf("Test for all components initiate!\n\n");
		for(i = 0; i < 78600; i++)
  800390:	d0a1d817 	ldw	r2,-30880(gp)
  800394:	10800044 	addi	r2,r2,1
  800398:	d0a1d815 	stw	r2,-30880(gp)
  80039c:	d0e1d817 	ldw	r3,-30880(gp)
  8003a0:	00800074 	movhi	r2,1
  8003a4:	108cc1c4 	addi	r2,r2,13063
  8003a8:	10fff12e 	bgeu	r2,r3,800370 <__alt_data_end+0xff800370>
			set_address_pixel(i, 0);

		print_hline(0,120,320,6);
  8003ac:	01c00184 	movi	r7,6
  8003b0:	01805004 	movi	r6,320
  8003b4:	01401e04 	movi	r5,120
  8003b8:	0009883a 	mov	r4,zero
  8003bc:	0800b600 	call	800b60 <print_hline>
		print_vline(160,0,240,2);
  8003c0:	01c00084 	movi	r7,2
  8003c4:	01803c04 	movi	r6,240
  8003c8:	000b883a 	mov	r5,zero
  8003cc:	01002804 	movi	r4,160
  8003d0:	0800c300 	call	800c30 <print_vline>
		print_char(100,100,5,0,'A');
  8003d4:	00801044 	movi	r2,65
  8003d8:	d8800015 	stw	r2,0(sp)
  8003dc:	000f883a 	mov	r7,zero
  8003e0:	01800144 	movi	r6,5
  8003e4:	01401904 	movi	r5,100
  8003e8:	01001904 	movi	r4,100
  8003ec:	0800d000 	call	800d00 <print_char>
		print_char(200,100,5,0,'a');
  8003f0:	00801844 	movi	r2,97
  8003f4:	d8800015 	stw	r2,0(sp)
  8003f8:	000f883a 	mov	r7,zero
  8003fc:	01800144 	movi	r6,5
  800400:	01401904 	movi	r5,100
  800404:	01003204 	movi	r4,200
  800408:	0800d000 	call	800d00 <print_char>
		print_str(150,150,5,"Lasse Karagiannis");
  80040c:	01c02034 	movhi	r7,128
  800410:	39d09204 	addi	r7,r7,16968
  800414:	01800144 	movi	r6,5
  800418:	01402584 	movi	r5,150
  80041c:	01002584 	movi	r4,150
  800420:	0800e0c0 	call	800e0c <print_str>
		accelorometerX.reset_samples_vector(&accelorometerX);
  800424:	e0bffc17 	ldw	r2,-16(fp)
  800428:	e0ffab04 	addi	r3,fp,-340
  80042c:	1809883a 	mov	r4,r3
  800430:	103ee83a 	callr	r2
	/*	if(IORD_32DIRECT(KEY_INPUT_BASE,0) & 1<<1)
			state = fast_sampling;
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) & 1<<2)
			state = slow_sampling;*/

		switch(state){
  800434:	e0bea017 	ldw	r2,-1408(fp)
  800438:	10001c1e 	bne	r2,zero,8004ac <main+0x240>
		case fast_sampling:
			TIMER_RESET;
  80043c:	00d00034 	movhi	r3,16384
  800440:	00804234 	movhi	r2,264
  800444:	10849904 	addi	r2,r2,4708
  800448:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  80044c:	00e00034 	movhi	r3,32768
  800450:	00804234 	movhi	r2,264
  800454:	10849904 	addi	r2,r2,4708
  800458:	10c00035 	stwio	r3,0(r2)
			while(TIMER_READ < 50000000);
  80045c:	0001883a 	nop
  800460:	00804234 	movhi	r2,264
  800464:	10849804 	addi	r2,r2,4704
  800468:	10c00037 	ldwio	r3,0(r2)
  80046c:	0080bef4 	movhi	r2,763
  800470:	10bc1fc4 	addi	r2,r2,-3969
  800474:	10fffa0e 	bge	r2,r3,800460 <__alt_data_end+0xff800460>
			accelorometerX.configure_time_base(1,&accelorometerX);
  800478:	e0bffb17 	ldw	r2,-20(fp)
  80047c:	e0ffab04 	addi	r3,fp,-340
  800480:	180b883a 	mov	r5,r3
  800484:	01000044 	movi	r4,1
  800488:	103ee83a 	callr	r2
			accelorometerX.read_sensor(accelorometerX.q);
  80048c:	e0bffd17 	ldw	r2,-12(fp)
  800490:	e0fffa17 	ldw	r3,-24(fp)
  800494:	1809883a 	mov	r4,r3
  800498:	103ee83a 	callr	r2
			accelorometerX.update_graph(&accelorometerX);
  80049c:	e0bffe17 	ldw	r2,-8(fp)
  8004a0:	e0ffab04 	addi	r3,fp,-340
  8004a4:	1809883a 	mov	r4,r3
  8004a8:	103ee83a 	callr	r2
		}
	}
  8004ac:	003fe106 	br	800434 <__alt_data_end+0xff800434>

008004b0 <config_time_base>:
	}

	return 0;
}
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj){
  8004b0:	defffd04 	addi	sp,sp,-12
  8004b4:	df000215 	stw	fp,8(sp)
  8004b8:	df000204 	addi	fp,sp,8
  8004bc:	e13ffe15 	stw	r4,-8(fp)
  8004c0:	e17fff15 	stw	r5,-4(fp)
	 sensor_obj->time_base = time_base;
  8004c4:	e0bfff17 	ldw	r2,-4(fp)
  8004c8:	e0fffe17 	ldw	r3,-8(fp)
  8004cc:	10c01615 	stw	r3,88(r2)
}
  8004d0:	0001883a 	nop
  8004d4:	e037883a 	mov	sp,fp
  8004d8:	df000017 	ldw	fp,0(sp)
  8004dc:	dec00104 	addi	sp,sp,4
  8004e0:	f800283a 	ret

008004e4 <init_measurement>:
void init_measurement(SENSOR_OBJECT* sensor_obj){
  8004e4:	defffc04 	addi	sp,sp,-16
  8004e8:	dfc00315 	stw	ra,12(sp)
  8004ec:	df000215 	stw	fp,8(sp)
  8004f0:	df000204 	addi	fp,sp,8
  8004f4:	e13fff15 	stw	r4,-4(fp)
	queue_init(sensor_obj->q);
  8004f8:	e0bfff17 	ldw	r2,-4(fp)
  8004fc:	10804f17 	ldw	r2,316(r2)
  800500:	1009883a 	mov	r4,r2
  800504:	08012c40 	call	8012c4 <queue_init>
	print_hline(sensor_obj->x_origo,sensor_obj->y_origo,60,7);
  800508:	e0bfff17 	ldw	r2,-4(fp)
  80050c:	10c01417 	ldw	r3,80(r2)
  800510:	e0bfff17 	ldw	r2,-4(fp)
  800514:	10801517 	ldw	r2,84(r2)
  800518:	01c001c4 	movi	r7,7
  80051c:	01800f04 	movi	r6,60
  800520:	100b883a 	mov	r5,r2
  800524:	1809883a 	mov	r4,r3
  800528:	0800b600 	call	800b60 <print_hline>
	print_char(sensor_obj->x_origo +61,sensor_obj->y_origo,7,0,'>');
  80052c:	e0bfff17 	ldw	r2,-4(fp)
  800530:	10801417 	ldw	r2,80(r2)
  800534:	10c00f44 	addi	r3,r2,61
  800538:	e0bfff17 	ldw	r2,-4(fp)
  80053c:	11001517 	ldw	r4,84(r2)
  800540:	00800f84 	movi	r2,62
  800544:	d8800015 	stw	r2,0(sp)
  800548:	000f883a 	mov	r7,zero
  80054c:	018001c4 	movi	r6,7
  800550:	200b883a 	mov	r5,r4
  800554:	1809883a 	mov	r4,r3
  800558:	0800d000 	call	800d00 <print_char>
	print_vline(sensor_obj->x_origo-1,sensor_obj->y_origo -40,40,7);
  80055c:	e0bfff17 	ldw	r2,-4(fp)
  800560:	10801417 	ldw	r2,80(r2)
  800564:	10ffffc4 	addi	r3,r2,-1
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	10801517 	ldw	r2,84(r2)
  800570:	10bff604 	addi	r2,r2,-40
  800574:	01c001c4 	movi	r7,7
  800578:	01800a04 	movi	r6,40
  80057c:	100b883a 	mov	r5,r2
  800580:	1809883a 	mov	r4,r3
  800584:	0800c300 	call	800c30 <print_vline>
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
  800588:	e0bfff17 	ldw	r2,-4(fp)
  80058c:	10c01417 	ldw	r3,80(r2)
  800590:	e0bfff17 	ldw	r2,-4(fp)
  800594:	10801517 	ldw	r2,84(r2)
  800598:	113ff5c4 	addi	r4,r2,-41
  80059c:	00801784 	movi	r2,94
  8005a0:	d8800015 	stw	r2,0(sp)
  8005a4:	000f883a 	mov	r7,zero
  8005a8:	018001c4 	movi	r6,7
  8005ac:	200b883a 	mov	r5,r4
  8005b0:	1809883a 	mov	r4,r3
  8005b4:	0800d000 	call	800d00 <print_char>
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
  8005b8:	e0bfff17 	ldw	r2,-4(fp)
  8005bc:	10801417 	ldw	r2,80(r2)
  8005c0:	10c00284 	addi	r3,r2,10
  8005c4:	e0bfff17 	ldw	r2,-4(fp)
  8005c8:	10801517 	ldw	r2,84(r2)
  8005cc:	10800284 	addi	r2,r2,10
  8005d0:	e13fff17 	ldw	r4,-4(fp)
  8005d4:	200f883a 	mov	r7,r4
  8005d8:	018001c4 	movi	r6,7
  8005dc:	100b883a 	mov	r5,r2
  8005e0:	1809883a 	mov	r4,r3
  8005e4:	0800e0c0 	call	800e0c <print_str>
}
  8005e8:	0001883a 	nop
  8005ec:	e037883a 	mov	sp,fp
  8005f0:	dfc00117 	ldw	ra,4(sp)
  8005f4:	df000017 	ldw	fp,0(sp)
  8005f8:	dec00204 	addi	sp,sp,8
  8005fc:	f800283a 	ret

00800600 <update_graph>:
void update_graph(SENSOR_OBJECT* sensor_obj){
  800600:	defffb04 	addi	sp,sp,-20
  800604:	dfc00415 	stw	ra,16(sp)
  800608:	df000315 	stw	fp,12(sp)
  80060c:	df000304 	addi	fp,sp,12
  800610:	e13fff15 	stw	r4,-4(fp)
	queue_print(sensor_obj->q);
  800614:	e0bfff17 	ldw	r2,-4(fp)
  800618:	10804f17 	ldw	r2,316(r2)
  80061c:	1009883a 	mov	r4,r2
  800620:	08014dc0 	call	8014dc <queue_print>
	queue_print_screen(sensor_obj->q,
  800624:	e0bfff17 	ldw	r2,-4(fp)
  800628:	10c04f17 	ldw	r3,316(r2)
			sensor_obj->x_origo,
  80062c:	e0bfff17 	ldw	r2,-4(fp)
  800630:	10801417 	ldw	r2,80(r2)
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
	queue_print(sensor_obj->q);
	queue_print_screen(sensor_obj->q,
  800634:	100b883a 	mov	r5,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
  800638:	e0bfff17 	ldw	r2,-4(fp)
  80063c:	10801517 	ldw	r2,84(r2)
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
	queue_print(sensor_obj->q);
	queue_print_screen(sensor_obj->q,
  800640:	100d883a 	mov	r6,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
  800644:	e0bfff17 	ldw	r2,-4(fp)
  800648:	10801717 	ldw	r2,92(r2)
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
	queue_print(sensor_obj->q);
	queue_print_screen(sensor_obj->q,
  80064c:	100f883a 	mov	r7,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	10801817 	ldw	r2,96(r2)
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
	queue_print(sensor_obj->q);
	queue_print_screen(sensor_obj->q,
  800658:	1009883a 	mov	r4,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb);
  80065c:	e0bfff17 	ldw	r2,-4(fp)
  800660:	10801917 	ldw	r2,100(r2)
	print_char(sensor_obj->x_origo,sensor_obj->y_origo -41,7,0,'^');
	print_str(sensor_obj->x_origo +10, sensor_obj->y_origo +10,7,sensor_obj->description);
}
void update_graph(SENSOR_OBJECT* sensor_obj){
	queue_print(sensor_obj->q);
	queue_print_screen(sensor_obj->q,
  800664:	d8800115 	stw	r2,4(sp)
  800668:	d9000015 	stw	r4,0(sp)
  80066c:	1809883a 	mov	r4,r3
  800670:	08015640 	call	801564 <queue_print_screen>
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb);
}
  800674:	0001883a 	nop
  800678:	e037883a 	mov	sp,fp
  80067c:	dfc00117 	ldw	ra,4(sp)
  800680:	df000017 	ldw	fp,0(sp)
  800684:	dec00204 	addi	sp,sp,8
  800688:	f800283a 	ret

0080068c <read_accelerometerX>:
void read_accelerometerX(QUEUE *q)
{
  80068c:	defff604 	addi	sp,sp,-40
  800690:	dfc00915 	stw	ra,36(sp)
  800694:	df000815 	stw	fp,32(sp)
  800698:	df000804 	addi	fp,sp,32
  80069c:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  8006a0:	008002c4 	movi	r2,11
  8006a4:	e0bffcc5 	stb	r2,-13(fp)
  8006a8:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  8006ac:	008002c4 	movi	r2,11
  8006b0:	e0bffd45 	stb	r2,-11(fp)
  8006b4:	e03ffd85 	stb	zero,-10(fp)
  8006b8:	e03ffdc5 	stb	zero,-9(fp)
  8006bc:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  8006c0:	00800284 	movi	r2,10
  8006c4:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  8006c8:	00800b44 	movi	r2,45
  8006cc:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  8006d0:	00800084 	movi	r2,2
  8006d4:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  8006d8:	e0fffcc4 	addi	r3,fp,-13
  8006dc:	d8000215 	stw	zero,8(sp)
  8006e0:	e0bffd44 	addi	r2,fp,-11
  8006e4:	d8800115 	stw	r2,4(sp)
  8006e8:	d8000015 	stw	zero,0(sp)
  8006ec:	180f883a 	mov	r7,r3
  8006f0:	018000c4 	movi	r6,3
  8006f4:	000b883a 	mov	r5,zero
  8006f8:	01004234 	movhi	r4,264
  8006fc:	21048004 	addi	r4,r4,4608
  800700:	0802b900 	call	802b90 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800704:	008002c4 	movi	r2,11
  800708:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  80070c:	00800204 	movi	r2,8
  800710:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800714:	e0fffcc4 	addi	r3,fp,-13
  800718:	d8000215 	stw	zero,8(sp)
  80071c:	e0bffc04 	addi	r2,fp,-16
  800720:	d8800115 	stw	r2,4(sp)
  800724:	008000c4 	movi	r2,3
  800728:	d8800015 	stw	r2,0(sp)
  80072c:	180f883a 	mov	r7,r3
  800730:	01800084 	movi	r6,2
  800734:	000b883a 	mov	r5,zero
  800738:	01004234 	movhi	r4,264
  80073c:	21048004 	addi	r4,r4,4608
  800740:	0802b900 	call	802b90 <alt_avalon_spi_command>
								  2, spi_command_tx,
								  3, &accel_data,
								  0);

			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
  800744:	e0bffc03 	ldbu	r2,-16(fp)
  800748:	10803fcc 	andi	r2,r2,255
  80074c:	1080201c 	xori	r2,r2,128
  800750:	10bfe004 	addi	r2,r2,-128
  800754:	e0fffc43 	ldbu	r3,-15(fp)
  800758:	18c03fcc 	andi	r3,r3,255
  80075c:	18c0201c 	xori	r3,r3,128
  800760:	18ffe004 	addi	r3,r3,-128
  800764:	e13ffc83 	ldbu	r4,-14(fp)
  800768:	21003fcc 	andi	r4,r4,255
  80076c:	2100201c 	xori	r4,r4,128
  800770:	213fe004 	addi	r4,r4,-128
  800774:	200f883a 	mov	r7,r4
  800778:	180d883a 	mov	r6,r3
  80077c:	100b883a 	mov	r5,r2
  800780:	01002034 	movhi	r4,128
  800784:	21109704 	addi	r4,r4,16988
  800788:	0801c5c0 	call	801c5c <printf>


		alt_32 accel_x = 0;
  80078c:	e03ffb15 	stw	zero,-20(fp)
		accel_x = (alt_32)accel_data.x;
  800790:	e0bffc03 	ldbu	r2,-16(fp)
  800794:	10803fcc 	andi	r2,r2,255
  800798:	1080201c 	xori	r2,r2,128
  80079c:	10bfe004 	addi	r2,r2,-128
  8007a0:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_x))
  8007a4:	e17ffb17 	ldw	r5,-20(fp)
  8007a8:	e13fff17 	ldw	r4,-4(fp)
  8007ac:	08013180 	call	801318 <queue_enqueue>
  8007b0:	1000051e 	bne	r2,zero,8007c8 <read_accelerometerX+0x13c>
						;
				else{
					queue_dequeue(q);
  8007b4:	e13fff17 	ldw	r4,-4(fp)
  8007b8:	08014740 	call	801474 <queue_dequeue>
					queue_enqueue(q,accel_x);
  8007bc:	e17ffb17 	ldw	r5,-20(fp)
  8007c0:	e13fff17 	ldw	r4,-4(fp)
  8007c4:	08013180 	call	801318 <queue_enqueue>
				}
}
  8007c8:	0001883a 	nop
  8007cc:	e037883a 	mov	sp,fp
  8007d0:	dfc00117 	ldw	ra,4(sp)
  8007d4:	df000017 	ldw	fp,0(sp)
  8007d8:	dec00204 	addi	sp,sp,8
  8007dc:	f800283a 	ret

008007e0 <read_accelerometerY>:

void read_accelerometerY(QUEUE *q)
{
  8007e0:	defff704 	addi	sp,sp,-36
  8007e4:	dfc00815 	stw	ra,32(sp)
  8007e8:	df000715 	stw	fp,28(sp)
  8007ec:	df000704 	addi	fp,sp,28
  8007f0:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  8007f4:	008002c4 	movi	r2,11
  8007f8:	e0bffcc5 	stb	r2,-13(fp)
  8007fc:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800800:	008002c4 	movi	r2,11
  800804:	e0bffd45 	stb	r2,-11(fp)
  800808:	e03ffd85 	stb	zero,-10(fp)
  80080c:	e03ffdc5 	stb	zero,-9(fp)
  800810:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800814:	00800284 	movi	r2,10
  800818:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  80081c:	00800b44 	movi	r2,45
  800820:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800824:	00800084 	movi	r2,2
  800828:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  80082c:	e0fffcc4 	addi	r3,fp,-13
  800830:	d8000215 	stw	zero,8(sp)
  800834:	e0bffd44 	addi	r2,fp,-11
  800838:	d8800115 	stw	r2,4(sp)
  80083c:	d8000015 	stw	zero,0(sp)
  800840:	180f883a 	mov	r7,r3
  800844:	018000c4 	movi	r6,3
  800848:	000b883a 	mov	r5,zero
  80084c:	01004234 	movhi	r4,264
  800850:	21048004 	addi	r4,r4,4608
  800854:	0802b900 	call	802b90 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800858:	008002c4 	movi	r2,11
  80085c:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800860:	00800204 	movi	r2,8
  800864:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800868:	e0fffcc4 	addi	r3,fp,-13
  80086c:	d8000215 	stw	zero,8(sp)
  800870:	e0bffc04 	addi	r2,fp,-16
  800874:	d8800115 	stw	r2,4(sp)
  800878:	008000c4 	movi	r2,3
  80087c:	d8800015 	stw	r2,0(sp)
  800880:	180f883a 	mov	r7,r3
  800884:	01800084 	movi	r6,2
  800888:	000b883a 	mov	r5,zero
  80088c:	01004234 	movhi	r4,264
  800890:	21048004 	addi	r4,r4,4608
  800894:	0802b900 	call	802b90 <alt_avalon_spi_command>
								  2, spi_command_tx,
								  3, &accel_data,
								  0);

			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
  800898:	e0bffc03 	ldbu	r2,-16(fp)
  80089c:	10803fcc 	andi	r2,r2,255
  8008a0:	1080201c 	xori	r2,r2,128
  8008a4:	10bfe004 	addi	r2,r2,-128
  8008a8:	e0fffc43 	ldbu	r3,-15(fp)
  8008ac:	18c03fcc 	andi	r3,r3,255
  8008b0:	18c0201c 	xori	r3,r3,128
  8008b4:	18ffe004 	addi	r3,r3,-128
  8008b8:	e13ffc83 	ldbu	r4,-14(fp)
  8008bc:	21003fcc 	andi	r4,r4,255
  8008c0:	2100201c 	xori	r4,r4,128
  8008c4:	213fe004 	addi	r4,r4,-128
  8008c8:	200f883a 	mov	r7,r4
  8008cc:	180d883a 	mov	r6,r3
  8008d0:	100b883a 	mov	r5,r2
  8008d4:	01002034 	movhi	r4,128
  8008d8:	21109704 	addi	r4,r4,16988
  8008dc:	0801c5c0 	call	801c5c <printf>


		queue_enqueue(q,accel_data.x);
  8008e0:	e0bffc03 	ldbu	r2,-16(fp)
  8008e4:	10803fcc 	andi	r2,r2,255
  8008e8:	1080201c 	xori	r2,r2,128
  8008ec:	10bfe004 	addi	r2,r2,-128
  8008f0:	100b883a 	mov	r5,r2
  8008f4:	e13fff17 	ldw	r4,-4(fp)
  8008f8:	08013180 	call	801318 <queue_enqueue>
}
  8008fc:	0001883a 	nop
  800900:	e037883a 	mov	sp,fp
  800904:	dfc00117 	ldw	ra,4(sp)
  800908:	df000017 	ldw	fp,0(sp)
  80090c:	dec00204 	addi	sp,sp,8
  800910:	f800283a 	ret

00800914 <read_accelerometerZ>:

void read_accelerometerZ(QUEUE *q)
{
  800914:	defff704 	addi	sp,sp,-36
  800918:	dfc00815 	stw	ra,32(sp)
  80091c:	df000715 	stw	fp,28(sp)
  800920:	df000704 	addi	fp,sp,28
  800924:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  800928:	008002c4 	movi	r2,11
  80092c:	e0bffcc5 	stb	r2,-13(fp)
  800930:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800934:	008002c4 	movi	r2,11
  800938:	e0bffd45 	stb	r2,-11(fp)
  80093c:	e03ffd85 	stb	zero,-10(fp)
  800940:	e03ffdc5 	stb	zero,-9(fp)
  800944:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800948:	00800284 	movi	r2,10
  80094c:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  800950:	00800b44 	movi	r2,45
  800954:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800958:	00800084 	movi	r2,2
  80095c:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800960:	e0fffcc4 	addi	r3,fp,-13
  800964:	d8000215 	stw	zero,8(sp)
  800968:	e0bffd44 	addi	r2,fp,-11
  80096c:	d8800115 	stw	r2,4(sp)
  800970:	d8000015 	stw	zero,0(sp)
  800974:	180f883a 	mov	r7,r3
  800978:	018000c4 	movi	r6,3
  80097c:	000b883a 	mov	r5,zero
  800980:	01004234 	movhi	r4,264
  800984:	21048004 	addi	r4,r4,4608
  800988:	0802b900 	call	802b90 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  80098c:	008002c4 	movi	r2,11
  800990:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800994:	00800204 	movi	r2,8
  800998:	e0bffd05 	stb	r2,-12(fp)

		for(i = 0; i < 5; i++)
  80099c:	d021d815 	stw	zero,-30880(gp)
  8009a0:	00002a06 	br	800a4c <read_accelerometerZ+0x138>
		{
			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  8009a4:	e0fffcc4 	addi	r3,fp,-13
  8009a8:	d8000215 	stw	zero,8(sp)
  8009ac:	e0bffc04 	addi	r2,fp,-16
  8009b0:	d8800115 	stw	r2,4(sp)
  8009b4:	008000c4 	movi	r2,3
  8009b8:	d8800015 	stw	r2,0(sp)
  8009bc:	180f883a 	mov	r7,r3
  8009c0:	01800084 	movi	r6,2
  8009c4:	000b883a 	mov	r5,zero
  8009c8:	01004234 	movhi	r4,264
  8009cc:	21048004 	addi	r4,r4,4608
  8009d0:	0802b900 	call	802b90 <alt_avalon_spi_command>
								  2, spi_command_tx,
								  3, &accel_data,
								  0);

			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
  8009d4:	e0bffc03 	ldbu	r2,-16(fp)
  8009d8:	10803fcc 	andi	r2,r2,255
  8009dc:	1080201c 	xori	r2,r2,128
  8009e0:	10bfe004 	addi	r2,r2,-128
  8009e4:	e0fffc43 	ldbu	r3,-15(fp)
  8009e8:	18c03fcc 	andi	r3,r3,255
  8009ec:	18c0201c 	xori	r3,r3,128
  8009f0:	18ffe004 	addi	r3,r3,-128
  8009f4:	e13ffc83 	ldbu	r4,-14(fp)
  8009f8:	21003fcc 	andi	r4,r4,255
  8009fc:	2100201c 	xori	r4,r4,128
  800a00:	213fe004 	addi	r4,r4,-128
  800a04:	200f883a 	mov	r7,r4
  800a08:	180d883a 	mov	r6,r3
  800a0c:	100b883a 	mov	r5,r2
  800a10:	01002034 	movhi	r4,128
  800a14:	21109704 	addi	r4,r4,16988
  800a18:	0801c5c0 	call	801c5c <printf>
			for(j = 0; j < 200000; j++);
  800a1c:	d021d915 	stw	zero,-30876(gp)
  800a20:	00000306 	br	800a30 <read_accelerometerZ+0x11c>
  800a24:	d0a1d917 	ldw	r2,-30876(gp)
  800a28:	10800044 	addi	r2,r2,1
  800a2c:	d0a1d915 	stw	r2,-30876(gp)
  800a30:	d0e1d917 	ldw	r3,-30876(gp)
  800a34:	008000f4 	movhi	r2,3
  800a38:	10834fc4 	addi	r2,r2,3391
  800a3c:	10fff92e 	bgeu	r2,r3,800a24 <__alt_data_end+0xff800a24>
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers

		for(i = 0; i < 5; i++)
  800a40:	d0a1d817 	ldw	r2,-30880(gp)
  800a44:	10800044 	addi	r2,r2,1
  800a48:	d0a1d815 	stw	r2,-30880(gp)
  800a4c:	d0a1d817 	ldw	r2,-30880(gp)
  800a50:	10800170 	cmpltui	r2,r2,5
  800a54:	103fd31e 	bne	r2,zero,8009a4 <__alt_data_end+0xff8009a4>

			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
			for(j = 0; j < 200000; j++);
		}

		if(queue_enqueue(q,accel_data.z))
  800a58:	e0bffc83 	ldbu	r2,-14(fp)
  800a5c:	10803fcc 	andi	r2,r2,255
  800a60:	1080201c 	xori	r2,r2,128
  800a64:	10bfe004 	addi	r2,r2,-128
  800a68:	100b883a 	mov	r5,r2
  800a6c:	e13fff17 	ldw	r4,-4(fp)
  800a70:	08013180 	call	801318 <queue_enqueue>
  800a74:	1000091e 	bne	r2,zero,800a9c <read_accelerometerZ+0x188>
				;
		else{
			queue_dequeue(q);
  800a78:	e13fff17 	ldw	r4,-4(fp)
  800a7c:	08014740 	call	801474 <queue_dequeue>
			queue_enqueue(q,accel_data.z);
  800a80:	e0bffc83 	ldbu	r2,-14(fp)
  800a84:	10803fcc 	andi	r2,r2,255
  800a88:	1080201c 	xori	r2,r2,128
  800a8c:	10bfe004 	addi	r2,r2,-128
  800a90:	100b883a 	mov	r5,r2
  800a94:	e13fff17 	ldw	r4,-4(fp)
  800a98:	08013180 	call	801318 <queue_enqueue>
		}
}
  800a9c:	0001883a 	nop
  800aa0:	e037883a 	mov	sp,fp
  800aa4:	dfc00117 	ldw	ra,4(sp)
  800aa8:	df000017 	ldw	fp,0(sp)
  800aac:	dec00204 	addi	sp,sp,8
  800ab0:	f800283a 	ret

00800ab4 <print_pix>:


/*************************************************/

void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
  800ab4:	defffb04 	addi	sp,sp,-20
  800ab8:	dfc00415 	stw	ra,16(sp)
  800abc:	df000315 	stw	fp,12(sp)
  800ac0:	df000304 	addi	fp,sp,12
  800ac4:	e13ffd15 	stw	r4,-12(fp)
  800ac8:	e17ffe15 	stw	r5,-8(fp)
  800acc:	e1bfff15 	stw	r6,-4(fp)
	if(rgb <= 7 && rgb >= 0)
  800ad0:	e0bfff17 	ldw	r2,-4(fp)
  800ad4:	10800228 	cmpgeui	r2,r2,8
  800ad8:	10000e1e 	bne	r2,zero,800b14 <print_pix+0x60>
		set_pixel(x,y,rgb);
  800adc:	01405004 	movi	r5,320
  800ae0:	e13ffe17 	ldw	r4,-8(fp)
  800ae4:	08018d40 	call	8018d4 <__mulsi3>
  800ae8:	1007883a 	mov	r3,r2
  800aec:	e0bffd17 	ldw	r2,-12(fp)
  800af0:	1885883a 	add	r2,r3,r2
  800af4:	1085883a 	add	r2,r2,r2
  800af8:	1085883a 	add	r2,r2,r2
  800afc:	1007883a 	mov	r3,r2
  800b00:	00804034 	movhi	r2,256
  800b04:	1885883a 	add	r2,r3,r2
  800b08:	e0ffff17 	ldw	r3,-4(fp)
  800b0c:	10c00035 	stwio	r3,0(r2)
	else
		set_pixel(x,y,0);
}
  800b10:	00000d06 	br	800b48 <print_pix+0x94>
void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
	if(rgb <= 7 && rgb >= 0)
		set_pixel(x,y,rgb);
	else
		set_pixel(x,y,0);
  800b14:	01405004 	movi	r5,320
  800b18:	e13ffe17 	ldw	r4,-8(fp)
  800b1c:	08018d40 	call	8018d4 <__mulsi3>
  800b20:	1007883a 	mov	r3,r2
  800b24:	e0bffd17 	ldw	r2,-12(fp)
  800b28:	1885883a 	add	r2,r3,r2
  800b2c:	1085883a 	add	r2,r2,r2
  800b30:	1085883a 	add	r2,r2,r2
  800b34:	1007883a 	mov	r3,r2
  800b38:	00804034 	movhi	r2,256
  800b3c:	1885883a 	add	r2,r3,r2
  800b40:	0007883a 	mov	r3,zero
  800b44:	10c00035 	stwio	r3,0(r2)
}
  800b48:	0001883a 	nop
  800b4c:	e037883a 	mov	sp,fp
  800b50:	dfc00117 	ldw	ra,4(sp)
  800b54:	df000017 	ldw	fp,0(sp)
  800b58:	dec00204 	addi	sp,sp,8
  800b5c:	f800283a 	ret

00800b60 <print_hline>:
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){
  800b60:	defff804 	addi	sp,sp,-32
  800b64:	dfc00715 	stw	ra,28(sp)
  800b68:	df000615 	stw	fp,24(sp)
  800b6c:	df000604 	addi	fp,sp,24
  800b70:	e13ffc15 	stw	r4,-16(fp)
  800b74:	e17ffd15 	stw	r5,-12(fp)
  800b78:	e1bffe15 	stw	r6,-8(fp)
  800b7c:	e1ffff15 	stw	r7,-4(fp)



	if(x_start + len <= 320){
  800b80:	e0fffc17 	ldw	r3,-16(fp)
  800b84:	e0bffe17 	ldw	r2,-8(fp)
  800b88:	1885883a 	add	r2,r3,r2
  800b8c:	10805068 	cmpgeui	r2,r2,321
  800b90:	1000101e 	bne	r2,zero,800bd4 <print_hline+0x74>
		for(int i = 0; i < len; i++){
  800b94:	e03ffa15 	stw	zero,-24(fp)
  800b98:	00000a06 	br	800bc4 <print_hline+0x64>
			print_pix(x_start + i,y_start, RGB);
  800b9c:	e0fffa17 	ldw	r3,-24(fp)
  800ba0:	e0bffc17 	ldw	r2,-16(fp)
  800ba4:	1885883a 	add	r2,r3,r2
  800ba8:	e1bfff17 	ldw	r6,-4(fp)
  800bac:	e17ffd17 	ldw	r5,-12(fp)
  800bb0:	1009883a 	mov	r4,r2
  800bb4:	0800ab40 	call	800ab4 <print_pix>
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){



	if(x_start + len <= 320){
		for(int i = 0; i < len; i++){
  800bb8:	e0bffa17 	ldw	r2,-24(fp)
  800bbc:	10800044 	addi	r2,r2,1
  800bc0:	e0bffa15 	stw	r2,-24(fp)
  800bc4:	e0fffa17 	ldw	r3,-24(fp)
  800bc8:	e0bffe17 	ldw	r2,-8(fp)
  800bcc:	18bff336 	bltu	r3,r2,800b9c <__alt_data_end+0xff800b9c>
		for(int i = 0; i < (320-x_start); i++){
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800bd0:	00001106 	br	800c18 <print_hline+0xb8>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800bd4:	e03ffb15 	stw	zero,-20(fp)
  800bd8:	00000a06 	br	800c04 <print_hline+0xa4>
					print_pix(x_start + i,y_start, RGB);
  800bdc:	e0fffb17 	ldw	r3,-20(fp)
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	1885883a 	add	r2,r3,r2
  800be8:	e1bfff17 	ldw	r6,-4(fp)
  800bec:	e17ffd17 	ldw	r5,-12(fp)
  800bf0:	1009883a 	mov	r4,r2
  800bf4:	0800ab40 	call	800ab4 <print_pix>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800bf8:	e0bffb17 	ldw	r2,-20(fp)
  800bfc:	10800044 	addi	r2,r2,1
  800c00:	e0bffb15 	stw	r2,-20(fp)
  800c04:	00c05004 	movi	r3,320
  800c08:	e0bffc17 	ldw	r2,-16(fp)
  800c0c:	1885c83a 	sub	r2,r3,r2
  800c10:	e0fffb17 	ldw	r3,-20(fp)
  800c14:	18bff136 	bltu	r3,r2,800bdc <__alt_data_end+0xff800bdc>
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800c18:	0001883a 	nop
  800c1c:	e037883a 	mov	sp,fp
  800c20:	dfc00117 	ldw	ra,4(sp)
  800c24:	df000017 	ldw	fp,0(sp)
  800c28:	dec00204 	addi	sp,sp,8
  800c2c:	f800283a 	ret

00800c30 <print_vline>:
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
  800c30:	defff804 	addi	sp,sp,-32
  800c34:	dfc00715 	stw	ra,28(sp)
  800c38:	df000615 	stw	fp,24(sp)
  800c3c:	df000604 	addi	fp,sp,24
  800c40:	e13ffc15 	stw	r4,-16(fp)
  800c44:	e17ffd15 	stw	r5,-12(fp)
  800c48:	e1bffe15 	stw	r6,-8(fp)
  800c4c:	e1ffff15 	stw	r7,-4(fp)
	if(y_start + len <= 240){
  800c50:	e0fffd17 	ldw	r3,-12(fp)
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	1885883a 	add	r2,r3,r2
  800c5c:	10803c68 	cmpgeui	r2,r2,241
  800c60:	1000101e 	bne	r2,zero,800ca4 <print_vline+0x74>
			for(int i = 0; i < len; i++){
  800c64:	e03ffa15 	stw	zero,-24(fp)
  800c68:	00000a06 	br	800c94 <print_vline+0x64>
				print_pix(x_start,y_start + i, RGB);
  800c6c:	e0fffa17 	ldw	r3,-24(fp)
  800c70:	e0bffd17 	ldw	r2,-12(fp)
  800c74:	1885883a 	add	r2,r3,r2
  800c78:	e1bfff17 	ldw	r6,-4(fp)
  800c7c:	100b883a 	mov	r5,r2
  800c80:	e13ffc17 	ldw	r4,-16(fp)
  800c84:	0800ab40 	call	800ab4 <print_pix>

}
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
	if(y_start + len <= 240){
			for(int i = 0; i < len; i++){
  800c88:	e0bffa17 	ldw	r2,-24(fp)
  800c8c:	10800044 	addi	r2,r2,1
  800c90:	e0bffa15 	stw	r2,-24(fp)
  800c94:	e0fffa17 	ldw	r3,-24(fp)
  800c98:	e0bffe17 	ldw	r2,-8(fp)
  800c9c:	18bff336 	bltu	r3,r2,800c6c <__alt_data_end+0xff800c6c>

			for(int i = 0; i < (240-y_start); i++){
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  800ca0:	00001106 	br	800ce8 <print_vline+0xb8>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  800ca4:	e03ffb15 	stw	zero,-20(fp)
  800ca8:	00000a06 	br	800cd4 <print_vline+0xa4>
						print_pix(x_start,y_start +i , RGB);
  800cac:	e0fffb17 	ldw	r3,-20(fp)
  800cb0:	e0bffd17 	ldw	r2,-12(fp)
  800cb4:	1885883a 	add	r2,r3,r2
  800cb8:	e1bfff17 	ldw	r6,-4(fp)
  800cbc:	100b883a 	mov	r5,r2
  800cc0:	e13ffc17 	ldw	r4,-16(fp)
  800cc4:	0800ab40 	call	800ab4 <print_pix>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  800cc8:	e0bffb17 	ldw	r2,-20(fp)
  800ccc:	10800044 	addi	r2,r2,1
  800cd0:	e0bffb15 	stw	r2,-20(fp)
  800cd4:	00c03c04 	movi	r3,240
  800cd8:	e0bffd17 	ldw	r2,-12(fp)
  800cdc:	1885c83a 	sub	r2,r3,r2
  800ce0:	e0fffb17 	ldw	r3,-20(fp)
  800ce4:	18bff136 	bltu	r3,r2,800cac <__alt_data_end+0xff800cac>
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  800ce8:	0001883a 	nop
  800cec:	e037883a 	mov	sp,fp
  800cf0:	dfc00117 	ldw	ra,4(sp)
  800cf4:	df000017 	ldw	fp,0(sp)
  800cf8:	dec00204 	addi	sp,sp,8
  800cfc:	f800283a 	ret

00800d00 <print_char>:

void  print_char(alt_u32 x,alt_u32 y,alt_u32 rgb,alt_u32 BG_RGB,char Character)
{
  800d00:	defff604 	addi	sp,sp,-40
  800d04:	dfc00915 	stw	ra,36(sp)
  800d08:	df000815 	stw	fp,32(sp)
  800d0c:	df000804 	addi	fp,sp,32
  800d10:	e13ffb15 	stw	r4,-20(fp)
  800d14:	e17ffc15 	stw	r5,-16(fp)
  800d18:	e1bffd15 	stw	r6,-12(fp)
  800d1c:	e1fffe15 	stw	r7,-8(fp)
  800d20:	e0800217 	ldw	r2,8(fp)
  800d24:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
  800d28:	e0bfff03 	ldbu	r2,-4(fp)
  800d2c:	e0bffa05 	stb	r2,-24(fp)
	for (row = 0; row <8; row++)
  800d30:	e03ff815 	stw	zero,-32(fp)
  800d34:	00002c06 	br	800de8 <print_char+0xe8>
	{
			temp =  (alt_8)font8x8_basic[token][row];
  800d38:	e0fffa03 	ldbu	r3,-24(fp)
  800d3c:	00802034 	movhi	r2,128
  800d40:	1090bf04 	addi	r2,r2,17148
  800d44:	180690fa 	slli	r3,r3,3
  800d48:	10c7883a 	add	r3,r2,r3
  800d4c:	e0bff817 	ldw	r2,-32(fp)
  800d50:	1885883a 	add	r2,r3,r2
  800d54:	10800003 	ldbu	r2,0(r2)
  800d58:	e0bffa45 	stb	r2,-23(fp)

			for (int pos = 0 ; pos != 8 ; pos++) {
  800d5c:	e03ff915 	stw	zero,-28(fp)
  800d60:	00001b06 	br	800dd0 <print_char+0xd0>
			    if (temp & (1 << pos)) {
  800d64:	e0fffa43 	ldbu	r3,-23(fp)
  800d68:	e0bff917 	ldw	r2,-28(fp)
  800d6c:	1885d83a 	sra	r2,r3,r2
  800d70:	1080004c 	andi	r2,r2,1
  800d74:	10000a26 	beq	r2,zero,800da0 <print_char+0xa0>
			        // Current bit is set to 1
			    	print_pix(x+pos,y+row,rgb);
  800d78:	e0fff917 	ldw	r3,-28(fp)
  800d7c:	e0bffb17 	ldw	r2,-20(fp)
  800d80:	1889883a 	add	r4,r3,r2
  800d84:	e0fff817 	ldw	r3,-32(fp)
  800d88:	e0bffc17 	ldw	r2,-16(fp)
  800d8c:	1885883a 	add	r2,r3,r2
  800d90:	e1bffd17 	ldw	r6,-12(fp)
  800d94:	100b883a 	mov	r5,r2
  800d98:	0800ab40 	call	800ab4 <print_pix>
  800d9c:	00000906 	br	800dc4 <print_char+0xc4>
			    } else {
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
  800da0:	e0fff917 	ldw	r3,-28(fp)
  800da4:	e0bffb17 	ldw	r2,-20(fp)
  800da8:	1889883a 	add	r4,r3,r2
  800dac:	e0fff817 	ldw	r3,-32(fp)
  800db0:	e0bffc17 	ldw	r2,-16(fp)
  800db4:	1885883a 	add	r2,r3,r2
  800db8:	e1bffe17 	ldw	r6,-8(fp)
  800dbc:	100b883a 	mov	r5,r2
  800dc0:	0800ab40 	call	800ab4 <print_pix>
	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
	{
			temp =  (alt_8)font8x8_basic[token][row];

			for (int pos = 0 ; pos != 8 ; pos++) {
  800dc4:	e0bff917 	ldw	r2,-28(fp)
  800dc8:	10800044 	addi	r2,r2,1
  800dcc:	e0bff915 	stw	r2,-28(fp)
  800dd0:	e0bff917 	ldw	r2,-28(fp)
  800dd4:	10800218 	cmpnei	r2,r2,8
  800dd8:	103fe21e 	bne	r2,zero,800d64 <__alt_data_end+0xff800d64>
{
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
  800ddc:	e0bff817 	ldw	r2,-32(fp)
  800de0:	10800044 	addi	r2,r2,1
  800de4:	e0bff815 	stw	r2,-32(fp)
  800de8:	e0bff817 	ldw	r2,-32(fp)
  800dec:	10800210 	cmplti	r2,r2,8
  800df0:	103fd11e 	bne	r2,zero,800d38 <__alt_data_end+0xff800d38>
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
			    }
			}
	}
}
  800df4:	0001883a 	nop
  800df8:	e037883a 	mov	sp,fp
  800dfc:	dfc00117 	ldw	ra,4(sp)
  800e00:	df000017 	ldw	fp,0(sp)
  800e04:	dec00204 	addi	sp,sp,8
  800e08:	f800283a 	ret

00800e0c <print_str>:
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
  800e0c:	defff804 	addi	sp,sp,-32
  800e10:	dfc00715 	stw	ra,28(sp)
  800e14:	df000615 	stw	fp,24(sp)
  800e18:	df000604 	addi	fp,sp,24
  800e1c:	e13ffc15 	stw	r4,-16(fp)
  800e20:	e17ffd15 	stw	r5,-12(fp)
  800e24:	e1bffe15 	stw	r6,-8(fp)
  800e28:	e1ffff15 	stw	r7,-4(fp)
	alt_u16 len = (alt_u16) strlen(str);
  800e2c:	e13fff17 	ldw	r4,-4(fp)
  800e30:	0801db00 	call	801db0 <strlen>
  800e34:	e0bffb8d 	sth	r2,-18(fp)
	alt_u16 i;
	for(i=0; i< len; i++){
  800e38:	e03ffb0d 	sth	zero,-20(fp)
  800e3c:	00001406 	br	800e90 <print_str+0x84>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
  800e40:	e0bffb0b 	ldhu	r2,-20(fp)
  800e44:	100490fa 	slli	r2,r2,3
  800e48:	1007883a 	mov	r3,r2
  800e4c:	e0bffc17 	ldw	r2,-16(fp)
  800e50:	1889883a 	add	r4,r3,r2
  800e54:	e0bffb0b 	ldhu	r2,-20(fp)
  800e58:	e0ffff17 	ldw	r3,-4(fp)
  800e5c:	1885883a 	add	r2,r3,r2
  800e60:	10800003 	ldbu	r2,0(r2)
  800e64:	10803fcc 	andi	r2,r2,255
  800e68:	1080201c 	xori	r2,r2,128
  800e6c:	10bfe004 	addi	r2,r2,-128
  800e70:	d8800015 	stw	r2,0(sp)
  800e74:	000f883a 	mov	r7,zero
  800e78:	e1bffe17 	ldw	r6,-8(fp)
  800e7c:	e17ffd17 	ldw	r5,-12(fp)
  800e80:	0800d000 	call	800d00 <print_char>
}
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
	alt_u16 len = (alt_u16) strlen(str);
	alt_u16 i;
	for(i=0; i< len; i++){
  800e84:	e0bffb0b 	ldhu	r2,-20(fp)
  800e88:	10800044 	addi	r2,r2,1
  800e8c:	e0bffb0d 	sth	r2,-20(fp)
  800e90:	e0fffb0b 	ldhu	r3,-20(fp)
  800e94:	e0bffb8b 	ldhu	r2,-18(fp)
  800e98:	18bfe936 	bltu	r3,r2,800e40 <__alt_data_end+0xff800e40>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
	}
}
  800e9c:	0001883a 	nop
  800ea0:	e037883a 	mov	sp,fp
  800ea4:	dfc00117 	ldw	ra,4(sp)
  800ea8:	df000017 	ldw	fp,0(sp)
  800eac:	dec00204 	addi	sp,sp,8
  800eb0:	f800283a 	ret

00800eb4 <print_symmetry_dots_circle>:

void print_symmetry_dots_circle(alt_u32 x, alt_u32 y, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  800eb4:	defffa04 	addi	sp,sp,-24
  800eb8:	dfc00515 	stw	ra,20(sp)
  800ebc:	df000415 	stw	fp,16(sp)
  800ec0:	df000404 	addi	fp,sp,16
  800ec4:	e13ffc15 	stw	r4,-16(fp)
  800ec8:	e17ffd15 	stw	r5,-12(fp)
  800ecc:	e1bffe15 	stw	r6,-8(fp)
  800ed0:	e1ffff15 	stw	r7,-4(fp)
		print_pix(x+x_centrum,y + y_centrum,rgb);
  800ed4:	e0fffc17 	ldw	r3,-16(fp)
  800ed8:	e0bffe17 	ldw	r2,-8(fp)
  800edc:	1889883a 	add	r4,r3,r2
  800ee0:	e0fffd17 	ldw	r3,-12(fp)
  800ee4:	e0bfff17 	ldw	r2,-4(fp)
  800ee8:	1885883a 	add	r2,r3,r2
  800eec:	e1800217 	ldw	r6,8(fp)
  800ef0:	100b883a 	mov	r5,r2
  800ef4:	0800ab40 	call	800ab4 <print_pix>
		print_pix(x+x_centrum,-y + y_centrum,rgb);
  800ef8:	e0fffc17 	ldw	r3,-16(fp)
  800efc:	e0bffe17 	ldw	r2,-8(fp)
  800f00:	1889883a 	add	r4,r3,r2
  800f04:	e0ffff17 	ldw	r3,-4(fp)
  800f08:	e0bffd17 	ldw	r2,-12(fp)
  800f0c:	1885c83a 	sub	r2,r3,r2
  800f10:	e1800217 	ldw	r6,8(fp)
  800f14:	100b883a 	mov	r5,r2
  800f18:	0800ab40 	call	800ab4 <print_pix>
		print_pix(-x+x_centrum,y + y_centrum,rgb);
  800f1c:	e0fffe17 	ldw	r3,-8(fp)
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	1889c83a 	sub	r4,r3,r2
  800f28:	e0fffd17 	ldw	r3,-12(fp)
  800f2c:	e0bfff17 	ldw	r2,-4(fp)
  800f30:	1885883a 	add	r2,r3,r2
  800f34:	e1800217 	ldw	r6,8(fp)
  800f38:	100b883a 	mov	r5,r2
  800f3c:	0800ab40 	call	800ab4 <print_pix>
		print_pix(-x+x_centrum,-y + y_centrum,rgb);
  800f40:	e0fffe17 	ldw	r3,-8(fp)
  800f44:	e0bffc17 	ldw	r2,-16(fp)
  800f48:	1889c83a 	sub	r4,r3,r2
  800f4c:	e0ffff17 	ldw	r3,-4(fp)
  800f50:	e0bffd17 	ldw	r2,-12(fp)
  800f54:	1885c83a 	sub	r2,r3,r2
  800f58:	e1800217 	ldw	r6,8(fp)
  800f5c:	100b883a 	mov	r5,r2
  800f60:	0800ab40 	call	800ab4 <print_pix>

		print_pix(y + y_centrum,x+x_centrum,rgb);
  800f64:	e0fffd17 	ldw	r3,-12(fp)
  800f68:	e0bfff17 	ldw	r2,-4(fp)
  800f6c:	1889883a 	add	r4,r3,r2
  800f70:	e0fffc17 	ldw	r3,-16(fp)
  800f74:	e0bffe17 	ldw	r2,-8(fp)
  800f78:	1885883a 	add	r2,r3,r2
  800f7c:	e1800217 	ldw	r6,8(fp)
  800f80:	100b883a 	mov	r5,r2
  800f84:	0800ab40 	call	800ab4 <print_pix>
		print_pix(-y + y_centrum,x+x_centrum,rgb);
  800f88:	e0ffff17 	ldw	r3,-4(fp)
  800f8c:	e0bffd17 	ldw	r2,-12(fp)
  800f90:	1889c83a 	sub	r4,r3,r2
  800f94:	e0fffc17 	ldw	r3,-16(fp)
  800f98:	e0bffe17 	ldw	r2,-8(fp)
  800f9c:	1885883a 	add	r2,r3,r2
  800fa0:	e1800217 	ldw	r6,8(fp)
  800fa4:	100b883a 	mov	r5,r2
  800fa8:	0800ab40 	call	800ab4 <print_pix>
		print_pix(y + y_centrum,-x+x_centrum,rgb);
  800fac:	e0fffd17 	ldw	r3,-12(fp)
  800fb0:	e0bfff17 	ldw	r2,-4(fp)
  800fb4:	1889883a 	add	r4,r3,r2
  800fb8:	e0fffe17 	ldw	r3,-8(fp)
  800fbc:	e0bffc17 	ldw	r2,-16(fp)
  800fc0:	1885c83a 	sub	r2,r3,r2
  800fc4:	e1800217 	ldw	r6,8(fp)
  800fc8:	100b883a 	mov	r5,r2
  800fcc:	0800ab40 	call	800ab4 <print_pix>
		print_pix(-y + y_centrum,-x+x_centrum,rgb);
  800fd0:	e0ffff17 	ldw	r3,-4(fp)
  800fd4:	e0bffd17 	ldw	r2,-12(fp)
  800fd8:	1889c83a 	sub	r4,r3,r2
  800fdc:	e0fffe17 	ldw	r3,-8(fp)
  800fe0:	e0bffc17 	ldw	r2,-16(fp)
  800fe4:	1885c83a 	sub	r2,r3,r2
  800fe8:	e1800217 	ldw	r6,8(fp)
  800fec:	100b883a 	mov	r5,r2
  800ff0:	0800ab40 	call	800ab4 <print_pix>

}
  800ff4:	0001883a 	nop
  800ff8:	e037883a 	mov	sp,fp
  800ffc:	dfc00117 	ldw	ra,4(sp)
  801000:	df000017 	ldw	fp,0(sp)
  801004:	dec00204 	addi	sp,sp,8
  801008:	f800283a 	ret

0080100c <print_empty_circle>:
void print_empty_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  80100c:	defff504 	addi	sp,sp,-44
  801010:	dfc00a15 	stw	ra,40(sp)
  801014:	df000915 	stw	fp,36(sp)
  801018:	df000904 	addi	fp,sp,36
  80101c:	e13ffc15 	stw	r4,-16(fp)
  801020:	e17ffd15 	stw	r5,-12(fp)
  801024:	e1bffe15 	stw	r6,-8(fp)
  801028:	e1ffff15 	stw	r7,-4(fp)
		unsigned int value;
		unsigned int radius = radie;
  80102c:	e0bffc17 	ldw	r2,-16(fp)
  801030:	e0bffb15 	stw	r2,-20(fp)
		int x = 0;
  801034:	e03ff815 	stw	zero,-32(fp)
		int y = radie;
  801038:	e0bffc17 	ldw	r2,-16(fp)
  80103c:	e0bff915 	stw	r2,-28(fp)

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
  801040:	e0fff817 	ldw	r3,-32(fp)
  801044:	e13ff917 	ldw	r4,-28(fp)
  801048:	e0bfff17 	ldw	r2,-4(fp)
  80104c:	d8800015 	stw	r2,0(sp)
  801050:	e1fffe17 	ldw	r7,-8(fp)
  801054:	e1bffd17 	ldw	r6,-12(fp)
  801058:	200b883a 	mov	r5,r4
  80105c:	1809883a 	mov	r4,r3
  801060:	0800eb40 	call	800eb4 <print_symmetry_dots_circle>
		int h = 1- radie;
  801064:	00c00044 	movi	r3,1
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	1885c83a 	sub	r2,r3,r2
  801070:	e0bffa15 	stw	r2,-24(fp)
		while(y > x){
  801074:	00003306 	br	801144 <print_empty_circle+0x138>
			if (h < 0){//east point
  801078:	e0bffa17 	ldw	r2,-24(fp)
  80107c:	1000150e 	bge	r2,zero,8010d4 <print_empty_circle+0xc8>

				print_symmetry_dots_circle(x+1,y,x_centrum,y_centrum,rgb);
  801080:	e0bff817 	ldw	r2,-32(fp)
  801084:	10800044 	addi	r2,r2,1
  801088:	1009883a 	mov	r4,r2
  80108c:	e0fff917 	ldw	r3,-28(fp)
  801090:	e0bfff17 	ldw	r2,-4(fp)
  801094:	d8800015 	stw	r2,0(sp)
  801098:	e1fffe17 	ldw	r7,-8(fp)
  80109c:	e1bffd17 	ldw	r6,-12(fp)
  8010a0:	180b883a 	mov	r5,r3
  8010a4:	0800eb40 	call	800eb4 <print_symmetry_dots_circle>
				h = h +2*x +3;
  8010a8:	e0bff817 	ldw	r2,-32(fp)
  8010ac:	1085883a 	add	r2,r2,r2
  8010b0:	1007883a 	mov	r3,r2
  8010b4:	e0bffa17 	ldw	r2,-24(fp)
  8010b8:	1885883a 	add	r2,r3,r2
  8010bc:	108000c4 	addi	r2,r2,3
  8010c0:	e0bffa15 	stw	r2,-24(fp)
				x= x+1;
  8010c4:	e0bff817 	ldw	r2,-32(fp)
  8010c8:	10800044 	addi	r2,r2,1
  8010cc:	e0bff815 	stw	r2,-32(fp)
  8010d0:	00001c06 	br	801144 <print_empty_circle+0x138>

			}
			else{
				print_symmetry_dots_circle(x+1,y-1,x_centrum,y_centrum,rgb);
  8010d4:	e0bff817 	ldw	r2,-32(fp)
  8010d8:	10800044 	addi	r2,r2,1
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bff917 	ldw	r2,-28(fp)
  8010e4:	10bfffc4 	addi	r2,r2,-1
  8010e8:	1009883a 	mov	r4,r2
  8010ec:	e0bfff17 	ldw	r2,-4(fp)
  8010f0:	d8800015 	stw	r2,0(sp)
  8010f4:	e1fffe17 	ldw	r7,-8(fp)
  8010f8:	e1bffd17 	ldw	r6,-12(fp)
  8010fc:	200b883a 	mov	r5,r4
  801100:	1809883a 	mov	r4,r3
  801104:	0800eb40 	call	800eb4 <print_symmetry_dots_circle>
				h= h+2*(x-y)+5;
  801108:	e0fff817 	ldw	r3,-32(fp)
  80110c:	e0bff917 	ldw	r2,-28(fp)
  801110:	1885c83a 	sub	r2,r3,r2
  801114:	1085883a 	add	r2,r2,r2
  801118:	1007883a 	mov	r3,r2
  80111c:	e0bffa17 	ldw	r2,-24(fp)
  801120:	1885883a 	add	r2,r3,r2
  801124:	10800144 	addi	r2,r2,5
  801128:	e0bffa15 	stw	r2,-24(fp)
				y=y-1;
  80112c:	e0bff917 	ldw	r2,-28(fp)
  801130:	10bfffc4 	addi	r2,r2,-1
  801134:	e0bff915 	stw	r2,-28(fp)
				x=x+1;
  801138:	e0bff817 	ldw	r2,-32(fp)
  80113c:	10800044 	addi	r2,r2,1
  801140:	e0bff815 	stw	r2,-32(fp)
		int x = 0;
		int y = radie;

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
		int h = 1- radie;
		while(y > x){
  801144:	e0bff917 	ldw	r2,-28(fp)
  801148:	e0fff817 	ldw	r3,-32(fp)
  80114c:	18bfca16 	blt	r3,r2,801078 <__alt_data_end+0xff801078>
				y=y-1;
				x=x+1;
			}

		}
}
  801150:	0001883a 	nop
  801154:	e037883a 	mov	sp,fp
  801158:	dfc00117 	ldw	ra,4(sp)
  80115c:	df000017 	ldw	fp,0(sp)
  801160:	dec00204 	addi	sp,sp,8
  801164:	f800283a 	ret

00801168 <print_circle>:
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  801168:	defff904 	addi	sp,sp,-28
  80116c:	dfc00615 	stw	ra,24(sp)
  801170:	df000515 	stw	fp,20(sp)
  801174:	df000504 	addi	fp,sp,20
  801178:	e13ffc15 	stw	r4,-16(fp)
  80117c:	e17ffd15 	stw	r5,-12(fp)
  801180:	e1bffe15 	stw	r6,-8(fp)
  801184:	e1ffff15 	stw	r7,-4(fp)
	unsigned int radius = radie;
  801188:	e0bffc17 	ldw	r2,-16(fp)
  80118c:	e0bffb15 	stw	r2,-20(fp)

	for(radius = radie; radius > 0; radius--)
  801190:	e0bffc17 	ldw	r2,-16(fp)
  801194:	e0bffb15 	stw	r2,-20(fp)
  801198:	00000806 	br	8011bc <print_circle+0x54>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
  80119c:	e1ffff17 	ldw	r7,-4(fp)
  8011a0:	e1bffe17 	ldw	r6,-8(fp)
  8011a4:	e17ffd17 	ldw	r5,-12(fp)
  8011a8:	e13ffb17 	ldw	r4,-20(fp)
  8011ac:	080100c0 	call	80100c <print_empty_circle>
}
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
	unsigned int radius = radie;

	for(radius = radie; radius > 0; radius--)
  8011b0:	e0bffb17 	ldw	r2,-20(fp)
  8011b4:	10bfffc4 	addi	r2,r2,-1
  8011b8:	e0bffb15 	stw	r2,-20(fp)
  8011bc:	e0bffb17 	ldw	r2,-20(fp)
  8011c0:	103ff61e 	bne	r2,zero,80119c <__alt_data_end+0xff80119c>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
  8011c4:	0001883a 	nop
  8011c8:	e037883a 	mov	sp,fp
  8011cc:	dfc00117 	ldw	ra,4(sp)
  8011d0:	df000017 	ldw	fp,0(sp)
  8011d4:	dec00204 	addi	sp,sp,8
  8011d8:	f800283a 	ret

008011dc <clear_screen>:
void clear_screen(alt_u32 rgb){
  8011dc:	defffb04 	addi	sp,sp,-20
  8011e0:	dfc00415 	stw	ra,16(sp)
  8011e4:	df000315 	stw	fp,12(sp)
  8011e8:	df000304 	addi	fp,sp,12
  8011ec:	e13fff15 	stw	r4,-4(fp)
	for(int y = 0 ;y <240;y++)
  8011f0:	e03ffd15 	stw	zero,-12(fp)
  8011f4:	00001106 	br	80123c <clear_screen+0x60>
		for(int x = 0; x < 320; x++)
  8011f8:	e03ffe15 	stw	zero,-8(fp)
  8011fc:	00000906 	br	801224 <clear_screen+0x48>
			print_pix(x,y,rgb);
  801200:	e0bffe17 	ldw	r2,-8(fp)
  801204:	e0fffd17 	ldw	r3,-12(fp)
  801208:	e1bfff17 	ldw	r6,-4(fp)
  80120c:	180b883a 	mov	r5,r3
  801210:	1009883a 	mov	r4,r2
  801214:	0800ab40 	call	800ab4 <print_pix>
	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
		for(int x = 0; x < 320; x++)
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10800044 	addi	r2,r2,1
  801220:	e0bffe15 	stw	r2,-8(fp)
  801224:	e0bffe17 	ldw	r2,-8(fp)
  801228:	10805010 	cmplti	r2,r2,320
  80122c:	103ff41e 	bne	r2,zero,801200 <__alt_data_end+0xff801200>

	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
  801230:	e0bffd17 	ldw	r2,-12(fp)
  801234:	10800044 	addi	r2,r2,1
  801238:	e0bffd15 	stw	r2,-12(fp)
  80123c:	e0bffd17 	ldw	r2,-12(fp)
  801240:	10803c10 	cmplti	r2,r2,240
  801244:	103fec1e 	bne	r2,zero,8011f8 <__alt_data_end+0xff8011f8>
		for(int x = 0; x < 320; x++)
			print_pix(x,y,rgb);
}
  801248:	0001883a 	nop
  80124c:	e037883a 	mov	sp,fp
  801250:	dfc00117 	ldw	ra,4(sp)
  801254:	df000017 	ldw	fp,0(sp)
  801258:	dec00204 	addi	sp,sp,8
  80125c:	f800283a 	ret

00801260 <read_pixel_ram_int>:

pixel_data read_pixel_ram_int(alt_u32 x_start, alt_u32 y_start)
{
  801260:	defffb04 	addi	sp,sp,-20
  801264:	dfc00415 	stw	ra,16(sp)
  801268:	df000315 	stw	fp,12(sp)
  80126c:	df000304 	addi	fp,sp,12
  801270:	e13ffe15 	stw	r4,-8(fp)
  801274:	e17fff15 	stw	r5,-4(fp)
	alt_u32 i = read_pixel(x_start, y_start);
  801278:	01405004 	movi	r5,320
  80127c:	e13fff17 	ldw	r4,-4(fp)
  801280:	08018d40 	call	8018d4 <__mulsi3>
  801284:	1007883a 	mov	r3,r2
  801288:	e0bffe17 	ldw	r2,-8(fp)
  80128c:	1885883a 	add	r2,r3,r2
  801290:	1085883a 	add	r2,r2,r2
  801294:	1085883a 	add	r2,r2,r2
  801298:	1007883a 	mov	r3,r2
  80129c:	00804034 	movhi	r2,256
  8012a0:	1885883a 	add	r2,r3,r2
  8012a4:	10800037 	ldwio	r2,0(r2)
  8012a8:	e0bffd15 	stw	r2,-12(fp)
	return (alt_u8) i;
  8012ac:	e0bffd17 	ldw	r2,-12(fp)
}
  8012b0:	e037883a 	mov	sp,fp
  8012b4:	dfc00117 	ldw	ra,4(sp)
  8012b8:	df000017 	ldw	fp,0(sp)
  8012bc:	dec00204 	addi	sp,sp,8
  8012c0:	f800283a 	ret

008012c4 <queue_init>:

/***************************************************/

void queue_init(QUEUE *q)
{
  8012c4:	defffd04 	addi	sp,sp,-12
  8012c8:	dfc00215 	stw	ra,8(sp)
  8012cc:	df000115 	stw	fp,4(sp)
  8012d0:	df000104 	addi	fp,sp,4
  8012d4:	e13fff15 	stw	r4,-4(fp)
    memset(q,0,sizeof(QUEUE));
  8012d8:	01803504 	movi	r6,212
  8012dc:	000b883a 	mov	r5,zero
  8012e0:	e13fff17 	ldw	r4,-4(fp)
  8012e4:	08019640 	call	801964 <memset>
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
  8012e8:	e0bfff17 	ldw	r2,-4(fp)
  8012ec:	10003215 	stw	zero,200(r2)
    q->windex = 0;
  8012f0:	e0bfff17 	ldw	r2,-4(fp)
  8012f4:	10003315 	stw	zero,204(r2)
    q->numitems = 0;
  8012f8:	e0bfff17 	ldw	r2,-4(fp)
  8012fc:	10003415 	stw	zero,208(r2)
}
  801300:	0001883a 	nop
  801304:	e037883a 	mov	sp,fp
  801308:	dfc00117 	ldw	ra,4(sp)
  80130c:	df000017 	ldw	fp,0(sp)
  801310:	dec00204 	addi	sp,sp,8
  801314:	f800283a 	ret

00801318 <queue_enqueue>:

int queue_enqueue(QUEUE *q,int item)
{
  801318:	defff904 	addi	sp,sp,-28
  80131c:	dfc00615 	stw	ra,24(sp)
  801320:	df000515 	stw	fp,20(sp)
  801324:	df000504 	addi	fp,sp,20
  801328:	e13ffe15 	stw	r4,-8(fp)
  80132c:	e17fff15 	stw	r5,-4(fp)
    int num_items = q->numitems;
  801330:	e0bffe17 	ldw	r2,-8(fp)
  801334:	10803417 	ldw	r2,208(r2)
  801338:	e0bffc15 	stw	r2,-16(fp)
    int* temp_array;
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
  80133c:	e0bffc17 	ldw	r2,-16(fp)
  801340:	10800c88 	cmpgei	r2,r2,50
  801344:	1000451e 	bne	r2,zero,80145c <queue_enqueue+0x144>
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
  801348:	e0bffc17 	ldw	r2,-16(fp)
  80134c:	01400104 	movi	r5,4
  801350:	1009883a 	mov	r4,r2
  801354:	08018fc0 	call	8018fc <calloc>
  801358:	e0bffd15 	stw	r2,-12(fp)
        for(i = 0; i < num_items; i++)
  80135c:	e03ffb15 	stw	zero,-20(fp)
  801360:	00001006 	br	8013a4 <queue_enqueue+0x8c>
            temp_array[i]= q->items[i];       //Copy the queue to temp array
  801364:	e0bffb17 	ldw	r2,-20(fp)
  801368:	1085883a 	add	r2,r2,r2
  80136c:	1085883a 	add	r2,r2,r2
  801370:	1007883a 	mov	r3,r2
  801374:	e0bffd17 	ldw	r2,-12(fp)
  801378:	10c7883a 	add	r3,r2,r3
  80137c:	e13ffe17 	ldw	r4,-8(fp)
  801380:	e0bffb17 	ldw	r2,-20(fp)
  801384:	1085883a 	add	r2,r2,r2
  801388:	1085883a 	add	r2,r2,r2
  80138c:	2085883a 	add	r2,r4,r2
  801390:	10800017 	ldw	r2,0(r2)
  801394:	18800015 	stw	r2,0(r3)
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
  801398:	e0bffb17 	ldw	r2,-20(fp)
  80139c:	10800044 	addi	r2,r2,1
  8013a0:	e0bffb15 	stw	r2,-20(fp)
  8013a4:	e0fffb17 	ldw	r3,-20(fp)
  8013a8:	e0bffc17 	ldw	r2,-16(fp)
  8013ac:	18bfed16 	blt	r3,r2,801364 <__alt_data_end+0xff801364>
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0
  8013b0:	e0bffe17 	ldw	r2,-8(fp)
  8013b4:	e0ffff17 	ldw	r3,-4(fp)
  8013b8:	10c00015 	stw	r3,0(r2)

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  8013bc:	00800044 	movi	r2,1
  8013c0:	e0bffb15 	stw	r2,-20(fp)
  8013c4:	00001306 	br	801414 <queue_enqueue+0xfc>
            q->items[i] = temp_array[i-1];
  8013c8:	e0fffb17 	ldw	r3,-20(fp)
  8013cc:	00900034 	movhi	r2,16384
  8013d0:	10bfffc4 	addi	r2,r2,-1
  8013d4:	1885883a 	add	r2,r3,r2
  8013d8:	1085883a 	add	r2,r2,r2
  8013dc:	1085883a 	add	r2,r2,r2
  8013e0:	1007883a 	mov	r3,r2
  8013e4:	e0bffd17 	ldw	r2,-12(fp)
  8013e8:	10c5883a 	add	r2,r2,r3
  8013ec:	10c00017 	ldw	r3,0(r2)
  8013f0:	e13ffe17 	ldw	r4,-8(fp)
  8013f4:	e0bffb17 	ldw	r2,-20(fp)
  8013f8:	1085883a 	add	r2,r2,r2
  8013fc:	1085883a 	add	r2,r2,r2
  801400:	2085883a 	add	r2,r4,r2
  801404:	10c00015 	stw	r3,0(r2)
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  801408:	e0bffb17 	ldw	r2,-20(fp)
  80140c:	10800044 	addi	r2,r2,1
  801410:	e0bffb15 	stw	r2,-20(fp)
  801414:	e0bffc17 	ldw	r2,-16(fp)
  801418:	10800044 	addi	r2,r2,1
  80141c:	e0fffb17 	ldw	r3,-20(fp)
  801420:	18bfe916 	blt	r3,r2,8013c8 <__alt_data_end+0xff8013c8>
            q->items[i] = temp_array[i-1];
        free(temp_array);                             //Dispose the temp array
  801424:	e13ffd17 	ldw	r4,-12(fp)
  801428:	08019280 	call	801928 <free>
        q->numitems++;                          //increment the number of items
  80142c:	e0bffe17 	ldw	r2,-8(fp)
  801430:	10803417 	ldw	r2,208(r2)
  801434:	10c00044 	addi	r3,r2,1
  801438:	e0bffe17 	ldw	r2,-8(fp)
  80143c:	10c03415 	stw	r3,208(r2)
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
  801440:	e0bffe17 	ldw	r2,-8(fp)
  801444:	10803217 	ldw	r2,200(r2)
  801448:	10c00044 	addi	r3,r2,1
  80144c:	e0bffe17 	ldw	r2,-8(fp)
  801450:	10c03215 	stw	r3,200(r2)
        return 1;                               //The enqueue succeeded
  801454:	00800044 	movi	r2,1
  801458:	00000106 	br	801460 <queue_enqueue+0x148>
    }
    else return 0;          //The queue is filled, cannot insert more
  80145c:	0005883a 	mov	r2,zero

}
  801460:	e037883a 	mov	sp,fp
  801464:	dfc00117 	ldw	ra,4(sp)
  801468:	df000017 	ldw	fp,0(sp)
  80146c:	dec00204 	addi	sp,sp,8
  801470:	f800283a 	ret

00801474 <queue_dequeue>:


}
*/
int queue_dequeue(QUEUE *q)
{
  801474:	defffd04 	addi	sp,sp,-12
  801478:	df000215 	stw	fp,8(sp)
  80147c:	df000204 	addi	fp,sp,8
  801480:	e13fff15 	stw	r4,-4(fp)
    int num_items = q->numitems;
  801484:	e0bfff17 	ldw	r2,-4(fp)
  801488:	10803417 	ldw	r2,208(r2)
  80148c:	e0bffe15 	stw	r2,-8(fp)

    if (! num_items == 0)// The queue contains items
  801490:	e0bffe17 	ldw	r2,-8(fp)
  801494:	10000c26 	beq	r2,zero,8014c8 <queue_dequeue+0x54>
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
  801498:	e0bfff17 	ldw	r2,-4(fp)
  80149c:	10803217 	ldw	r2,200(r2)
  8014a0:	10ffffc4 	addi	r3,r2,-1
  8014a4:	e0bfff17 	ldw	r2,-4(fp)
  8014a8:	10c03215 	stw	r3,200(r2)
         q->numitems--;                 //Decrement the number of items in the queue
  8014ac:	e0bfff17 	ldw	r2,-4(fp)
  8014b0:	10803417 	ldw	r2,208(r2)
  8014b4:	10ffffc4 	addi	r3,r2,-1
  8014b8:	e0bfff17 	ldw	r2,-4(fp)
  8014bc:	10c03415 	stw	r3,208(r2)
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
  8014c0:	00800044 	movi	r2,1
  8014c4:	00000106 	br	8014cc <queue_dequeue+0x58>
    }
    else return 0;          //The queue is empty, nothing can be dequeued
  8014c8:	0005883a 	mov	r2,zero


}
  8014cc:	e037883a 	mov	sp,fp
  8014d0:	df000017 	ldw	fp,0(sp)
  8014d4:	dec00104 	addi	sp,sp,4
  8014d8:	f800283a 	ret

008014dc <queue_print>:


void queue_print(QUEUE *q)
{
  8014dc:	defffc04 	addi	sp,sp,-16
  8014e0:	dfc00315 	stw	ra,12(sp)
  8014e4:	df000215 	stw	fp,8(sp)
  8014e8:	df000204 	addi	fp,sp,8
  8014ec:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
  8014f0:	e03ffe15 	stw	zero,-8(fp)
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  8014f4:	e0bfff17 	ldw	r2,-4(fp)
  8014f8:	10803417 	ldw	r2,208(r2)
  8014fc:	10bfffc4 	addi	r2,r2,-1
  801500:	e0bffe15 	stw	r2,-8(fp)
  801504:	00000d06 	br	80153c <queue_print+0x60>
        printf("%d", q->items[i] );
  801508:	e0ffff17 	ldw	r3,-4(fp)
  80150c:	e0bffe17 	ldw	r2,-8(fp)
  801510:	1085883a 	add	r2,r2,r2
  801514:	1085883a 	add	r2,r2,r2
  801518:	1885883a 	add	r2,r3,r2
  80151c:	10800017 	ldw	r2,0(r2)
  801520:	100b883a 	mov	r5,r2
  801524:	01002034 	movhi	r4,128
  801528:	21109c04 	addi	r4,r4,17008
  80152c:	0801c5c0 	call	801c5c <printf>


void queue_print(QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801530:	e0bffe17 	ldw	r2,-8(fp)
  801534:	10bfffc4 	addi	r2,r2,-1
  801538:	e0bffe15 	stw	r2,-8(fp)
  80153c:	e0bffe17 	ldw	r2,-8(fp)
  801540:	103ff10e 	bge	r2,zero,801508 <__alt_data_end+0xff801508>
        printf("%d", q->items[i] );
    }
    printf("\n");
  801544:	01000284 	movi	r4,10
  801548:	0801cb00 	call	801cb0 <putchar>
}
  80154c:	0001883a 	nop
  801550:	e037883a 	mov	sp,fp
  801554:	dfc00117 	ldw	ra,4(sp)
  801558:	df000017 	ldw	fp,0(sp)
  80155c:	dec00204 	addi	sp,sp,8
  801560:	f800283a 	ret

00801564 <queue_print_screen>:
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb){
  801564:	defff504 	addi	sp,sp,-44
  801568:	dfc00a15 	stw	ra,40(sp)
  80156c:	df000915 	stw	fp,36(sp)
  801570:	dc000815 	stw	r16,32(sp)
  801574:	df000904 	addi	fp,sp,36
  801578:	e13ffb15 	stw	r4,-20(fp)
  80157c:	e17ffc15 	stw	r5,-16(fp)
  801580:	e1bffd15 	stw	r6,-12(fp)
  801584:	e1fffe15 	stw	r7,-8(fp)
	 int i = 0;
  801588:	e03ff715 	stw	zero,-36(fp)
	 int j;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  80158c:	e0bffb17 	ldw	r2,-20(fp)
  801590:	10803417 	ldw	r2,208(r2)
  801594:	10bfffc4 	addi	r2,r2,-1
  801598:	e0bff715 	stw	r2,-36(fp)
  80159c:	00005706 	br	8016fc <queue_print_screen+0x198>
	        printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
  8015a0:	e0fffb17 	ldw	r3,-20(fp)
  8015a4:	e0bff717 	ldw	r2,-36(fp)
  8015a8:	1085883a 	add	r2,r2,r2
  8015ac:	1085883a 	add	r2,r2,r2
  8015b0:	1885883a 	add	r2,r3,r2
  8015b4:	14000017 	ldw	r16,0(r2)
  8015b8:	e0fffb17 	ldw	r3,-20(fp)
  8015bc:	e0bff717 	ldw	r2,-36(fp)
  8015c0:	1085883a 	add	r2,r2,r2
  8015c4:	1085883a 	add	r2,r2,r2
  8015c8:	1885883a 	add	r2,r3,r2
  8015cc:	10800017 	ldw	r2,0(r2)
  8015d0:	e17ffe17 	ldw	r5,-8(fp)
  8015d4:	1009883a 	mov	r4,r2
  8015d8:	08017200 	call	801720 <__divsi3>
  8015dc:	100d883a 	mov	r6,r2
  8015e0:	800b883a 	mov	r5,r16
  8015e4:	01002034 	movhi	r4,128
  8015e8:	21109d04 	addi	r4,r4,17012
  8015ec:	0801c5c0 	call	801c5c <printf>
	        j = q->numitems-1 -i;
  8015f0:	e0bffb17 	ldw	r2,-20(fp)
  8015f4:	10803417 	ldw	r2,208(r2)
  8015f8:	10ffffc4 	addi	r3,r2,-1
  8015fc:	e0bff717 	ldw	r2,-36(fp)
  801600:	1885c83a 	sub	r2,r3,r2
  801604:	e0bff915 	stw	r2,-28(fp)
	        printf("j%d\n",j);
  801608:	e17ff917 	ldw	r5,-28(fp)
  80160c:	01002034 	movhi	r4,128
  801610:	2110a604 	addi	r4,r4,17048
  801614:	0801c5c0 	call	801c5c <printf>
	        for(int k = 1; k < 35;k++)
  801618:	00800044 	movi	r2,1
  80161c:	e0bff815 	stw	r2,-32(fp)
  801620:	00000d06 	br	801658 <queue_print_screen+0xf4>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
  801624:	e0fffc17 	ldw	r3,-16(fp)
  801628:	e0bff917 	ldw	r2,-28(fp)
  80162c:	1885883a 	add	r2,r3,r2
  801630:	1009883a 	mov	r4,r2
  801634:	e0fffd17 	ldw	r3,-12(fp)
  801638:	e0bff817 	ldw	r2,-32(fp)
  80163c:	1885c83a 	sub	r2,r3,r2
  801640:	000d883a 	mov	r6,zero
  801644:	100b883a 	mov	r5,r2
  801648:	0800ab40 	call	800ab4 <print_pix>
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
	        printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
	        j = q->numitems-1 -i;
	        printf("j%d\n",j);
	        for(int k = 1; k < 35;k++)
  80164c:	e0bff817 	ldw	r2,-32(fp)
  801650:	10800044 	addi	r2,r2,1
  801654:	e0bff815 	stw	r2,-32(fp)
  801658:	e0bff817 	ldw	r2,-32(fp)
  80165c:	108008d0 	cmplti	r2,r2,35
  801660:	103ff01e 	bne	r2,zero,801624 <__alt_data_end+0xff801624>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
  801664:	e0fffc17 	ldw	r3,-16(fp)
  801668:	e0bff917 	ldw	r2,-28(fp)
  80166c:	1885883a 	add	r2,r3,r2
  801670:	1007883a 	mov	r3,r2
  801674:	e0bffd17 	ldw	r2,-12(fp)
  801678:	018001c4 	movi	r6,7
  80167c:	100b883a 	mov	r5,r2
  801680:	1809883a 	mov	r4,r3
  801684:	0800ab40 	call	800ab4 <print_pix>
	        value = (y_origo-offset - q->items[i]/normalization < y_origo )? y_origo-offset - q->items[i]/normalization : y_origo;//Trunk
  801688:	e0fffd17 	ldw	r3,-12(fp)
  80168c:	e0800217 	ldw	r2,8(fp)
  801690:	18a1c83a 	sub	r16,r3,r2
  801694:	e0fffb17 	ldw	r3,-20(fp)
  801698:	e0bff717 	ldw	r2,-36(fp)
  80169c:	1085883a 	add	r2,r2,r2
  8016a0:	1085883a 	add	r2,r2,r2
  8016a4:	1885883a 	add	r2,r3,r2
  8016a8:	10800017 	ldw	r2,0(r2)
  8016ac:	e17ffe17 	ldw	r5,-8(fp)
  8016b0:	1009883a 	mov	r4,r2
  8016b4:	08017200 	call	801720 <__divsi3>
  8016b8:	8085c83a 	sub	r2,r16,r2
  8016bc:	e0fffd17 	ldw	r3,-12(fp)
  8016c0:	1880010e 	bge	r3,r2,8016c8 <queue_print_screen+0x164>
  8016c4:	1805883a 	mov	r2,r3
  8016c8:	e0bffa15 	stw	r2,-24(fp)
	        print_pix(x_origo + j, value,rgb);
  8016cc:	e0fffc17 	ldw	r3,-16(fp)
  8016d0:	e0bff917 	ldw	r2,-28(fp)
  8016d4:	1885883a 	add	r2,r3,r2
  8016d8:	1009883a 	mov	r4,r2
  8016dc:	e0bffa17 	ldw	r2,-24(fp)
  8016e0:	e0c00317 	ldw	r3,12(fp)
  8016e4:	180d883a 	mov	r6,r3
  8016e8:	100b883a 	mov	r5,r2
  8016ec:	0800ab40 	call	800ab4 <print_pix>
}
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb){
	 int i = 0;
	 int j;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  8016f0:	e0bff717 	ldw	r2,-36(fp)
  8016f4:	10bfffc4 	addi	r2,r2,-1
  8016f8:	e0bff715 	stw	r2,-36(fp)
  8016fc:	e0bff717 	ldw	r2,-36(fp)
  801700:	103fa70e 	bge	r2,zero,8015a0 <__alt_data_end+0xff8015a0>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
	        value = (y_origo-offset - q->items[i]/normalization < y_origo )? y_origo-offset - q->items[i]/normalization : y_origo;//Trunk
	        print_pix(x_origo + j, value,rgb);
	    }
}
  801704:	0001883a 	nop
  801708:	e6ffff04 	addi	sp,fp,-4
  80170c:	dfc00217 	ldw	ra,8(sp)
  801710:	df000117 	ldw	fp,4(sp)
  801714:	dc000017 	ldw	r16,0(sp)
  801718:	dec00304 	addi	sp,sp,12
  80171c:	f800283a 	ret

00801720 <__divsi3>:
  801720:	20001b16 	blt	r4,zero,801790 <__divsi3+0x70>
  801724:	000f883a 	mov	r7,zero
  801728:	28001616 	blt	r5,zero,801784 <__divsi3+0x64>
  80172c:	200d883a 	mov	r6,r4
  801730:	29001a2e 	bgeu	r5,r4,80179c <__divsi3+0x7c>
  801734:	00800804 	movi	r2,32
  801738:	00c00044 	movi	r3,1
  80173c:	00000106 	br	801744 <__divsi3+0x24>
  801740:	10000d26 	beq	r2,zero,801778 <__divsi3+0x58>
  801744:	294b883a 	add	r5,r5,r5
  801748:	10bfffc4 	addi	r2,r2,-1
  80174c:	18c7883a 	add	r3,r3,r3
  801750:	293ffb36 	bltu	r5,r4,801740 <__alt_data_end+0xff801740>
  801754:	0005883a 	mov	r2,zero
  801758:	18000726 	beq	r3,zero,801778 <__divsi3+0x58>
  80175c:	0005883a 	mov	r2,zero
  801760:	31400236 	bltu	r6,r5,80176c <__divsi3+0x4c>
  801764:	314dc83a 	sub	r6,r6,r5
  801768:	10c4b03a 	or	r2,r2,r3
  80176c:	1806d07a 	srli	r3,r3,1
  801770:	280ad07a 	srli	r5,r5,1
  801774:	183ffa1e 	bne	r3,zero,801760 <__alt_data_end+0xff801760>
  801778:	38000126 	beq	r7,zero,801780 <__divsi3+0x60>
  80177c:	0085c83a 	sub	r2,zero,r2
  801780:	f800283a 	ret
  801784:	014bc83a 	sub	r5,zero,r5
  801788:	39c0005c 	xori	r7,r7,1
  80178c:	003fe706 	br	80172c <__alt_data_end+0xff80172c>
  801790:	0109c83a 	sub	r4,zero,r4
  801794:	01c00044 	movi	r7,1
  801798:	003fe306 	br	801728 <__alt_data_end+0xff801728>
  80179c:	00c00044 	movi	r3,1
  8017a0:	003fee06 	br	80175c <__alt_data_end+0xff80175c>

008017a4 <__modsi3>:
  8017a4:	20001716 	blt	r4,zero,801804 <__modsi3+0x60>
  8017a8:	000f883a 	mov	r7,zero
  8017ac:	2005883a 	mov	r2,r4
  8017b0:	28001216 	blt	r5,zero,8017fc <__modsi3+0x58>
  8017b4:	2900162e 	bgeu	r5,r4,801810 <__modsi3+0x6c>
  8017b8:	01800804 	movi	r6,32
  8017bc:	00c00044 	movi	r3,1
  8017c0:	00000106 	br	8017c8 <__modsi3+0x24>
  8017c4:	30000a26 	beq	r6,zero,8017f0 <__modsi3+0x4c>
  8017c8:	294b883a 	add	r5,r5,r5
  8017cc:	31bfffc4 	addi	r6,r6,-1
  8017d0:	18c7883a 	add	r3,r3,r3
  8017d4:	293ffb36 	bltu	r5,r4,8017c4 <__alt_data_end+0xff8017c4>
  8017d8:	18000526 	beq	r3,zero,8017f0 <__modsi3+0x4c>
  8017dc:	1806d07a 	srli	r3,r3,1
  8017e0:	11400136 	bltu	r2,r5,8017e8 <__modsi3+0x44>
  8017e4:	1145c83a 	sub	r2,r2,r5
  8017e8:	280ad07a 	srli	r5,r5,1
  8017ec:	183ffb1e 	bne	r3,zero,8017dc <__alt_data_end+0xff8017dc>
  8017f0:	38000126 	beq	r7,zero,8017f8 <__modsi3+0x54>
  8017f4:	0085c83a 	sub	r2,zero,r2
  8017f8:	f800283a 	ret
  8017fc:	014bc83a 	sub	r5,zero,r5
  801800:	003fec06 	br	8017b4 <__alt_data_end+0xff8017b4>
  801804:	0109c83a 	sub	r4,zero,r4
  801808:	01c00044 	movi	r7,1
  80180c:	003fe706 	br	8017ac <__alt_data_end+0xff8017ac>
  801810:	00c00044 	movi	r3,1
  801814:	003ff106 	br	8017dc <__alt_data_end+0xff8017dc>

00801818 <__udivsi3>:
  801818:	200d883a 	mov	r6,r4
  80181c:	2900152e 	bgeu	r5,r4,801874 <__udivsi3+0x5c>
  801820:	28001416 	blt	r5,zero,801874 <__udivsi3+0x5c>
  801824:	00800804 	movi	r2,32
  801828:	00c00044 	movi	r3,1
  80182c:	00000206 	br	801838 <__udivsi3+0x20>
  801830:	10000e26 	beq	r2,zero,80186c <__udivsi3+0x54>
  801834:	28000516 	blt	r5,zero,80184c <__udivsi3+0x34>
  801838:	294b883a 	add	r5,r5,r5
  80183c:	10bfffc4 	addi	r2,r2,-1
  801840:	18c7883a 	add	r3,r3,r3
  801844:	293ffa36 	bltu	r5,r4,801830 <__alt_data_end+0xff801830>
  801848:	18000826 	beq	r3,zero,80186c <__udivsi3+0x54>
  80184c:	0005883a 	mov	r2,zero
  801850:	31400236 	bltu	r6,r5,80185c <__udivsi3+0x44>
  801854:	314dc83a 	sub	r6,r6,r5
  801858:	10c4b03a 	or	r2,r2,r3
  80185c:	1806d07a 	srli	r3,r3,1
  801860:	280ad07a 	srli	r5,r5,1
  801864:	183ffa1e 	bne	r3,zero,801850 <__alt_data_end+0xff801850>
  801868:	f800283a 	ret
  80186c:	0005883a 	mov	r2,zero
  801870:	f800283a 	ret
  801874:	00c00044 	movi	r3,1
  801878:	003ff406 	br	80184c <__alt_data_end+0xff80184c>

0080187c <__umodsi3>:
  80187c:	2005883a 	mov	r2,r4
  801880:	2900122e 	bgeu	r5,r4,8018cc <__umodsi3+0x50>
  801884:	28001116 	blt	r5,zero,8018cc <__umodsi3+0x50>
  801888:	01800804 	movi	r6,32
  80188c:	00c00044 	movi	r3,1
  801890:	00000206 	br	80189c <__umodsi3+0x20>
  801894:	30000c26 	beq	r6,zero,8018c8 <__umodsi3+0x4c>
  801898:	28000516 	blt	r5,zero,8018b0 <__umodsi3+0x34>
  80189c:	294b883a 	add	r5,r5,r5
  8018a0:	31bfffc4 	addi	r6,r6,-1
  8018a4:	18c7883a 	add	r3,r3,r3
  8018a8:	293ffa36 	bltu	r5,r4,801894 <__alt_data_end+0xff801894>
  8018ac:	18000626 	beq	r3,zero,8018c8 <__umodsi3+0x4c>
  8018b0:	1806d07a 	srli	r3,r3,1
  8018b4:	11400136 	bltu	r2,r5,8018bc <__umodsi3+0x40>
  8018b8:	1145c83a 	sub	r2,r2,r5
  8018bc:	280ad07a 	srli	r5,r5,1
  8018c0:	183ffb1e 	bne	r3,zero,8018b0 <__alt_data_end+0xff8018b0>
  8018c4:	f800283a 	ret
  8018c8:	f800283a 	ret
  8018cc:	00c00044 	movi	r3,1
  8018d0:	003ff706 	br	8018b0 <__alt_data_end+0xff8018b0>

008018d4 <__mulsi3>:
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	20000726 	beq	r4,zero,8018f8 <__mulsi3+0x24>
  8018dc:	20c0004c 	andi	r3,r4,1
  8018e0:	2008d07a 	srli	r4,r4,1
  8018e4:	18000126 	beq	r3,zero,8018ec <__mulsi3+0x18>
  8018e8:	1145883a 	add	r2,r2,r5
  8018ec:	294b883a 	add	r5,r5,r5
  8018f0:	203ffa1e 	bne	r4,zero,8018dc <__alt_data_end+0xff8018dc>
  8018f4:	f800283a 	ret
  8018f8:	f800283a 	ret

008018fc <calloc>:
  8018fc:	00802034 	movhi	r2,128
  801900:	10927e04 	addi	r2,r2,18936
  801904:	280d883a 	mov	r6,r5
  801908:	200b883a 	mov	r5,r4
  80190c:	11000017 	ldw	r4,0(r2)
  801910:	08019841 	jmpi	801984 <_calloc_r>

00801914 <malloc>:
  801914:	00802034 	movhi	r2,128
  801918:	10927e04 	addi	r2,r2,18936
  80191c:	200b883a 	mov	r5,r4
  801920:	11000017 	ldw	r4,0(r2)
  801924:	0801ac81 	jmpi	801ac8 <_malloc_r>

00801928 <free>:
  801928:	00802034 	movhi	r2,128
  80192c:	10927e04 	addi	r2,r2,18936
  801930:	200b883a 	mov	r5,r4
  801934:	11000017 	ldw	r4,0(r2)
  801938:	08019e41 	jmpi	8019e4 <_free_r>

0080193c <memcpy>:
  80193c:	2005883a 	mov	r2,r4
  801940:	2007883a 	mov	r3,r4
  801944:	218d883a 	add	r6,r4,r6
  801948:	19800526 	beq	r3,r6,801960 <memcpy+0x24>
  80194c:	29000003 	ldbu	r4,0(r5)
  801950:	18c00044 	addi	r3,r3,1
  801954:	29400044 	addi	r5,r5,1
  801958:	193fffc5 	stb	r4,-1(r3)
  80195c:	003ffa06 	br	801948 <__alt_data_end+0xff801948>
  801960:	f800283a 	ret

00801964 <memset>:
  801964:	2005883a 	mov	r2,r4
  801968:	2007883a 	mov	r3,r4
  80196c:	218d883a 	add	r6,r4,r6
  801970:	19800326 	beq	r3,r6,801980 <memset+0x1c>
  801974:	19400005 	stb	r5,0(r3)
  801978:	18c00044 	addi	r3,r3,1
  80197c:	003ffc06 	br	801970 <__alt_data_end+0xff801970>
  801980:	f800283a 	ret

00801984 <_calloc_r>:
  801984:	defffd04 	addi	sp,sp,-12
  801988:	dc000015 	stw	r16,0(sp)
  80198c:	2021883a 	mov	r16,r4
  801990:	2809883a 	mov	r4,r5
  801994:	300b883a 	mov	r5,r6
  801998:	dfc00215 	stw	ra,8(sp)
  80199c:	dc400115 	stw	r17,4(sp)
  8019a0:	08018d40 	call	8018d4 <__mulsi3>
  8019a4:	8009883a 	mov	r4,r16
  8019a8:	100b883a 	mov	r5,r2
  8019ac:	1023883a 	mov	r17,r2
  8019b0:	0801ac80 	call	801ac8 <_malloc_r>
  8019b4:	1021883a 	mov	r16,r2
  8019b8:	10000426 	beq	r2,zero,8019cc <_calloc_r+0x48>
  8019bc:	880d883a 	mov	r6,r17
  8019c0:	000b883a 	mov	r5,zero
  8019c4:	1009883a 	mov	r4,r2
  8019c8:	08019640 	call	801964 <memset>
  8019cc:	8005883a 	mov	r2,r16
  8019d0:	dfc00217 	ldw	ra,8(sp)
  8019d4:	dc400117 	ldw	r17,4(sp)
  8019d8:	dc000017 	ldw	r16,0(sp)
  8019dc:	dec00304 	addi	sp,sp,12
  8019e0:	f800283a 	ret

008019e4 <_free_r>:
  8019e4:	28003726 	beq	r5,zero,801ac4 <_free_r+0xe0>
  8019e8:	28ffff17 	ldw	r3,-4(r5)
  8019ec:	28bfff04 	addi	r2,r5,-4
  8019f0:	1800010e 	bge	r3,zero,8019f8 <_free_r+0x14>
  8019f4:	10c5883a 	add	r2,r2,r3
  8019f8:	01402034 	movhi	r5,128
  8019fc:	29545704 	addi	r5,r5,20828
  801a00:	28c00017 	ldw	r3,0(r5)
  801a04:	280d883a 	mov	r6,r5
  801a08:	1800031e 	bne	r3,zero,801a18 <_free_r+0x34>
  801a0c:	10000115 	stw	zero,4(r2)
  801a10:	28800015 	stw	r2,0(r5)
  801a14:	f800283a 	ret
  801a18:	10c00c2e 	bgeu	r2,r3,801a4c <_free_r+0x68>
  801a1c:	11000017 	ldw	r4,0(r2)
  801a20:	110b883a 	add	r5,r2,r4
  801a24:	1940041e 	bne	r3,r5,801a38 <_free_r+0x54>
  801a28:	19400017 	ldw	r5,0(r3)
  801a2c:	18c00117 	ldw	r3,4(r3)
  801a30:	2909883a 	add	r4,r5,r4
  801a34:	11000015 	stw	r4,0(r2)
  801a38:	10c00115 	stw	r3,4(r2)
  801a3c:	30800015 	stw	r2,0(r6)
  801a40:	f800283a 	ret
  801a44:	11400336 	bltu	r2,r5,801a54 <_free_r+0x70>
  801a48:	2807883a 	mov	r3,r5
  801a4c:	19400117 	ldw	r5,4(r3)
  801a50:	283ffc1e 	bne	r5,zero,801a44 <__alt_data_end+0xff801a44>
  801a54:	19c00017 	ldw	r7,0(r3)
  801a58:	19cd883a 	add	r6,r3,r7
  801a5c:	30800a1e 	bne	r6,r2,801a88 <_free_r+0xa4>
  801a60:	10800017 	ldw	r2,0(r2)
  801a64:	3885883a 	add	r2,r7,r2
  801a68:	18800015 	stw	r2,0(r3)
  801a6c:	1889883a 	add	r4,r3,r2
  801a70:	2900141e 	bne	r5,r4,801ac4 <_free_r+0xe0>
  801a74:	29000017 	ldw	r4,0(r5)
  801a78:	2085883a 	add	r2,r4,r2
  801a7c:	18800015 	stw	r2,0(r3)
  801a80:	28800117 	ldw	r2,4(r5)
  801a84:	00000e06 	br	801ac0 <_free_r+0xdc>
  801a88:	1180032e 	bgeu	r2,r6,801a98 <_free_r+0xb4>
  801a8c:	00800304 	movi	r2,12
  801a90:	20800015 	stw	r2,0(r4)
  801a94:	f800283a 	ret
  801a98:	11000017 	ldw	r4,0(r2)
  801a9c:	110d883a 	add	r6,r2,r4
  801aa0:	2980061e 	bne	r5,r6,801abc <_free_r+0xd8>
  801aa4:	29800017 	ldw	r6,0(r5)
  801aa8:	3109883a 	add	r4,r6,r4
  801aac:	11000015 	stw	r4,0(r2)
  801ab0:	29000117 	ldw	r4,4(r5)
  801ab4:	11000115 	stw	r4,4(r2)
  801ab8:	00000106 	br	801ac0 <_free_r+0xdc>
  801abc:	11400115 	stw	r5,4(r2)
  801ac0:	18800115 	stw	r2,4(r3)
  801ac4:	f800283a 	ret

00801ac8 <_malloc_r>:
  801ac8:	defffb04 	addi	sp,sp,-20
  801acc:	00bfff04 	movi	r2,-4
  801ad0:	dc400115 	stw	r17,4(sp)
  801ad4:	2c4000c4 	addi	r17,r5,3
  801ad8:	88a2703a 	and	r17,r17,r2
  801adc:	dc800215 	stw	r18,8(sp)
  801ae0:	dfc00415 	stw	ra,16(sp)
  801ae4:	dcc00315 	stw	r19,12(sp)
  801ae8:	dc000015 	stw	r16,0(sp)
  801aec:	8c400204 	addi	r17,r17,8
  801af0:	00800304 	movi	r2,12
  801af4:	2025883a 	mov	r18,r4
  801af8:	8880022e 	bgeu	r17,r2,801b04 <_malloc_r+0x3c>
  801afc:	1023883a 	mov	r17,r2
  801b00:	00000506 	br	801b18 <_malloc_r+0x50>
  801b04:	8800040e 	bge	r17,zero,801b18 <_malloc_r+0x50>
  801b08:	00800304 	movi	r2,12
  801b0c:	90800015 	stw	r2,0(r18)
  801b10:	0005883a 	mov	r2,zero
  801b14:	00003b06 	br	801c04 <_malloc_r+0x13c>
  801b18:	897ffb36 	bltu	r17,r5,801b08 <__alt_data_end+0xff801b08>
  801b1c:	00802034 	movhi	r2,128
  801b20:	10945704 	addi	r2,r2,20828
  801b24:	10c00017 	ldw	r3,0(r2)
  801b28:	1009883a 	mov	r4,r2
  801b2c:	1821883a 	mov	r16,r3
  801b30:	80000926 	beq	r16,zero,801b58 <_malloc_r+0x90>
  801b34:	80800017 	ldw	r2,0(r16)
  801b38:	1445c83a 	sub	r2,r2,r17
  801b3c:	10001516 	blt	r2,zero,801b94 <_malloc_r+0xcc>
  801b40:	014002c4 	movi	r5,11
  801b44:	28800d2e 	bgeu	r5,r2,801b7c <_malloc_r+0xb4>
  801b48:	80800015 	stw	r2,0(r16)
  801b4c:	80a1883a 	add	r16,r16,r2
  801b50:	84400015 	stw	r17,0(r16)
  801b54:	8000221e 	bne	r16,zero,801be0 <_malloc_r+0x118>
  801b58:	04002034 	movhi	r16,128
  801b5c:	84145604 	addi	r16,r16,20824
  801b60:	80800017 	ldw	r2,0(r16)
  801b64:	10000e1e 	bne	r2,zero,801ba0 <_malloc_r+0xd8>
  801b68:	000b883a 	mov	r5,zero
  801b6c:	9009883a 	mov	r4,r18
  801b70:	0801d600 	call	801d60 <_sbrk_r>
  801b74:	80800015 	stw	r2,0(r16)
  801b78:	00000906 	br	801ba0 <_malloc_r+0xd8>
  801b7c:	80800117 	ldw	r2,4(r16)
  801b80:	1c00021e 	bne	r3,r16,801b8c <_malloc_r+0xc4>
  801b84:	20800015 	stw	r2,0(r4)
  801b88:	00001506 	br	801be0 <_malloc_r+0x118>
  801b8c:	18800115 	stw	r2,4(r3)
  801b90:	00001306 	br	801be0 <_malloc_r+0x118>
  801b94:	8007883a 	mov	r3,r16
  801b98:	84000117 	ldw	r16,4(r16)
  801b9c:	003fe406 	br	801b30 <__alt_data_end+0xff801b30>
  801ba0:	880b883a 	mov	r5,r17
  801ba4:	9009883a 	mov	r4,r18
  801ba8:	0801d600 	call	801d60 <_sbrk_r>
  801bac:	04ffffc4 	movi	r19,-1
  801bb0:	14ffd526 	beq	r2,r19,801b08 <__alt_data_end+0xff801b08>
  801bb4:	140000c4 	addi	r16,r2,3
  801bb8:	00ffff04 	movi	r3,-4
  801bbc:	80e0703a 	and	r16,r16,r3
  801bc0:	1400021e 	bne	r2,r16,801bcc <_malloc_r+0x104>
  801bc4:	84400015 	stw	r17,0(r16)
  801bc8:	00000506 	br	801be0 <_malloc_r+0x118>
  801bcc:	808bc83a 	sub	r5,r16,r2
  801bd0:	9009883a 	mov	r4,r18
  801bd4:	0801d600 	call	801d60 <_sbrk_r>
  801bd8:	14fffa1e 	bne	r2,r19,801bc4 <__alt_data_end+0xff801bc4>
  801bdc:	003fca06 	br	801b08 <__alt_data_end+0xff801b08>
  801be0:	810002c4 	addi	r4,r16,11
  801be4:	00bffe04 	movi	r2,-8
  801be8:	80c00104 	addi	r3,r16,4
  801bec:	2084703a 	and	r2,r4,r2
  801bf0:	10c7c83a 	sub	r3,r2,r3
  801bf4:	18000326 	beq	r3,zero,801c04 <_malloc_r+0x13c>
  801bf8:	80e1883a 	add	r16,r16,r3
  801bfc:	00c7c83a 	sub	r3,zero,r3
  801c00:	80c00015 	stw	r3,0(r16)
  801c04:	dfc00417 	ldw	ra,16(sp)
  801c08:	dcc00317 	ldw	r19,12(sp)
  801c0c:	dc800217 	ldw	r18,8(sp)
  801c10:	dc400117 	ldw	r17,4(sp)
  801c14:	dc000017 	ldw	r16,0(sp)
  801c18:	dec00504 	addi	sp,sp,20
  801c1c:	f800283a 	ret

00801c20 <_printf_r>:
  801c20:	defffd04 	addi	sp,sp,-12
  801c24:	dfc00015 	stw	ra,0(sp)
  801c28:	d9800115 	stw	r6,4(sp)
  801c2c:	d9c00215 	stw	r7,8(sp)
  801c30:	20c00217 	ldw	r3,8(r4)
  801c34:	01802034 	movhi	r6,128
  801c38:	3188e004 	addi	r6,r6,9088
  801c3c:	19800115 	stw	r6,4(r3)
  801c40:	280d883a 	mov	r6,r5
  801c44:	21400217 	ldw	r5,8(r4)
  801c48:	d9c00104 	addi	r7,sp,4
  801c4c:	0801e380 	call	801e38 <___vfprintf_internal_r>
  801c50:	dfc00017 	ldw	ra,0(sp)
  801c54:	dec00304 	addi	sp,sp,12
  801c58:	f800283a 	ret

00801c5c <printf>:
  801c5c:	defffc04 	addi	sp,sp,-16
  801c60:	dfc00015 	stw	ra,0(sp)
  801c64:	d9400115 	stw	r5,4(sp)
  801c68:	d9800215 	stw	r6,8(sp)
  801c6c:	d9c00315 	stw	r7,12(sp)
  801c70:	00802034 	movhi	r2,128
  801c74:	10927e04 	addi	r2,r2,18936
  801c78:	10800017 	ldw	r2,0(r2)
  801c7c:	01402034 	movhi	r5,128
  801c80:	2948e004 	addi	r5,r5,9088
  801c84:	10c00217 	ldw	r3,8(r2)
  801c88:	d9800104 	addi	r6,sp,4
  801c8c:	19400115 	stw	r5,4(r3)
  801c90:	200b883a 	mov	r5,r4
  801c94:	11000217 	ldw	r4,8(r2)
  801c98:	08023640 	call	802364 <__vfprintf_internal>
  801c9c:	dfc00017 	ldw	ra,0(sp)
  801ca0:	dec00404 	addi	sp,sp,16
  801ca4:	f800283a 	ret

00801ca8 <_putchar_r>:
  801ca8:	21800217 	ldw	r6,8(r4)
  801cac:	080248c1 	jmpi	80248c <_putc_r>

00801cb0 <putchar>:
  801cb0:	00802034 	movhi	r2,128
  801cb4:	10927e04 	addi	r2,r2,18936
  801cb8:	10800017 	ldw	r2,0(r2)
  801cbc:	200b883a 	mov	r5,r4
  801cc0:	11800217 	ldw	r6,8(r2)
  801cc4:	1009883a 	mov	r4,r2
  801cc8:	080248c1 	jmpi	80248c <_putc_r>

00801ccc <_puts_r>:
  801ccc:	defffd04 	addi	sp,sp,-12
  801cd0:	dc000015 	stw	r16,0(sp)
  801cd4:	2021883a 	mov	r16,r4
  801cd8:	2809883a 	mov	r4,r5
  801cdc:	dfc00215 	stw	ra,8(sp)
  801ce0:	dc400115 	stw	r17,4(sp)
  801ce4:	2823883a 	mov	r17,r5
  801ce8:	0801db00 	call	801db0 <strlen>
  801cec:	81400217 	ldw	r5,8(r16)
  801cf0:	01002034 	movhi	r4,128
  801cf4:	2108e004 	addi	r4,r4,9088
  801cf8:	29000115 	stw	r4,4(r5)
  801cfc:	100f883a 	mov	r7,r2
  801d00:	880d883a 	mov	r6,r17
  801d04:	8009883a 	mov	r4,r16
  801d08:	08023800 	call	802380 <__sfvwrite_small_dev>
  801d0c:	00ffffc4 	movi	r3,-1
  801d10:	10c00926 	beq	r2,r3,801d38 <_puts_r+0x6c>
  801d14:	81400217 	ldw	r5,8(r16)
  801d18:	01802034 	movhi	r6,128
  801d1c:	01c00044 	movi	r7,1
  801d20:	28800117 	ldw	r2,4(r5)
  801d24:	3190a804 	addi	r6,r6,17056
  801d28:	8009883a 	mov	r4,r16
  801d2c:	103ee83a 	callr	r2
  801d30:	10bfffe0 	cmpeqi	r2,r2,-1
  801d34:	0085c83a 	sub	r2,zero,r2
  801d38:	dfc00217 	ldw	ra,8(sp)
  801d3c:	dc400117 	ldw	r17,4(sp)
  801d40:	dc000017 	ldw	r16,0(sp)
  801d44:	dec00304 	addi	sp,sp,12
  801d48:	f800283a 	ret

00801d4c <puts>:
  801d4c:	00802034 	movhi	r2,128
  801d50:	10927e04 	addi	r2,r2,18936
  801d54:	200b883a 	mov	r5,r4
  801d58:	11000017 	ldw	r4,0(r2)
  801d5c:	0801ccc1 	jmpi	801ccc <_puts_r>

00801d60 <_sbrk_r>:
  801d60:	defffd04 	addi	sp,sp,-12
  801d64:	dc000015 	stw	r16,0(sp)
  801d68:	04002034 	movhi	r16,128
  801d6c:	dc400115 	stw	r17,4(sp)
  801d70:	84145804 	addi	r16,r16,20832
  801d74:	2023883a 	mov	r17,r4
  801d78:	2809883a 	mov	r4,r5
  801d7c:	dfc00215 	stw	ra,8(sp)
  801d80:	80000015 	stw	zero,0(r16)
  801d84:	08026940 	call	802694 <sbrk>
  801d88:	00ffffc4 	movi	r3,-1
  801d8c:	10c0031e 	bne	r2,r3,801d9c <_sbrk_r+0x3c>
  801d90:	80c00017 	ldw	r3,0(r16)
  801d94:	18000126 	beq	r3,zero,801d9c <_sbrk_r+0x3c>
  801d98:	88c00015 	stw	r3,0(r17)
  801d9c:	dfc00217 	ldw	ra,8(sp)
  801da0:	dc400117 	ldw	r17,4(sp)
  801da4:	dc000017 	ldw	r16,0(sp)
  801da8:	dec00304 	addi	sp,sp,12
  801dac:	f800283a 	ret

00801db0 <strlen>:
  801db0:	2005883a 	mov	r2,r4
  801db4:	10c00007 	ldb	r3,0(r2)
  801db8:	18000226 	beq	r3,zero,801dc4 <strlen+0x14>
  801dbc:	10800044 	addi	r2,r2,1
  801dc0:	003ffc06 	br	801db4 <__alt_data_end+0xff801db4>
  801dc4:	1105c83a 	sub	r2,r2,r4
  801dc8:	f800283a 	ret

00801dcc <print_repeat>:
  801dcc:	defffb04 	addi	sp,sp,-20
  801dd0:	dc800315 	stw	r18,12(sp)
  801dd4:	dc400215 	stw	r17,8(sp)
  801dd8:	dc000115 	stw	r16,4(sp)
  801ddc:	dfc00415 	stw	ra,16(sp)
  801de0:	2025883a 	mov	r18,r4
  801de4:	2823883a 	mov	r17,r5
  801de8:	d9800005 	stb	r6,0(sp)
  801dec:	3821883a 	mov	r16,r7
  801df0:	04000a0e 	bge	zero,r16,801e1c <print_repeat+0x50>
  801df4:	88800117 	ldw	r2,4(r17)
  801df8:	01c00044 	movi	r7,1
  801dfc:	d80d883a 	mov	r6,sp
  801e00:	880b883a 	mov	r5,r17
  801e04:	9009883a 	mov	r4,r18
  801e08:	103ee83a 	callr	r2
  801e0c:	843fffc4 	addi	r16,r16,-1
  801e10:	103ff726 	beq	r2,zero,801df0 <__alt_data_end+0xff801df0>
  801e14:	00bfffc4 	movi	r2,-1
  801e18:	00000106 	br	801e20 <print_repeat+0x54>
  801e1c:	0005883a 	mov	r2,zero
  801e20:	dfc00417 	ldw	ra,16(sp)
  801e24:	dc800317 	ldw	r18,12(sp)
  801e28:	dc400217 	ldw	r17,8(sp)
  801e2c:	dc000117 	ldw	r16,4(sp)
  801e30:	dec00504 	addi	sp,sp,20
  801e34:	f800283a 	ret

00801e38 <___vfprintf_internal_r>:
  801e38:	deffe504 	addi	sp,sp,-108
  801e3c:	d8c00804 	addi	r3,sp,32
  801e40:	ddc01815 	stw	r23,96(sp)
  801e44:	dd801715 	stw	r22,92(sp)
  801e48:	dd401615 	stw	r21,88(sp)
  801e4c:	dd001515 	stw	r20,84(sp)
  801e50:	dcc01415 	stw	r19,80(sp)
  801e54:	dc801315 	stw	r18,76(sp)
  801e58:	dc401215 	stw	r17,72(sp)
  801e5c:	dc001115 	stw	r16,68(sp)
  801e60:	dfc01a15 	stw	ra,104(sp)
  801e64:	df001915 	stw	fp,100(sp)
  801e68:	2029883a 	mov	r20,r4
  801e6c:	2823883a 	mov	r17,r5
  801e70:	382d883a 	mov	r22,r7
  801e74:	d9800f15 	stw	r6,60(sp)
  801e78:	0021883a 	mov	r16,zero
  801e7c:	d8000e15 	stw	zero,56(sp)
  801e80:	d8000a15 	stw	zero,40(sp)
  801e84:	002b883a 	mov	r21,zero
  801e88:	0027883a 	mov	r19,zero
  801e8c:	0025883a 	mov	r18,zero
  801e90:	d8000c15 	stw	zero,48(sp)
  801e94:	d8000b15 	stw	zero,44(sp)
  801e98:	002f883a 	mov	r23,zero
  801e9c:	d8c00915 	stw	r3,36(sp)
  801ea0:	d8c00f17 	ldw	r3,60(sp)
  801ea4:	19000003 	ldbu	r4,0(r3)
  801ea8:	20803fcc 	andi	r2,r4,255
  801eac:	1080201c 	xori	r2,r2,128
  801eb0:	10bfe004 	addi	r2,r2,-128
  801eb4:	10011e26 	beq	r2,zero,802330 <___vfprintf_internal_r+0x4f8>
  801eb8:	00c00044 	movi	r3,1
  801ebc:	b8c01426 	beq	r23,r3,801f10 <___vfprintf_internal_r+0xd8>
  801ec0:	1dc00216 	blt	r3,r23,801ecc <___vfprintf_internal_r+0x94>
  801ec4:	b8000626 	beq	r23,zero,801ee0 <___vfprintf_internal_r+0xa8>
  801ec8:	00011506 	br	802320 <___vfprintf_internal_r+0x4e8>
  801ecc:	01400084 	movi	r5,2
  801ed0:	b9401d26 	beq	r23,r5,801f48 <___vfprintf_internal_r+0x110>
  801ed4:	014000c4 	movi	r5,3
  801ed8:	b9402b26 	beq	r23,r5,801f88 <___vfprintf_internal_r+0x150>
  801edc:	00011006 	br	802320 <___vfprintf_internal_r+0x4e8>
  801ee0:	01400944 	movi	r5,37
  801ee4:	1140fc26 	beq	r2,r5,8022d8 <___vfprintf_internal_r+0x4a0>
  801ee8:	88800117 	ldw	r2,4(r17)
  801eec:	d9000005 	stb	r4,0(sp)
  801ef0:	01c00044 	movi	r7,1
  801ef4:	d80d883a 	mov	r6,sp
  801ef8:	880b883a 	mov	r5,r17
  801efc:	a009883a 	mov	r4,r20
  801f00:	103ee83a 	callr	r2
  801f04:	1000d81e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  801f08:	84000044 	addi	r16,r16,1
  801f0c:	00010406 	br	802320 <___vfprintf_internal_r+0x4e8>
  801f10:	01400c04 	movi	r5,48
  801f14:	1140fa26 	beq	r2,r5,802300 <___vfprintf_internal_r+0x4c8>
  801f18:	01400944 	movi	r5,37
  801f1c:	11400a1e 	bne	r2,r5,801f48 <___vfprintf_internal_r+0x110>
  801f20:	d8800005 	stb	r2,0(sp)
  801f24:	88800117 	ldw	r2,4(r17)
  801f28:	b80f883a 	mov	r7,r23
  801f2c:	d80d883a 	mov	r6,sp
  801f30:	880b883a 	mov	r5,r17
  801f34:	a009883a 	mov	r4,r20
  801f38:	103ee83a 	callr	r2
  801f3c:	1000ca1e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  801f40:	84000044 	addi	r16,r16,1
  801f44:	0000f506 	br	80231c <___vfprintf_internal_r+0x4e4>
  801f48:	25fff404 	addi	r23,r4,-48
  801f4c:	bdc03fcc 	andi	r23,r23,255
  801f50:	00c00244 	movi	r3,9
  801f54:	1dc00936 	bltu	r3,r23,801f7c <___vfprintf_internal_r+0x144>
  801f58:	00bfffc4 	movi	r2,-1
  801f5c:	90800426 	beq	r18,r2,801f70 <___vfprintf_internal_r+0x138>
  801f60:	01400284 	movi	r5,10
  801f64:	9009883a 	mov	r4,r18
  801f68:	08018d40 	call	8018d4 <__mulsi3>
  801f6c:	00000106 	br	801f74 <___vfprintf_internal_r+0x13c>
  801f70:	0005883a 	mov	r2,zero
  801f74:	b8a5883a 	add	r18,r23,r2
  801f78:	0000e206 	br	802304 <___vfprintf_internal_r+0x4cc>
  801f7c:	01400b84 	movi	r5,46
  801f80:	1140e426 	beq	r2,r5,802314 <___vfprintf_internal_r+0x4dc>
  801f84:	05c00084 	movi	r23,2
  801f88:	213ff404 	addi	r4,r4,-48
  801f8c:	27003fcc 	andi	fp,r4,255
  801f90:	00c00244 	movi	r3,9
  801f94:	1f000936 	bltu	r3,fp,801fbc <___vfprintf_internal_r+0x184>
  801f98:	00bfffc4 	movi	r2,-1
  801f9c:	98800426 	beq	r19,r2,801fb0 <___vfprintf_internal_r+0x178>
  801fa0:	01400284 	movi	r5,10
  801fa4:	9809883a 	mov	r4,r19
  801fa8:	08018d40 	call	8018d4 <__mulsi3>
  801fac:	00000106 	br	801fb4 <___vfprintf_internal_r+0x17c>
  801fb0:	0005883a 	mov	r2,zero
  801fb4:	e0a7883a 	add	r19,fp,r2
  801fb8:	0000d906 	br	802320 <___vfprintf_internal_r+0x4e8>
  801fbc:	00c01b04 	movi	r3,108
  801fc0:	10c0d226 	beq	r2,r3,80230c <___vfprintf_internal_r+0x4d4>
  801fc4:	013fffc4 	movi	r4,-1
  801fc8:	99000226 	beq	r19,r4,801fd4 <___vfprintf_internal_r+0x19c>
  801fcc:	d8000b15 	stw	zero,44(sp)
  801fd0:	00000106 	br	801fd8 <___vfprintf_internal_r+0x1a0>
  801fd4:	04c00044 	movi	r19,1
  801fd8:	01001a44 	movi	r4,105
  801fdc:	11001626 	beq	r2,r4,802038 <___vfprintf_internal_r+0x200>
  801fe0:	20800916 	blt	r4,r2,802008 <___vfprintf_internal_r+0x1d0>
  801fe4:	010018c4 	movi	r4,99
  801fe8:	11008826 	beq	r2,r4,80220c <___vfprintf_internal_r+0x3d4>
  801fec:	01001904 	movi	r4,100
  801ff0:	11001126 	beq	r2,r4,802038 <___vfprintf_internal_r+0x200>
  801ff4:	01001604 	movi	r4,88
  801ff8:	1100c81e 	bne	r2,r4,80231c <___vfprintf_internal_r+0x4e4>
  801ffc:	00c00044 	movi	r3,1
  802000:	d8c00e15 	stw	r3,56(sp)
  802004:	00001506 	br	80205c <___vfprintf_internal_r+0x224>
  802008:	01001cc4 	movi	r4,115
  80200c:	11009826 	beq	r2,r4,802270 <___vfprintf_internal_r+0x438>
  802010:	20800416 	blt	r4,r2,802024 <___vfprintf_internal_r+0x1ec>
  802014:	01001bc4 	movi	r4,111
  802018:	1100c01e 	bne	r2,r4,80231c <___vfprintf_internal_r+0x4e4>
  80201c:	05400204 	movi	r21,8
  802020:	00000f06 	br	802060 <___vfprintf_internal_r+0x228>
  802024:	01001d44 	movi	r4,117
  802028:	11000d26 	beq	r2,r4,802060 <___vfprintf_internal_r+0x228>
  80202c:	01001e04 	movi	r4,120
  802030:	11000a26 	beq	r2,r4,80205c <___vfprintf_internal_r+0x224>
  802034:	0000b906 	br	80231c <___vfprintf_internal_r+0x4e4>
  802038:	d8c00a17 	ldw	r3,40(sp)
  80203c:	b7000104 	addi	fp,r22,4
  802040:	18000726 	beq	r3,zero,802060 <___vfprintf_internal_r+0x228>
  802044:	df000d15 	stw	fp,52(sp)
  802048:	b5c00017 	ldw	r23,0(r22)
  80204c:	b800080e 	bge	r23,zero,802070 <___vfprintf_internal_r+0x238>
  802050:	05efc83a 	sub	r23,zero,r23
  802054:	02400044 	movi	r9,1
  802058:	00000606 	br	802074 <___vfprintf_internal_r+0x23c>
  80205c:	05400404 	movi	r21,16
  802060:	b0c00104 	addi	r3,r22,4
  802064:	d8c00d15 	stw	r3,52(sp)
  802068:	b5c00017 	ldw	r23,0(r22)
  80206c:	d8000a15 	stw	zero,40(sp)
  802070:	0013883a 	mov	r9,zero
  802074:	d839883a 	mov	fp,sp
  802078:	b8001726 	beq	r23,zero,8020d8 <___vfprintf_internal_r+0x2a0>
  80207c:	a80b883a 	mov	r5,r21
  802080:	b809883a 	mov	r4,r23
  802084:	da401015 	stw	r9,64(sp)
  802088:	08018180 	call	801818 <__udivsi3>
  80208c:	a80b883a 	mov	r5,r21
  802090:	1009883a 	mov	r4,r2
  802094:	102d883a 	mov	r22,r2
  802098:	08018d40 	call	8018d4 <__mulsi3>
  80209c:	b885c83a 	sub	r2,r23,r2
  8020a0:	00c00244 	movi	r3,9
  8020a4:	da401017 	ldw	r9,64(sp)
  8020a8:	18800216 	blt	r3,r2,8020b4 <___vfprintf_internal_r+0x27c>
  8020ac:	10800c04 	addi	r2,r2,48
  8020b0:	00000506 	br	8020c8 <___vfprintf_internal_r+0x290>
  8020b4:	d8c00e17 	ldw	r3,56(sp)
  8020b8:	18000226 	beq	r3,zero,8020c4 <___vfprintf_internal_r+0x28c>
  8020bc:	10800dc4 	addi	r2,r2,55
  8020c0:	00000106 	br	8020c8 <___vfprintf_internal_r+0x290>
  8020c4:	108015c4 	addi	r2,r2,87
  8020c8:	e0800005 	stb	r2,0(fp)
  8020cc:	b02f883a 	mov	r23,r22
  8020d0:	e7000044 	addi	fp,fp,1
  8020d4:	003fe806 	br	802078 <__alt_data_end+0xff802078>
  8020d8:	e6efc83a 	sub	r23,fp,sp
  8020dc:	9dc5c83a 	sub	r2,r19,r23
  8020e0:	0080090e 	bge	zero,r2,802108 <___vfprintf_internal_r+0x2d0>
  8020e4:	e085883a 	add	r2,fp,r2
  8020e8:	01400c04 	movi	r5,48
  8020ec:	d8c00917 	ldw	r3,36(sp)
  8020f0:	e009883a 	mov	r4,fp
  8020f4:	e0c0032e 	bgeu	fp,r3,802104 <___vfprintf_internal_r+0x2cc>
  8020f8:	e7000044 	addi	fp,fp,1
  8020fc:	21400005 	stb	r5,0(r4)
  802100:	e0bffa1e 	bne	fp,r2,8020ec <__alt_data_end+0xff8020ec>
  802104:	e6efc83a 	sub	r23,fp,sp
  802108:	d8c00b17 	ldw	r3,44(sp)
  80210c:	4dd1883a 	add	r8,r9,r23
  802110:	922dc83a 	sub	r22,r18,r8
  802114:	18001626 	beq	r3,zero,802170 <___vfprintf_internal_r+0x338>
  802118:	48000a26 	beq	r9,zero,802144 <___vfprintf_internal_r+0x30c>
  80211c:	00800b44 	movi	r2,45
  802120:	d8800805 	stb	r2,32(sp)
  802124:	88800117 	ldw	r2,4(r17)
  802128:	01c00044 	movi	r7,1
  80212c:	d9800804 	addi	r6,sp,32
  802130:	880b883a 	mov	r5,r17
  802134:	a009883a 	mov	r4,r20
  802138:	103ee83a 	callr	r2
  80213c:	10004a1e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  802140:	84000044 	addi	r16,r16,1
  802144:	0580070e 	bge	zero,r22,802164 <___vfprintf_internal_r+0x32c>
  802148:	b00f883a 	mov	r7,r22
  80214c:	01800c04 	movi	r6,48
  802150:	880b883a 	mov	r5,r17
  802154:	a009883a 	mov	r4,r20
  802158:	0801dcc0 	call	801dcc <print_repeat>
  80215c:	1000421e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  802160:	85a1883a 	add	r16,r16,r22
  802164:	e02d883a 	mov	r22,fp
  802168:	bf2fc83a 	sub	r23,r23,fp
  80216c:	00002006 	br	8021f0 <___vfprintf_internal_r+0x3b8>
  802170:	0580090e 	bge	zero,r22,802198 <___vfprintf_internal_r+0x360>
  802174:	b00f883a 	mov	r7,r22
  802178:	01800804 	movi	r6,32
  80217c:	880b883a 	mov	r5,r17
  802180:	a009883a 	mov	r4,r20
  802184:	da401015 	stw	r9,64(sp)
  802188:	0801dcc0 	call	801dcc <print_repeat>
  80218c:	da401017 	ldw	r9,64(sp)
  802190:	1000351e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  802194:	85a1883a 	add	r16,r16,r22
  802198:	483ff226 	beq	r9,zero,802164 <__alt_data_end+0xff802164>
  80219c:	00800b44 	movi	r2,45
  8021a0:	d8800805 	stb	r2,32(sp)
  8021a4:	88800117 	ldw	r2,4(r17)
  8021a8:	01c00044 	movi	r7,1
  8021ac:	d9800804 	addi	r6,sp,32
  8021b0:	880b883a 	mov	r5,r17
  8021b4:	a009883a 	mov	r4,r20
  8021b8:	103ee83a 	callr	r2
  8021bc:	10002a1e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  8021c0:	84000044 	addi	r16,r16,1
  8021c4:	003fe706 	br	802164 <__alt_data_end+0xff802164>
  8021c8:	b5bfffc4 	addi	r22,r22,-1
  8021cc:	b0800003 	ldbu	r2,0(r22)
  8021d0:	01c00044 	movi	r7,1
  8021d4:	d9800804 	addi	r6,sp,32
  8021d8:	d8800805 	stb	r2,32(sp)
  8021dc:	88800117 	ldw	r2,4(r17)
  8021e0:	880b883a 	mov	r5,r17
  8021e4:	a009883a 	mov	r4,r20
  8021e8:	103ee83a 	callr	r2
  8021ec:	10001e1e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  8021f0:	8585c83a 	sub	r2,r16,r22
  8021f4:	b5c9883a 	add	r4,r22,r23
  8021f8:	e085883a 	add	r2,fp,r2
  8021fc:	013ff216 	blt	zero,r4,8021c8 <__alt_data_end+0xff8021c8>
  802200:	1021883a 	mov	r16,r2
  802204:	dd800d17 	ldw	r22,52(sp)
  802208:	00004406 	br	80231c <___vfprintf_internal_r+0x4e4>
  80220c:	00800044 	movi	r2,1
  802210:	1480080e 	bge	r2,r18,802234 <___vfprintf_internal_r+0x3fc>
  802214:	95ffffc4 	addi	r23,r18,-1
  802218:	b80f883a 	mov	r7,r23
  80221c:	01800804 	movi	r6,32
  802220:	880b883a 	mov	r5,r17
  802224:	a009883a 	mov	r4,r20
  802228:	0801dcc0 	call	801dcc <print_repeat>
  80222c:	10000e1e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  802230:	85e1883a 	add	r16,r16,r23
  802234:	b0800017 	ldw	r2,0(r22)
  802238:	01c00044 	movi	r7,1
  80223c:	d80d883a 	mov	r6,sp
  802240:	d8800005 	stb	r2,0(sp)
  802244:	88800117 	ldw	r2,4(r17)
  802248:	880b883a 	mov	r5,r17
  80224c:	a009883a 	mov	r4,r20
  802250:	b5c00104 	addi	r23,r22,4
  802254:	103ee83a 	callr	r2
  802258:	1000031e 	bne	r2,zero,802268 <___vfprintf_internal_r+0x430>
  80225c:	84000044 	addi	r16,r16,1
  802260:	b82d883a 	mov	r22,r23
  802264:	00002d06 	br	80231c <___vfprintf_internal_r+0x4e4>
  802268:	00bfffc4 	movi	r2,-1
  80226c:	00003106 	br	802334 <___vfprintf_internal_r+0x4fc>
  802270:	b5c00017 	ldw	r23,0(r22)
  802274:	b7000104 	addi	fp,r22,4
  802278:	b809883a 	mov	r4,r23
  80227c:	0801db00 	call	801db0 <strlen>
  802280:	9091c83a 	sub	r8,r18,r2
  802284:	102d883a 	mov	r22,r2
  802288:	0200090e 	bge	zero,r8,8022b0 <___vfprintf_internal_r+0x478>
  80228c:	400f883a 	mov	r7,r8
  802290:	01800804 	movi	r6,32
  802294:	880b883a 	mov	r5,r17
  802298:	a009883a 	mov	r4,r20
  80229c:	da001015 	stw	r8,64(sp)
  8022a0:	0801dcc0 	call	801dcc <print_repeat>
  8022a4:	da001017 	ldw	r8,64(sp)
  8022a8:	103fef1e 	bne	r2,zero,802268 <__alt_data_end+0xff802268>
  8022ac:	8221883a 	add	r16,r16,r8
  8022b0:	88800117 	ldw	r2,4(r17)
  8022b4:	b00f883a 	mov	r7,r22
  8022b8:	b80d883a 	mov	r6,r23
  8022bc:	880b883a 	mov	r5,r17
  8022c0:	a009883a 	mov	r4,r20
  8022c4:	103ee83a 	callr	r2
  8022c8:	103fe71e 	bne	r2,zero,802268 <__alt_data_end+0xff802268>
  8022cc:	85a1883a 	add	r16,r16,r22
  8022d0:	e02d883a 	mov	r22,fp
  8022d4:	00001106 	br	80231c <___vfprintf_internal_r+0x4e4>
  8022d8:	00c00044 	movi	r3,1
  8022dc:	04ffffc4 	movi	r19,-1
  8022e0:	d8000e15 	stw	zero,56(sp)
  8022e4:	d8c00a15 	stw	r3,40(sp)
  8022e8:	05400284 	movi	r21,10
  8022ec:	9825883a 	mov	r18,r19
  8022f0:	d8000c15 	stw	zero,48(sp)
  8022f4:	d8000b15 	stw	zero,44(sp)
  8022f8:	182f883a 	mov	r23,r3
  8022fc:	00000806 	br	802320 <___vfprintf_internal_r+0x4e8>
  802300:	ddc00b15 	stw	r23,44(sp)
  802304:	05c00084 	movi	r23,2
  802308:	00000506 	br	802320 <___vfprintf_internal_r+0x4e8>
  80230c:	00c00044 	movi	r3,1
  802310:	d8c00c15 	stw	r3,48(sp)
  802314:	05c000c4 	movi	r23,3
  802318:	00000106 	br	802320 <___vfprintf_internal_r+0x4e8>
  80231c:	002f883a 	mov	r23,zero
  802320:	d8c00f17 	ldw	r3,60(sp)
  802324:	18c00044 	addi	r3,r3,1
  802328:	d8c00f15 	stw	r3,60(sp)
  80232c:	003edc06 	br	801ea0 <__alt_data_end+0xff801ea0>
  802330:	8005883a 	mov	r2,r16
  802334:	dfc01a17 	ldw	ra,104(sp)
  802338:	df001917 	ldw	fp,100(sp)
  80233c:	ddc01817 	ldw	r23,96(sp)
  802340:	dd801717 	ldw	r22,92(sp)
  802344:	dd401617 	ldw	r21,88(sp)
  802348:	dd001517 	ldw	r20,84(sp)
  80234c:	dcc01417 	ldw	r19,80(sp)
  802350:	dc801317 	ldw	r18,76(sp)
  802354:	dc401217 	ldw	r17,72(sp)
  802358:	dc001117 	ldw	r16,68(sp)
  80235c:	dec01b04 	addi	sp,sp,108
  802360:	f800283a 	ret

00802364 <__vfprintf_internal>:
  802364:	00802034 	movhi	r2,128
  802368:	10927e04 	addi	r2,r2,18936
  80236c:	300f883a 	mov	r7,r6
  802370:	280d883a 	mov	r6,r5
  802374:	200b883a 	mov	r5,r4
  802378:	11000017 	ldw	r4,0(r2)
  80237c:	0801e381 	jmpi	801e38 <___vfprintf_internal_r>

00802380 <__sfvwrite_small_dev>:
  802380:	2880000b 	ldhu	r2,0(r5)
  802384:	1080020c 	andi	r2,r2,8
  802388:	10002126 	beq	r2,zero,802410 <__sfvwrite_small_dev+0x90>
  80238c:	2880008f 	ldh	r2,2(r5)
  802390:	defffa04 	addi	sp,sp,-24
  802394:	dc000015 	stw	r16,0(sp)
  802398:	dfc00515 	stw	ra,20(sp)
  80239c:	dd000415 	stw	r20,16(sp)
  8023a0:	dcc00315 	stw	r19,12(sp)
  8023a4:	dc800215 	stw	r18,8(sp)
  8023a8:	dc400115 	stw	r17,4(sp)
  8023ac:	2821883a 	mov	r16,r5
  8023b0:	10001216 	blt	r2,zero,8023fc <__sfvwrite_small_dev+0x7c>
  8023b4:	2027883a 	mov	r19,r4
  8023b8:	3025883a 	mov	r18,r6
  8023bc:	3823883a 	mov	r17,r7
  8023c0:	05010004 	movi	r20,1024
  8023c4:	04400b0e 	bge	zero,r17,8023f4 <__sfvwrite_small_dev+0x74>
  8023c8:	880f883a 	mov	r7,r17
  8023cc:	a440010e 	bge	r20,r17,8023d4 <__sfvwrite_small_dev+0x54>
  8023d0:	01c10004 	movi	r7,1024
  8023d4:	8140008f 	ldh	r5,2(r16)
  8023d8:	900d883a 	mov	r6,r18
  8023dc:	9809883a 	mov	r4,r19
  8023e0:	08024e40 	call	8024e4 <_write_r>
  8023e4:	0080050e 	bge	zero,r2,8023fc <__sfvwrite_small_dev+0x7c>
  8023e8:	88a3c83a 	sub	r17,r17,r2
  8023ec:	90a5883a 	add	r18,r18,r2
  8023f0:	003ff406 	br	8023c4 <__alt_data_end+0xff8023c4>
  8023f4:	0005883a 	mov	r2,zero
  8023f8:	00000706 	br	802418 <__sfvwrite_small_dev+0x98>
  8023fc:	8080000b 	ldhu	r2,0(r16)
  802400:	10801014 	ori	r2,r2,64
  802404:	8080000d 	sth	r2,0(r16)
  802408:	00bfffc4 	movi	r2,-1
  80240c:	00000206 	br	802418 <__sfvwrite_small_dev+0x98>
  802410:	00bfffc4 	movi	r2,-1
  802414:	f800283a 	ret
  802418:	dfc00517 	ldw	ra,20(sp)
  80241c:	dd000417 	ldw	r20,16(sp)
  802420:	dcc00317 	ldw	r19,12(sp)
  802424:	dc800217 	ldw	r18,8(sp)
  802428:	dc400117 	ldw	r17,4(sp)
  80242c:	dc000017 	ldw	r16,0(sp)
  802430:	dec00604 	addi	sp,sp,24
  802434:	f800283a 	ret

00802438 <putc>:
  802438:	defffd04 	addi	sp,sp,-12
  80243c:	00802034 	movhi	r2,128
  802440:	dc000115 	stw	r16,4(sp)
  802444:	dfc00215 	stw	ra,8(sp)
  802448:	1088e004 	addi	r2,r2,9088
  80244c:	28800115 	stw	r2,4(r5)
  802450:	00802034 	movhi	r2,128
  802454:	10927e04 	addi	r2,r2,18936
  802458:	d9000005 	stb	r4,0(sp)
  80245c:	2021883a 	mov	r16,r4
  802460:	11000017 	ldw	r4,0(r2)
  802464:	01c00044 	movi	r7,1
  802468:	d80d883a 	mov	r6,sp
  80246c:	08023800 	call	802380 <__sfvwrite_small_dev>
  802470:	00ffffc4 	movi	r3,-1
  802474:	10c00126 	beq	r2,r3,80247c <putc+0x44>
  802478:	8005883a 	mov	r2,r16
  80247c:	dfc00217 	ldw	ra,8(sp)
  802480:	dc000117 	ldw	r16,4(sp)
  802484:	dec00304 	addi	sp,sp,12
  802488:	f800283a 	ret

0080248c <_putc_r>:
  80248c:	defffd04 	addi	sp,sp,-12
  802490:	00802034 	movhi	r2,128
  802494:	dc000115 	stw	r16,4(sp)
  802498:	dfc00215 	stw	ra,8(sp)
  80249c:	1088e004 	addi	r2,r2,9088
  8024a0:	30800115 	stw	r2,4(r6)
  8024a4:	00802034 	movhi	r2,128
  8024a8:	10927e04 	addi	r2,r2,18936
  8024ac:	11000017 	ldw	r4,0(r2)
  8024b0:	2821883a 	mov	r16,r5
  8024b4:	01c00044 	movi	r7,1
  8024b8:	300b883a 	mov	r5,r6
  8024bc:	d80d883a 	mov	r6,sp
  8024c0:	dc000005 	stb	r16,0(sp)
  8024c4:	08023800 	call	802380 <__sfvwrite_small_dev>
  8024c8:	00ffffc4 	movi	r3,-1
  8024cc:	10c00126 	beq	r2,r3,8024d4 <_putc_r+0x48>
  8024d0:	8005883a 	mov	r2,r16
  8024d4:	dfc00217 	ldw	ra,8(sp)
  8024d8:	dc000117 	ldw	r16,4(sp)
  8024dc:	dec00304 	addi	sp,sp,12
  8024e0:	f800283a 	ret

008024e4 <_write_r>:
  8024e4:	defffd04 	addi	sp,sp,-12
  8024e8:	dc000015 	stw	r16,0(sp)
  8024ec:	04002034 	movhi	r16,128
  8024f0:	dc400115 	stw	r17,4(sp)
  8024f4:	84145804 	addi	r16,r16,20832
  8024f8:	2023883a 	mov	r17,r4
  8024fc:	2809883a 	mov	r4,r5
  802500:	300b883a 	mov	r5,r6
  802504:	380d883a 	mov	r6,r7
  802508:	dfc00215 	stw	ra,8(sp)
  80250c:	80000015 	stw	zero,0(r16)
  802510:	08027940 	call	802794 <write>
  802514:	00ffffc4 	movi	r3,-1
  802518:	10c0031e 	bne	r2,r3,802528 <_write_r+0x44>
  80251c:	80c00017 	ldw	r3,0(r16)
  802520:	18000126 	beq	r3,zero,802528 <_write_r+0x44>
  802524:	88c00015 	stw	r3,0(r17)
  802528:	dfc00217 	ldw	ra,8(sp)
  80252c:	dc400117 	ldw	r17,4(sp)
  802530:	dc000017 	ldw	r16,0(sp)
  802534:	dec00304 	addi	sp,sp,12
  802538:	f800283a 	ret

0080253c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80253c:	defffc04 	addi	sp,sp,-16
  802540:	df000315 	stw	fp,12(sp)
  802544:	df000304 	addi	fp,sp,12
  802548:	e13ffd15 	stw	r4,-12(fp)
  80254c:	e17ffe15 	stw	r5,-8(fp)
  802550:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  802554:	e0fffe17 	ldw	r3,-8(fp)
  802558:	e0bffd17 	ldw	r2,-12(fp)
  80255c:	18800c26 	beq	r3,r2,802590 <alt_load_section+0x54>
  {
    while( to != end )
  802560:	00000806 	br	802584 <alt_load_section+0x48>
    {
      *to++ = *from++;
  802564:	e0bffe17 	ldw	r2,-8(fp)
  802568:	10c00104 	addi	r3,r2,4
  80256c:	e0fffe15 	stw	r3,-8(fp)
  802570:	e0fffd17 	ldw	r3,-12(fp)
  802574:	19000104 	addi	r4,r3,4
  802578:	e13ffd15 	stw	r4,-12(fp)
  80257c:	18c00017 	ldw	r3,0(r3)
  802580:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  802584:	e0fffe17 	ldw	r3,-8(fp)
  802588:	e0bfff17 	ldw	r2,-4(fp)
  80258c:	18bff51e 	bne	r3,r2,802564 <__alt_data_end+0xff802564>
    {
      *to++ = *from++;
    }
  }
}
  802590:	0001883a 	nop
  802594:	e037883a 	mov	sp,fp
  802598:	df000017 	ldw	fp,0(sp)
  80259c:	dec00104 	addi	sp,sp,4
  8025a0:	f800283a 	ret

008025a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8025a4:	defffe04 	addi	sp,sp,-8
  8025a8:	dfc00115 	stw	ra,4(sp)
  8025ac:	df000015 	stw	fp,0(sp)
  8025b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8025b4:	01802034 	movhi	r6,128
  8025b8:	31928904 	addi	r6,r6,18980
  8025bc:	01402034 	movhi	r5,128
  8025c0:	2950bf04 	addi	r5,r5,17148
  8025c4:	01002034 	movhi	r4,128
  8025c8:	21128904 	addi	r4,r4,18980
  8025cc:	080253c0 	call	80253c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8025d0:	01802034 	movhi	r6,128
  8025d4:	31808c04 	addi	r6,r6,560
  8025d8:	01402034 	movhi	r5,128
  8025dc:	29400804 	addi	r5,r5,32
  8025e0:	01002034 	movhi	r4,128
  8025e4:	21000804 	addi	r4,r4,32
  8025e8:	080253c0 	call	80253c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8025ec:	01802034 	movhi	r6,128
  8025f0:	3190bf04 	addi	r6,r6,17148
  8025f4:	01402034 	movhi	r5,128
  8025f8:	29508904 	addi	r5,r5,16932
  8025fc:	01002034 	movhi	r4,128
  802600:	21108904 	addi	r4,r4,16932
  802604:	080253c0 	call	80253c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  802608:	08034200 	call	803420 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80260c:	08035f00 	call	8035f0 <alt_icache_flush_all>
}
  802610:	0001883a 	nop
  802614:	e037883a 	mov	sp,fp
  802618:	dfc00117 	ldw	ra,4(sp)
  80261c:	df000017 	ldw	fp,0(sp)
  802620:	dec00204 	addi	sp,sp,8
  802624:	f800283a 	ret

00802628 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  802628:	defffd04 	addi	sp,sp,-12
  80262c:	dfc00215 	stw	ra,8(sp)
  802630:	df000115 	stw	fp,4(sp)
  802634:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802638:	0009883a 	mov	r4,zero
  80263c:	08028cc0 	call	8028cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  802640:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  802644:	08029040 	call	802904 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  802648:	01802034 	movhi	r6,128
  80264c:	3190a904 	addi	r6,r6,17060
  802650:	01402034 	movhi	r5,128
  802654:	2950a904 	addi	r5,r5,17060
  802658:	01002034 	movhi	r4,128
  80265c:	2110a904 	addi	r4,r4,17060
  802660:	08039c40 	call	8039c4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  802664:	d0a1de17 	ldw	r2,-30856(gp)
  802668:	d0e1df17 	ldw	r3,-30852(gp)
  80266c:	d121e017 	ldw	r4,-30848(gp)
  802670:	200d883a 	mov	r6,r4
  802674:	180b883a 	mov	r5,r3
  802678:	1009883a 	mov	r4,r2
  80267c:	080026c0 	call	80026c <main>
  802680:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  802684:	01000044 	movi	r4,1
  802688:	08033480 	call	803348 <close>
  exit (result);
  80268c:	e13fff17 	ldw	r4,-4(fp)
  802690:	08040100 	call	804010 <exit>

00802694 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  802694:	defff904 	addi	sp,sp,-28
  802698:	df000615 	stw	fp,24(sp)
  80269c:	df000604 	addi	fp,sp,24
  8026a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8026a4:	0005303a 	rdctl	r2,status
  8026a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8026ac:	e0fffe17 	ldw	r3,-8(fp)
  8026b0:	00bfff84 	movi	r2,-2
  8026b4:	1884703a 	and	r2,r3,r2
  8026b8:	1001703a 	wrctl	status,r2
  
  return context;
  8026bc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8026c0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8026c4:	d0a00417 	ldw	r2,-32752(gp)
  8026c8:	10c000c4 	addi	r3,r2,3
  8026cc:	00bfff04 	movi	r2,-4
  8026d0:	1884703a 	and	r2,r3,r2
  8026d4:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8026d8:	d0e00417 	ldw	r3,-32752(gp)
  8026dc:	e0bfff17 	ldw	r2,-4(fp)
  8026e0:	1887883a 	add	r3,r3,r2
  8026e4:	00804034 	movhi	r2,256
  8026e8:	10800004 	addi	r2,r2,0
  8026ec:	10c0062e 	bgeu	r2,r3,802708 <sbrk+0x74>
  8026f0:	e0bffb17 	ldw	r2,-20(fp)
  8026f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8026f8:	e0bffa17 	ldw	r2,-24(fp)
  8026fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  802700:	00bfffc4 	movi	r2,-1
  802704:	00000b06 	br	802734 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  802708:	d0a00417 	ldw	r2,-32752(gp)
  80270c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  802710:	d0e00417 	ldw	r3,-32752(gp)
  802714:	e0bfff17 	ldw	r2,-4(fp)
  802718:	1885883a 	add	r2,r3,r2
  80271c:	d0a00415 	stw	r2,-32752(gp)
  802720:	e0bffb17 	ldw	r2,-20(fp)
  802724:	e0bffc15 	stw	r2,-16(fp)
  802728:	e0bffc17 	ldw	r2,-16(fp)
  80272c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  802730:	e0bffd17 	ldw	r2,-12(fp)
} 
  802734:	e037883a 	mov	sp,fp
  802738:	df000017 	ldw	fp,0(sp)
  80273c:	dec00104 	addi	sp,sp,4
  802740:	f800283a 	ret

00802744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802744:	defffe04 	addi	sp,sp,-8
  802748:	dfc00115 	stw	ra,4(sp)
  80274c:	df000015 	stw	fp,0(sp)
  802750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802754:	00802034 	movhi	r2,128
  802758:	10928704 	addi	r2,r2,18972
  80275c:	10800017 	ldw	r2,0(r2)
  802760:	10000526 	beq	r2,zero,802778 <alt_get_errno+0x34>
  802764:	00802034 	movhi	r2,128
  802768:	10928704 	addi	r2,r2,18972
  80276c:	10800017 	ldw	r2,0(r2)
  802770:	103ee83a 	callr	r2
  802774:	00000206 	br	802780 <alt_get_errno+0x3c>
  802778:	00802034 	movhi	r2,128
  80277c:	10945804 	addi	r2,r2,20832
}
  802780:	e037883a 	mov	sp,fp
  802784:	dfc00117 	ldw	ra,4(sp)
  802788:	df000017 	ldw	fp,0(sp)
  80278c:	dec00204 	addi	sp,sp,8
  802790:	f800283a 	ret

00802794 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  802794:	defff904 	addi	sp,sp,-28
  802798:	dfc00615 	stw	ra,24(sp)
  80279c:	df000515 	stw	fp,20(sp)
  8027a0:	df000504 	addi	fp,sp,20
  8027a4:	e13ffd15 	stw	r4,-12(fp)
  8027a8:	e17ffe15 	stw	r5,-8(fp)
  8027ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8027b0:	e0bffd17 	ldw	r2,-12(fp)
  8027b4:	10000816 	blt	r2,zero,8027d8 <write+0x44>
  8027b8:	01400304 	movi	r5,12
  8027bc:	e13ffd17 	ldw	r4,-12(fp)
  8027c0:	08018d40 	call	8018d4 <__mulsi3>
  8027c4:	1007883a 	mov	r3,r2
  8027c8:	00802034 	movhi	r2,128
  8027cc:	10921b04 	addi	r2,r2,18540
  8027d0:	1885883a 	add	r2,r3,r2
  8027d4:	00000106 	br	8027dc <write+0x48>
  8027d8:	0005883a 	mov	r2,zero
  8027dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8027e0:	e0bffb17 	ldw	r2,-20(fp)
  8027e4:	10002126 	beq	r2,zero,80286c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8027e8:	e0bffb17 	ldw	r2,-20(fp)
  8027ec:	10800217 	ldw	r2,8(r2)
  8027f0:	108000cc 	andi	r2,r2,3
  8027f4:	10001826 	beq	r2,zero,802858 <write+0xc4>
  8027f8:	e0bffb17 	ldw	r2,-20(fp)
  8027fc:	10800017 	ldw	r2,0(r2)
  802800:	10800617 	ldw	r2,24(r2)
  802804:	10001426 	beq	r2,zero,802858 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  802808:	e0bffb17 	ldw	r2,-20(fp)
  80280c:	10800017 	ldw	r2,0(r2)
  802810:	10800617 	ldw	r2,24(r2)
  802814:	e0ffff17 	ldw	r3,-4(fp)
  802818:	180d883a 	mov	r6,r3
  80281c:	e17ffe17 	ldw	r5,-8(fp)
  802820:	e13ffb17 	ldw	r4,-20(fp)
  802824:	103ee83a 	callr	r2
  802828:	e0bffc15 	stw	r2,-16(fp)
  80282c:	e0bffc17 	ldw	r2,-16(fp)
  802830:	1000070e 	bge	r2,zero,802850 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  802834:	08027440 	call	802744 <alt_get_errno>
  802838:	1007883a 	mov	r3,r2
  80283c:	e0bffc17 	ldw	r2,-16(fp)
  802840:	0085c83a 	sub	r2,zero,r2
  802844:	18800015 	stw	r2,0(r3)
        return -1;
  802848:	00bfffc4 	movi	r2,-1
  80284c:	00000c06 	br	802880 <write+0xec>
      }
      return rval;
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	00000a06 	br	802880 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  802858:	08027440 	call	802744 <alt_get_errno>
  80285c:	1007883a 	mov	r3,r2
  802860:	00800344 	movi	r2,13
  802864:	18800015 	stw	r2,0(r3)
  802868:	00000406 	br	80287c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80286c:	08027440 	call	802744 <alt_get_errno>
  802870:	1007883a 	mov	r3,r2
  802874:	00801444 	movi	r2,81
  802878:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80287c:	00bfffc4 	movi	r2,-1
}
  802880:	e037883a 	mov	sp,fp
  802884:	dfc00117 	ldw	ra,4(sp)
  802888:	df000017 	ldw	fp,0(sp)
  80288c:	dec00204 	addi	sp,sp,8
  802890:	f800283a 	ret

00802894 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  802894:	defffd04 	addi	sp,sp,-12
  802898:	dfc00215 	stw	ra,8(sp)
  80289c:	df000115 	stw	fp,4(sp)
  8028a0:	df000104 	addi	fp,sp,4
  8028a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8028a8:	01402034 	movhi	r5,128
  8028ac:	29528404 	addi	r5,r5,18960
  8028b0:	e13fff17 	ldw	r4,-4(fp)
  8028b4:	08034bc0 	call	8034bc <alt_dev_llist_insert>
}
  8028b8:	e037883a 	mov	sp,fp
  8028bc:	dfc00117 	ldw	ra,4(sp)
  8028c0:	df000017 	ldw	fp,0(sp)
  8028c4:	dec00204 	addi	sp,sp,8
  8028c8:	f800283a 	ret

008028cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8028cc:	defffd04 	addi	sp,sp,-12
  8028d0:	dfc00215 	stw	ra,8(sp)
  8028d4:	df000115 	stw	fp,4(sp)
  8028d8:	df000104 	addi	fp,sp,4
  8028dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, Nios2_CPU);
  8028e0:	0803d680 	call	803d68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8028e4:	00800044 	movi	r2,1
  8028e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8028ec:	0001883a 	nop
  8028f0:	e037883a 	mov	sp,fp
  8028f4:	dfc00117 	ldw	ra,4(sp)
  8028f8:	df000017 	ldw	fp,0(sp)
  8028fc:	dec00204 	addi	sp,sp,8
  802900:	f800283a 	ret

00802904 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  802904:	defffe04 	addi	sp,sp,-8
  802908:	dfc00115 	stw	ra,4(sp)
  80290c:	df000015 	stw	fp,0(sp)
  802910:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  802914:	01002034 	movhi	r4,128
  802918:	2111f704 	addi	r4,r4,18396
  80291c:	08028940 	call	802894 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
  802920:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802924:	01bfffc4 	movi	r6,-1
  802928:	017fffc4 	movi	r5,-1
  80292c:	01002034 	movhi	r4,128
  802930:	21120204 	addi	r4,r4,18440
  802934:	0802ee00 	call	802ee0 <altera_modular_adc_init>
}
  802938:	0001883a 	nop
  80293c:	e037883a 	mov	sp,fp
  802940:	dfc00117 	ldw	ra,4(sp)
  802944:	df000017 	ldw	fp,0(sp)
  802948:	dec00204 	addi	sp,sp,8
  80294c:	f800283a 	ret

00802950 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802950:	defffa04 	addi	sp,sp,-24
  802954:	dfc00515 	stw	ra,20(sp)
  802958:	df000415 	stw	fp,16(sp)
  80295c:	df000404 	addi	fp,sp,16
  802960:	e13ffd15 	stw	r4,-12(fp)
  802964:	e17ffe15 	stw	r5,-8(fp)
  802968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80296c:	e0bffd17 	ldw	r2,-12(fp)
  802970:	10800017 	ldw	r2,0(r2)
  802974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  802978:	e0bffc17 	ldw	r2,-16(fp)
  80297c:	10c00a04 	addi	r3,r2,40
  802980:	e0bffd17 	ldw	r2,-12(fp)
  802984:	10800217 	ldw	r2,8(r2)
  802988:	100f883a 	mov	r7,r2
  80298c:	e1bfff17 	ldw	r6,-4(fp)
  802990:	e17ffe17 	ldw	r5,-8(fp)
  802994:	1809883a 	mov	r4,r3
  802998:	0802a100 	call	802a10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80299c:	e037883a 	mov	sp,fp
  8029a0:	dfc00117 	ldw	ra,4(sp)
  8029a4:	df000017 	ldw	fp,0(sp)
  8029a8:	dec00204 	addi	sp,sp,8
  8029ac:	f800283a 	ret

008029b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8029b0:	defffa04 	addi	sp,sp,-24
  8029b4:	dfc00515 	stw	ra,20(sp)
  8029b8:	df000415 	stw	fp,16(sp)
  8029bc:	df000404 	addi	fp,sp,16
  8029c0:	e13ffd15 	stw	r4,-12(fp)
  8029c4:	e17ffe15 	stw	r5,-8(fp)
  8029c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8029cc:	e0bffd17 	ldw	r2,-12(fp)
  8029d0:	10800017 	ldw	r2,0(r2)
  8029d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8029d8:	e0bffc17 	ldw	r2,-16(fp)
  8029dc:	10c00a04 	addi	r3,r2,40
  8029e0:	e0bffd17 	ldw	r2,-12(fp)
  8029e4:	10800217 	ldw	r2,8(r2)
  8029e8:	100f883a 	mov	r7,r2
  8029ec:	e1bfff17 	ldw	r6,-4(fp)
  8029f0:	e17ffe17 	ldw	r5,-8(fp)
  8029f4:	1809883a 	mov	r4,r3
  8029f8:	0802afc0 	call	802afc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8029fc:	e037883a 	mov	sp,fp
  802a00:	dfc00117 	ldw	ra,4(sp)
  802a04:	df000017 	ldw	fp,0(sp)
  802a08:	dec00204 	addi	sp,sp,8
  802a0c:	f800283a 	ret

00802a10 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  802a10:	defff704 	addi	sp,sp,-36
  802a14:	df000815 	stw	fp,32(sp)
  802a18:	df000804 	addi	fp,sp,32
  802a1c:	e13ffc15 	stw	r4,-16(fp)
  802a20:	e17ffd15 	stw	r5,-12(fp)
  802a24:	e1bffe15 	stw	r6,-8(fp)
  802a28:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  802a2c:	e0bffc17 	ldw	r2,-16(fp)
  802a30:	10800017 	ldw	r2,0(r2)
  802a34:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  802a38:	e0bffd17 	ldw	r2,-12(fp)
  802a3c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  802a40:	e0bffe17 	ldw	r2,-8(fp)
  802a44:	e0fffd17 	ldw	r3,-12(fp)
  802a48:	1885883a 	add	r2,r3,r2
  802a4c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  802a50:	00001206 	br	802a9c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  802a54:	e0bff917 	ldw	r2,-28(fp)
  802a58:	10800037 	ldwio	r2,0(r2)
  802a5c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  802a60:	e0bffb17 	ldw	r2,-20(fp)
  802a64:	10a0000c 	andi	r2,r2,32768
  802a68:	10000626 	beq	r2,zero,802a84 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  802a6c:	e0bff817 	ldw	r2,-32(fp)
  802a70:	10c00044 	addi	r3,r2,1
  802a74:	e0fff815 	stw	r3,-32(fp)
  802a78:	e0fffb17 	ldw	r3,-20(fp)
  802a7c:	10c00005 	stb	r3,0(r2)
  802a80:	00000606 	br	802a9c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  802a84:	e0fff817 	ldw	r3,-32(fp)
  802a88:	e0bffd17 	ldw	r2,-12(fp)
  802a8c:	1880071e 	bne	r3,r2,802aac <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  802a90:	e0bfff17 	ldw	r2,-4(fp)
  802a94:	1090000c 	andi	r2,r2,16384
  802a98:	1000061e 	bne	r2,zero,802ab4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  802a9c:	e0fff817 	ldw	r3,-32(fp)
  802aa0:	e0bffa17 	ldw	r2,-24(fp)
  802aa4:	18bfeb36 	bltu	r3,r2,802a54 <__alt_data_end+0xff802a54>
  802aa8:	00000306 	br	802ab8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  802aac:	0001883a 	nop
  802ab0:	00000106 	br	802ab8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  802ab4:	0001883a 	nop
    
  }

  if (ptr != buffer)
  802ab8:	e0fff817 	ldw	r3,-32(fp)
  802abc:	e0bffd17 	ldw	r2,-12(fp)
  802ac0:	18800426 	beq	r3,r2,802ad4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  802ac4:	e0fff817 	ldw	r3,-32(fp)
  802ac8:	e0bffd17 	ldw	r2,-12(fp)
  802acc:	1885c83a 	sub	r2,r3,r2
  802ad0:	00000606 	br	802aec <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  802ad4:	e0bfff17 	ldw	r2,-4(fp)
  802ad8:	1090000c 	andi	r2,r2,16384
  802adc:	10000226 	beq	r2,zero,802ae8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  802ae0:	00bffd44 	movi	r2,-11
  802ae4:	00000106 	br	802aec <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  802ae8:	00bffec4 	movi	r2,-5
}
  802aec:	e037883a 	mov	sp,fp
  802af0:	df000017 	ldw	fp,0(sp)
  802af4:	dec00104 	addi	sp,sp,4
  802af8:	f800283a 	ret

00802afc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  802afc:	defff904 	addi	sp,sp,-28
  802b00:	df000615 	stw	fp,24(sp)
  802b04:	df000604 	addi	fp,sp,24
  802b08:	e13ffc15 	stw	r4,-16(fp)
  802b0c:	e17ffd15 	stw	r5,-12(fp)
  802b10:	e1bffe15 	stw	r6,-8(fp)
  802b14:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  802b18:	e0bffc17 	ldw	r2,-16(fp)
  802b1c:	10800017 	ldw	r2,0(r2)
  802b20:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  802b24:	e0bffe17 	ldw	r2,-8(fp)
  802b28:	e0fffd17 	ldw	r3,-12(fp)
  802b2c:	1885883a 	add	r2,r3,r2
  802b30:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  802b34:	00000e06 	br	802b70 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  802b38:	e0bffa17 	ldw	r2,-24(fp)
  802b3c:	10800104 	addi	r2,r2,4
  802b40:	10800037 	ldwio	r2,0(r2)
  802b44:	10bfffec 	andhi	r2,r2,65535
  802b48:	10000926 	beq	r2,zero,802b70 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  802b4c:	e0fffa17 	ldw	r3,-24(fp)
  802b50:	e0bffd17 	ldw	r2,-12(fp)
  802b54:	11000044 	addi	r4,r2,1
  802b58:	e13ffd15 	stw	r4,-12(fp)
  802b5c:	10800003 	ldbu	r2,0(r2)
  802b60:	10803fcc 	andi	r2,r2,255
  802b64:	1080201c 	xori	r2,r2,128
  802b68:	10bfe004 	addi	r2,r2,-128
  802b6c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  802b70:	e0fffd17 	ldw	r3,-12(fp)
  802b74:	e0bffb17 	ldw	r2,-20(fp)
  802b78:	18bfef36 	bltu	r3,r2,802b38 <__alt_data_end+0xff802b38>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  802b7c:	e0bffe17 	ldw	r2,-8(fp)
}
  802b80:	e037883a 	mov	sp,fp
  802b84:	df000017 	ldw	fp,0(sp)
  802b88:	dec00104 	addi	sp,sp,4
  802b8c:	f800283a 	ret

00802b90 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  802b90:	defff404 	addi	sp,sp,-48
  802b94:	df000b15 	stw	fp,44(sp)
  802b98:	df000b04 	addi	fp,sp,44
  802b9c:	e13ffc15 	stw	r4,-16(fp)
  802ba0:	e17ffd15 	stw	r5,-12(fp)
  802ba4:	e1bffe15 	stw	r6,-8(fp)
  802ba8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  802bac:	e0ffff17 	ldw	r3,-4(fp)
  802bb0:	e0bffe17 	ldw	r2,-8(fp)
  802bb4:	1885883a 	add	r2,r3,r2
  802bb8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  802bbc:	e0c00217 	ldw	r3,8(fp)
  802bc0:	e0800117 	ldw	r2,4(fp)
  802bc4:	1885883a 	add	r2,r3,r2
  802bc8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  802bcc:	e0800117 	ldw	r2,4(fp)
  802bd0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  802bd4:	e0bffe17 	ldw	r2,-8(fp)
  802bd8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  802bdc:	00800044 	movi	r2,1
  802be0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	10800504 	addi	r2,r2,20
  802bec:	1009883a 	mov	r4,r2
  802bf0:	00c00044 	movi	r3,1
  802bf4:	e0bffd17 	ldw	r2,-12(fp)
  802bf8:	1884983a 	sll	r2,r3,r2
  802bfc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  802c00:	e0800317 	ldw	r2,12(fp)
  802c04:	1080008c 	andi	r2,r2,2
  802c08:	1000051e 	bne	r2,zero,802c20 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  802c0c:	e0bffc17 	ldw	r2,-16(fp)
  802c10:	10800304 	addi	r2,r2,12
  802c14:	1007883a 	mov	r3,r2
  802c18:	00810004 	movi	r2,1024
  802c1c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802c28:	e0bffc17 	ldw	r2,-16(fp)
  802c2c:	10800204 	addi	r2,r2,8
  802c30:	10800037 	ldwio	r2,0(r2)
  802c34:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802c38:	e0bffa17 	ldw	r2,-24(fp)
  802c3c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  802c40:	10000226 	beq	r2,zero,802c4c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802c44:	e0bff717 	ldw	r2,-36(fp)
  802c48:	1000031e 	bne	r2,zero,802c58 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  802c4c:	e0bffa17 	ldw	r2,-24(fp)
  802c50:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802c54:	103ff426 	beq	r2,zero,802c28 <__alt_data_end+0xff802c28>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  802c58:	e0bffa17 	ldw	r2,-24(fp)
  802c5c:	1080100c 	andi	r2,r2,64
  802c60:	10001e26 	beq	r2,zero,802cdc <alt_avalon_spi_command+0x14c>
  802c64:	e0bff717 	ldw	r2,-36(fp)
  802c68:	00801c0e 	bge	zero,r2,802cdc <alt_avalon_spi_command+0x14c>
    {
      credits--;
  802c6c:	e0bff717 	ldw	r2,-36(fp)
  802c70:	10bfffc4 	addi	r2,r2,-1
  802c74:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  802c78:	e0ffff17 	ldw	r3,-4(fp)
  802c7c:	e0bff817 	ldw	r2,-32(fp)
  802c80:	18800a2e 	bgeu	r3,r2,802cac <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  802c84:	e0bffc17 	ldw	r2,-16(fp)
  802c88:	10800104 	addi	r2,r2,4
  802c8c:	1009883a 	mov	r4,r2
  802c90:	e0bfff17 	ldw	r2,-4(fp)
  802c94:	10c00044 	addi	r3,r2,1
  802c98:	e0ffff15 	stw	r3,-4(fp)
  802c9c:	10800003 	ldbu	r2,0(r2)
  802ca0:	10803fcc 	andi	r2,r2,255
  802ca4:	20800035 	stwio	r2,0(r4)
  802ca8:	00000c06 	br	802cdc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  802cac:	e0bff517 	ldw	r2,-44(fp)
  802cb0:	10000826 	beq	r2,zero,802cd4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  802cb4:	e0bff517 	ldw	r2,-44(fp)
  802cb8:	10bfffc4 	addi	r2,r2,-1
  802cbc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  802cc0:	e0bffc17 	ldw	r2,-16(fp)
  802cc4:	10800104 	addi	r2,r2,4
  802cc8:	0007883a 	mov	r3,zero
  802ccc:	10c00035 	stwio	r3,0(r2)
  802cd0:	00000206 	br	802cdc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  802cd4:	00bf0004 	movi	r2,-1024
  802cd8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  802cdc:	e0bffa17 	ldw	r2,-24(fp)
  802ce0:	1080200c 	andi	r2,r2,128
  802ce4:	103fd026 	beq	r2,zero,802c28 <__alt_data_end+0xff802c28>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  802ce8:	e0bffc17 	ldw	r2,-16(fp)
  802cec:	10800037 	ldwio	r2,0(r2)
  802cf0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  802cf4:	e0bff617 	ldw	r2,-40(fp)
  802cf8:	10000426 	beq	r2,zero,802d0c <alt_avalon_spi_command+0x17c>
        read_ignore--;
  802cfc:	e0bff617 	ldw	r2,-40(fp)
  802d00:	10bfffc4 	addi	r2,r2,-1
  802d04:	e0bff615 	stw	r2,-40(fp)
  802d08:	00000506 	br	802d20 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  802d0c:	e0800217 	ldw	r2,8(fp)
  802d10:	10c00044 	addi	r3,r2,1
  802d14:	e0c00215 	stw	r3,8(fp)
  802d18:	e0fffb17 	ldw	r3,-20(fp)
  802d1c:	10c00005 	stb	r3,0(r2)
      credits++;
  802d20:	e0bff717 	ldw	r2,-36(fp)
  802d24:	10800044 	addi	r2,r2,1
  802d28:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  802d2c:	e0bff617 	ldw	r2,-40(fp)
  802d30:	103fbd1e 	bne	r2,zero,802c28 <__alt_data_end+0xff802c28>
  802d34:	e0c00217 	ldw	r3,8(fp)
  802d38:	e0bff917 	ldw	r2,-28(fp)
  802d3c:	18bfba1e 	bne	r3,r2,802c28 <__alt_data_end+0xff802c28>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10800204 	addi	r2,r2,8
  802d48:	10800037 	ldwio	r2,0(r2)
  802d4c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  802d50:	e0bffa17 	ldw	r2,-24(fp)
  802d54:	1080080c 	andi	r2,r2,32
  802d58:	103ff926 	beq	r2,zero,802d40 <__alt_data_end+0xff802d40>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  802d5c:	e0800317 	ldw	r2,12(fp)
  802d60:	1080004c 	andi	r2,r2,1
  802d64:	1000041e 	bne	r2,zero,802d78 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10800304 	addi	r2,r2,12
  802d70:	0007883a 	mov	r3,zero
  802d74:	10c00035 	stwio	r3,0(r2)

  return read_length;
  802d78:	e0800117 	ldw	r2,4(fp)
}
  802d7c:	e037883a 	mov	sp,fp
  802d80:	df000017 	ldw	fp,0(sp)
  802d84:	dec00104 	addi	sp,sp,4
  802d88:	f800283a 	ret

00802d8c <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
  802d8c:	defff904 	addi	sp,sp,-28
  802d90:	dfc00615 	stw	ra,24(sp)
  802d94:	df000515 	stw	fp,20(sp)
  802d98:	df000504 	addi	fp,sp,20
  802d9c:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
  802da0:	e0bfff17 	ldw	r2,-4(fp)
  802da4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
  802da8:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
  802dac:	e0bffb17 	ldw	r2,-20(fp)
  802db0:	10001a26 	beq	r2,zero,802e1c <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802db4:	0005303a 	rdctl	r2,status
  802db8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802dbc:	e0fffe17 	ldw	r3,-8(fp)
  802dc0:	00bfff84 	movi	r2,-2
  802dc4:	1884703a 	and	r2,r3,r2
  802dc8:	1001703a 	wrctl	status,r2
  
  return context;
  802dcc:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
  802dd0:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
  802dd4:	e0bffb17 	ldw	r2,-20(fp)
  802dd8:	10800a17 	ldw	r2,40(r2)
  802ddc:	10000626 	beq	r2,zero,802df8 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
  802de0:	e0bffb17 	ldw	r2,-20(fp)
  802de4:	10800a17 	ldw	r2,40(r2)
  802de8:	e0fffb17 	ldw	r3,-20(fp)
  802dec:	18c00b17 	ldw	r3,44(r3)
  802df0:	1809883a 	mov	r4,r3
  802df4:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
  802df8:	e0bffb17 	ldw	r2,-20(fp)
  802dfc:	10800c17 	ldw	r2,48(r2)
  802e00:	1009883a 	mov	r4,r2
  802e04:	08032380 	call	803238 <adc_clear_interrupt_status>
  802e08:	e0bffc17 	ldw	r2,-16(fp)
  802e0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e10:	e0bffd17 	ldw	r2,-12(fp)
  802e14:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
  802e18:	0001883a 	nop
  802e1c:	0001883a 	nop
}
  802e20:	e037883a 	mov	sp,fp
  802e24:	dfc00117 	ldw	ra,4(sp)
  802e28:	df000017 	ldw	fp,0(sp)
  802e2c:	dec00204 	addi	sp,sp,8
  802e30:	f800283a 	ret

00802e34 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
  802e34:	defff804 	addi	sp,sp,-32
  802e38:	df000715 	stw	fp,28(sp)
  802e3c:	df000704 	addi	fp,sp,28
  802e40:	e13ffd15 	stw	r4,-12(fp)
  802e44:	e17ffe15 	stw	r5,-8(fp)
  802e48:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
  802e4c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
  802e50:	e0bfff17 	ldw	r2,-4(fp)
  802e54:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
  802e58:	e0bffe17 	ldw	r2,-8(fp)
  802e5c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
  802e60:	e0bffd17 	ldw	r2,-12(fp)
  802e64:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
  802e68:	e0bffa17 	ldw	r2,-24(fp)
  802e6c:	1000021e 	bne	r2,zero,802e78 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
  802e70:	00bffa84 	movi	r2,-22
  802e74:	00001606 	br	802ed0 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
  802e78:	e03ff915 	stw	zero,-28(fp)
  802e7c:	00001006 	br	802ec0 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  802e80:	e0bff917 	ldw	r2,-28(fp)
  802e84:	1085883a 	add	r2,r2,r2
  802e88:	1085883a 	add	r2,r2,r2
  802e8c:	1007883a 	mov	r3,r2
  802e90:	e0bffc17 	ldw	r2,-16(fp)
  802e94:	1885883a 	add	r2,r3,r2
  802e98:	10800037 	ldwio	r2,0(r2)
  802e9c:	1007883a 	mov	r3,r2
  802ea0:	e0bffa17 	ldw	r2,-24(fp)
  802ea4:	10c00015 	stw	r3,0(r2)

       dest_buf++;
  802ea8:	e0bffa17 	ldw	r2,-24(fp)
  802eac:	10800104 	addi	r2,r2,4
  802eb0:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  802eb4:	e0bff917 	ldw	r2,-28(fp)
  802eb8:	10800044 	addi	r2,r2,1
  802ebc:	e0bff915 	stw	r2,-28(fp)
  802ec0:	e0fff917 	ldw	r3,-28(fp)
  802ec4:	e0bffb17 	ldw	r2,-20(fp)
  802ec8:	18bfed36 	bltu	r3,r2,802e80 <__alt_data_end+0xff802e80>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
  802ecc:	0005883a 	mov	r2,zero

}
  802ed0:	e037883a 	mov	sp,fp
  802ed4:	df000017 	ldw	fp,0(sp)
  802ed8:	dec00104 	addi	sp,sp,4
  802edc:	f800283a 	ret

00802ee0 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  802ee0:	defffa04 	addi	sp,sp,-24
  802ee4:	dfc00515 	stw	ra,20(sp)
  802ee8:	df000415 	stw	fp,16(sp)
  802eec:	df000404 	addi	fp,sp,16
  802ef0:	e13ffd15 	stw	r4,-12(fp)
  802ef4:	e17ffe15 	stw	r5,-8(fp)
  802ef8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  802efc:	d1600504 	addi	r5,gp,-32748
  802f00:	e13ffd17 	ldw	r4,-12(fp)
  802f04:	08034bc0 	call	8034bc <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
  802f08:	e0bffe17 	ldw	r2,-8(fp)
  802f0c:	10000b16 	blt	r2,zero,802f3c <altera_modular_adc_init+0x5c>
  802f10:	e0bfff17 	ldw	r2,-4(fp)
  802f14:	10000916 	blt	r2,zero,802f3c <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
  802f18:	e0bffe17 	ldw	r2,-8(fp)
  802f1c:	e0ffff17 	ldw	r3,-4(fp)
  802f20:	d8000015 	stw	zero,0(sp)
  802f24:	e1fffd17 	ldw	r7,-12(fp)
  802f28:	01802034 	movhi	r6,128
  802f2c:	318b6304 	addi	r6,r6,11660
  802f30:	180b883a 	mov	r5,r3
  802f34:	1009883a 	mov	r4,r2
  802f38:	08036100 	call	803610 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
  802f3c:	0001883a 	nop
  802f40:	e037883a 	mov	sp,fp
  802f44:	dfc00117 	ldw	ra,4(sp)
  802f48:	df000017 	ldw	fp,0(sp)
  802f4c:	dec00204 	addi	sp,sp,8
  802f50:	f800283a 	ret

00802f54 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  802f54:	defffa04 	addi	sp,sp,-24
  802f58:	dfc00515 	stw	ra,20(sp)
  802f5c:	df000415 	stw	fp,16(sp)
  802f60:	df000404 	addi	fp,sp,16
  802f64:	e13ffc15 	stw	r4,-16(fp)
  802f68:	e17ffd15 	stw	r5,-12(fp)
  802f6c:	e1bffe15 	stw	r6,-8(fp)
  802f70:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  802f74:	e0bffc17 	ldw	r2,-16(fp)
  802f78:	e0fffd17 	ldw	r3,-12(fp)
  802f7c:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
  802f80:	e0bffc17 	ldw	r2,-16(fp)
  802f84:	e0fffe17 	ldw	r3,-8(fp)
  802f88:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
  802f8c:	e0bffc17 	ldw	r2,-16(fp)
  802f90:	e0ffff17 	ldw	r3,-4(fp)
  802f94:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
  802f98:	e0bffd17 	ldw	r2,-12(fp)
  802f9c:	10000726 	beq	r2,zero,802fbc <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
  802fa0:	e0bfff17 	ldw	r2,-4(fp)
  802fa4:	1009883a 	mov	r4,r2
  802fa8:	08032380 	call	803238 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
  802fac:	e0bfff17 	ldw	r2,-4(fp)
  802fb0:	1009883a 	mov	r4,r2
  802fb4:	08031ac0 	call	8031ac <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
  802fb8:	00000706 	br	802fd8 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
  802fbc:	e0bfff17 	ldw	r2,-4(fp)
  802fc0:	1009883a 	mov	r4,r2
  802fc4:	08031f00 	call	8031f0 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
  802fc8:	e0bfff17 	ldw	r2,-4(fp)
  802fcc:	1009883a 	mov	r4,r2
  802fd0:	08032380 	call	803238 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
  802fd4:	0001883a 	nop
}
  802fd8:	e037883a 	mov	sp,fp
  802fdc:	dfc00117 	ldw	ra,4(sp)
  802fe0:	df000017 	ldw	fp,0(sp)
  802fe4:	dec00204 	addi	sp,sp,8
  802fe8:	f800283a 	ret

00802fec <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
  802fec:	defffc04 	addi	sp,sp,-16
  802ff0:	dfc00315 	stw	ra,12(sp)
  802ff4:	df000215 	stw	fp,8(sp)
  802ff8:	df000204 	addi	fp,sp,8
  802ffc:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
  803000:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
  803004:	d1600504 	addi	r5,gp,-32748
  803008:	e13fff17 	ldw	r4,-4(fp)
  80300c:	08035600 	call	803560 <alt_find_dev>
  803010:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  803014:	e0bffe17 	ldw	r2,-8(fp)
}
  803018:	e037883a 	mov	sp,fp
  80301c:	dfc00117 	ldw	ra,4(sp)
  803020:	df000017 	ldw	fp,0(sp)
  803024:	dec00204 	addi	sp,sp,8
  803028:	f800283a 	ret

0080302c <adc_stop>:

void adc_stop(int sequencer_base)
{
  80302c:	defffe04 	addi	sp,sp,-8
  803030:	df000115 	stw	fp,4(sp)
  803034:	df000104 	addi	fp,sp,4
  803038:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
  80303c:	e0bfff17 	ldw	r2,-4(fp)
  803040:	e0ffff17 	ldw	r3,-4(fp)
  803044:	19000037 	ldwio	r4,0(r3)
  803048:	00ffff84 	movi	r3,-2
  80304c:	20c6703a 	and	r3,r4,r3
  803050:	10c00035 	stwio	r3,0(r2)
  803054:	0001883a 	nop
  803058:	e0bfff17 	ldw	r2,-4(fp)
  80305c:	10800037 	ldwio	r2,0(r2)
  803060:	1080004c 	andi	r2,r2,1
  803064:	103ffc1e 	bne	r2,zero,803058 <__alt_data_end+0xff803058>
}
  803068:	0001883a 	nop
  80306c:	e037883a 	mov	sp,fp
  803070:	df000017 	ldw	fp,0(sp)
  803074:	dec00104 	addi	sp,sp,4
  803078:	f800283a 	ret

0080307c <adc_start>:

void adc_start(int sequencer_base)
{
  80307c:	defffe04 	addi	sp,sp,-8
  803080:	df000115 	stw	fp,4(sp)
  803084:	df000104 	addi	fp,sp,4
  803088:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
  80308c:	e0bfff17 	ldw	r2,-4(fp)
  803090:	e0ffff17 	ldw	r3,-4(fp)
  803094:	18c00037 	ldwio	r3,0(r3)
  803098:	18c00054 	ori	r3,r3,1
  80309c:	10c00035 	stwio	r3,0(r2)
}
  8030a0:	0001883a 	nop
  8030a4:	e037883a 	mov	sp,fp
  8030a8:	df000017 	ldw	fp,0(sp)
  8030ac:	dec00104 	addi	sp,sp,4
  8030b0:	f800283a 	ret

008030b4 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
  8030b4:	defffe04 	addi	sp,sp,-8
  8030b8:	df000115 	stw	fp,4(sp)
  8030bc:	df000104 	addi	fp,sp,4
  8030c0:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
  8030c4:	e0bfff17 	ldw	r2,-4(fp)
  8030c8:	e0ffff17 	ldw	r3,-4(fp)
  8030cc:	19000037 	ldwio	r4,0(r3)
  8030d0:	00fffc44 	movi	r3,-15
  8030d4:	20c6703a 	and	r3,r4,r3
  8030d8:	18c00094 	ori	r3,r3,2
  8030dc:	10c00035 	stwio	r3,0(r2)
}
  8030e0:	0001883a 	nop
  8030e4:	e037883a 	mov	sp,fp
  8030e8:	df000017 	ldw	fp,0(sp)
  8030ec:	dec00104 	addi	sp,sp,4
  8030f0:	f800283a 	ret

008030f4 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
  8030f4:	defffe04 	addi	sp,sp,-8
  8030f8:	df000115 	stw	fp,4(sp)
  8030fc:	df000104 	addi	fp,sp,4
  803100:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
  803104:	e0bfff17 	ldw	r2,-4(fp)
  803108:	e0ffff17 	ldw	r3,-4(fp)
  80310c:	19000037 	ldwio	r4,0(r3)
  803110:	00fffc44 	movi	r3,-15
  803114:	20c6703a 	and	r3,r4,r3
  803118:	10c00035 	stwio	r3,0(r2)
}
  80311c:	0001883a 	nop
  803120:	e037883a 	mov	sp,fp
  803124:	df000017 	ldw	fp,0(sp)
  803128:	dec00104 	addi	sp,sp,4
  80312c:	f800283a 	ret

00803130 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
  803130:	defffc04 	addi	sp,sp,-16
  803134:	dfc00315 	stw	ra,12(sp)
  803138:	df000215 	stw	fp,8(sp)
  80313c:	df000204 	addi	fp,sp,8
  803140:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
  803144:	e0bfff17 	ldw	r2,-4(fp)
  803148:	10800037 	ldwio	r2,0(r2)
  80314c:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
  803150:	e13fff17 	ldw	r4,-4(fp)
  803154:	080302c0 	call	80302c <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
  803158:	e0bfff17 	ldw	r2,-4(fp)
  80315c:	e0ffff17 	ldw	r3,-4(fp)
  803160:	18c00037 	ldwio	r3,0(r3)
  803164:	18c00394 	ori	r3,r3,14
  803168:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
  80316c:	e13fff17 	ldw	r4,-4(fp)
  803170:	080307c0 	call	80307c <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  803174:	0001883a 	nop
  803178:	e0bfff17 	ldw	r2,-4(fp)
  80317c:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
  803180:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  803184:	103ffc1e 	bne	r2,zero,803178 <__alt_data_end+0xff803178>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
  803188:	e0bfff17 	ldw	r2,-4(fp)
  80318c:	e0fffe17 	ldw	r3,-8(fp)
  803190:	10c00035 	stwio	r3,0(r2)
}
  803194:	0001883a 	nop
  803198:	e037883a 	mov	sp,fp
  80319c:	dfc00117 	ldw	ra,4(sp)
  8031a0:	df000017 	ldw	fp,0(sp)
  8031a4:	dec00204 	addi	sp,sp,8
  8031a8:	f800283a 	ret

008031ac <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
  8031ac:	defffe04 	addi	sp,sp,-8
  8031b0:	df000115 	stw	fp,4(sp)
  8031b4:	df000104 	addi	fp,sp,4
  8031b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
  8031bc:	e0bfff17 	ldw	r2,-4(fp)
  8031c0:	10804004 	addi	r2,r2,256
  8031c4:	1007883a 	mov	r3,r2
  8031c8:	e0bfff17 	ldw	r2,-4(fp)
  8031cc:	10804004 	addi	r2,r2,256
  8031d0:	10800037 	ldwio	r2,0(r2)
  8031d4:	10800054 	ori	r2,r2,1
  8031d8:	18800035 	stwio	r2,0(r3)
}
  8031dc:	0001883a 	nop
  8031e0:	e037883a 	mov	sp,fp
  8031e4:	df000017 	ldw	fp,0(sp)
  8031e8:	dec00104 	addi	sp,sp,4
  8031ec:	f800283a 	ret

008031f0 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
  8031f0:	defffe04 	addi	sp,sp,-8
  8031f4:	df000115 	stw	fp,4(sp)
  8031f8:	df000104 	addi	fp,sp,4
  8031fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
  803200:	e0bfff17 	ldw	r2,-4(fp)
  803204:	10804004 	addi	r2,r2,256
  803208:	1009883a 	mov	r4,r2
  80320c:	e0bfff17 	ldw	r2,-4(fp)
  803210:	10804004 	addi	r2,r2,256
  803214:	10c00037 	ldwio	r3,0(r2)
  803218:	00bfff84 	movi	r2,-2
  80321c:	1884703a 	and	r2,r3,r2
  803220:	20800035 	stwio	r2,0(r4)
}
  803224:	0001883a 	nop
  803228:	e037883a 	mov	sp,fp
  80322c:	df000017 	ldw	fp,0(sp)
  803230:	dec00104 	addi	sp,sp,4
  803234:	f800283a 	ret

00803238 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
  803238:	defffe04 	addi	sp,sp,-8
  80323c:	df000115 	stw	fp,4(sp)
  803240:	df000104 	addi	fp,sp,4
  803244:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
  803248:	e0bfff17 	ldw	r2,-4(fp)
  80324c:	10804104 	addi	r2,r2,260
  803250:	1007883a 	mov	r3,r2
  803254:	e0bfff17 	ldw	r2,-4(fp)
  803258:	10804104 	addi	r2,r2,260
  80325c:	10800037 	ldwio	r2,0(r2)
  803260:	10800054 	ori	r2,r2,1
  803264:	18800035 	stwio	r2,0(r3)
}
  803268:	0001883a 	nop
  80326c:	e037883a 	mov	sp,fp
  803270:	df000017 	ldw	fp,0(sp)
  803274:	dec00104 	addi	sp,sp,4
  803278:	f800283a 	ret

0080327c <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
  80327c:	defffe04 	addi	sp,sp,-8
  803280:	df000115 	stw	fp,4(sp)
  803284:	df000104 	addi	fp,sp,4
  803288:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
  80328c:	e0bfff17 	ldw	r2,-4(fp)
  803290:	10804104 	addi	r2,r2,260
  803294:	10800037 	ldwio	r2,0(r2)
  803298:	1080004c 	andi	r2,r2,1
  80329c:	10000226 	beq	r2,zero,8032a8 <adc_interrupt_asserted+0x2c>
  8032a0:	00bfffc4 	movi	r2,-1
  8032a4:	00000106 	br	8032ac <adc_interrupt_asserted+0x30>
  8032a8:	0005883a 	mov	r2,zero
}
  8032ac:	e037883a 	mov	sp,fp
  8032b0:	df000017 	ldw	fp,0(sp)
  8032b4:	dec00104 	addi	sp,sp,4
  8032b8:	f800283a 	ret

008032bc <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
  8032bc:	defffe04 	addi	sp,sp,-8
  8032c0:	df000115 	stw	fp,4(sp)
  8032c4:	df000104 	addi	fp,sp,4
  8032c8:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
  8032cc:	0001883a 	nop
  8032d0:	e0bfff17 	ldw	r2,-4(fp)
  8032d4:	10804104 	addi	r2,r2,260
  8032d8:	10800037 	ldwio	r2,0(r2)
  8032dc:	1080004c 	andi	r2,r2,1
  8032e0:	103ffb26 	beq	r2,zero,8032d0 <__alt_data_end+0xff8032d0>
}
  8032e4:	0001883a 	nop
  8032e8:	e037883a 	mov	sp,fp
  8032ec:	df000017 	ldw	fp,0(sp)
  8032f0:	dec00104 	addi	sp,sp,4
  8032f4:	f800283a 	ret

008032f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032f8:	defffe04 	addi	sp,sp,-8
  8032fc:	dfc00115 	stw	ra,4(sp)
  803300:	df000015 	stw	fp,0(sp)
  803304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803308:	00802034 	movhi	r2,128
  80330c:	10928704 	addi	r2,r2,18972
  803310:	10800017 	ldw	r2,0(r2)
  803314:	10000526 	beq	r2,zero,80332c <alt_get_errno+0x34>
  803318:	00802034 	movhi	r2,128
  80331c:	10928704 	addi	r2,r2,18972
  803320:	10800017 	ldw	r2,0(r2)
  803324:	103ee83a 	callr	r2
  803328:	00000206 	br	803334 <alt_get_errno+0x3c>
  80332c:	00802034 	movhi	r2,128
  803330:	10945804 	addi	r2,r2,20832
}
  803334:	e037883a 	mov	sp,fp
  803338:	dfc00117 	ldw	ra,4(sp)
  80333c:	df000017 	ldw	fp,0(sp)
  803340:	dec00204 	addi	sp,sp,8
  803344:	f800283a 	ret

00803348 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803348:	defffb04 	addi	sp,sp,-20
  80334c:	dfc00415 	stw	ra,16(sp)
  803350:	df000315 	stw	fp,12(sp)
  803354:	df000304 	addi	fp,sp,12
  803358:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80335c:	e0bfff17 	ldw	r2,-4(fp)
  803360:	10000816 	blt	r2,zero,803384 <close+0x3c>
  803364:	01400304 	movi	r5,12
  803368:	e13fff17 	ldw	r4,-4(fp)
  80336c:	08018d40 	call	8018d4 <__mulsi3>
  803370:	1007883a 	mov	r3,r2
  803374:	00802034 	movhi	r2,128
  803378:	10921b04 	addi	r2,r2,18540
  80337c:	1885883a 	add	r2,r3,r2
  803380:	00000106 	br	803388 <close+0x40>
  803384:	0005883a 	mov	r2,zero
  803388:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80338c:	e0bffd17 	ldw	r2,-12(fp)
  803390:	10001926 	beq	r2,zero,8033f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803394:	e0bffd17 	ldw	r2,-12(fp)
  803398:	10800017 	ldw	r2,0(r2)
  80339c:	10800417 	ldw	r2,16(r2)
  8033a0:	10000626 	beq	r2,zero,8033bc <close+0x74>
  8033a4:	e0bffd17 	ldw	r2,-12(fp)
  8033a8:	10800017 	ldw	r2,0(r2)
  8033ac:	10800417 	ldw	r2,16(r2)
  8033b0:	e13ffd17 	ldw	r4,-12(fp)
  8033b4:	103ee83a 	callr	r2
  8033b8:	00000106 	br	8033c0 <close+0x78>
  8033bc:	0005883a 	mov	r2,zero
  8033c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8033c4:	e13fff17 	ldw	r4,-4(fp)
  8033c8:	0803ce40 	call	803ce4 <alt_release_fd>
    if (rval < 0)
  8033cc:	e0bffe17 	ldw	r2,-8(fp)
  8033d0:	1000070e 	bge	r2,zero,8033f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  8033d4:	08032f80 	call	8032f8 <alt_get_errno>
  8033d8:	1007883a 	mov	r3,r2
  8033dc:	e0bffe17 	ldw	r2,-8(fp)
  8033e0:	0085c83a 	sub	r2,zero,r2
  8033e4:	18800015 	stw	r2,0(r3)
      return -1;
  8033e8:	00bfffc4 	movi	r2,-1
  8033ec:	00000706 	br	80340c <close+0xc4>
    }
    return 0;
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	00000506 	br	80340c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8033f8:	08032f80 	call	8032f8 <alt_get_errno>
  8033fc:	1007883a 	mov	r3,r2
  803400:	00801444 	movi	r2,81
  803404:	18800015 	stw	r2,0(r3)
    return -1;
  803408:	00bfffc4 	movi	r2,-1
  }
}
  80340c:	e037883a 	mov	sp,fp
  803410:	dfc00117 	ldw	ra,4(sp)
  803414:	df000017 	ldw	fp,0(sp)
  803418:	dec00204 	addi	sp,sp,8
  80341c:	f800283a 	ret

00803420 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  803420:	deffff04 	addi	sp,sp,-4
  803424:	df000015 	stw	fp,0(sp)
  803428:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80342c:	0001883a 	nop
  803430:	e037883a 	mov	sp,fp
  803434:	df000017 	ldw	fp,0(sp)
  803438:	dec00104 	addi	sp,sp,4
  80343c:	f800283a 	ret

00803440 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803440:	defffc04 	addi	sp,sp,-16
  803444:	df000315 	stw	fp,12(sp)
  803448:	df000304 	addi	fp,sp,12
  80344c:	e13ffd15 	stw	r4,-12(fp)
  803450:	e17ffe15 	stw	r5,-8(fp)
  803454:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803458:	e0bfff17 	ldw	r2,-4(fp)
}
  80345c:	e037883a 	mov	sp,fp
  803460:	df000017 	ldw	fp,0(sp)
  803464:	dec00104 	addi	sp,sp,4
  803468:	f800283a 	ret

0080346c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80346c:	defffe04 	addi	sp,sp,-8
  803470:	dfc00115 	stw	ra,4(sp)
  803474:	df000015 	stw	fp,0(sp)
  803478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80347c:	00802034 	movhi	r2,128
  803480:	10928704 	addi	r2,r2,18972
  803484:	10800017 	ldw	r2,0(r2)
  803488:	10000526 	beq	r2,zero,8034a0 <alt_get_errno+0x34>
  80348c:	00802034 	movhi	r2,128
  803490:	10928704 	addi	r2,r2,18972
  803494:	10800017 	ldw	r2,0(r2)
  803498:	103ee83a 	callr	r2
  80349c:	00000206 	br	8034a8 <alt_get_errno+0x3c>
  8034a0:	00802034 	movhi	r2,128
  8034a4:	10945804 	addi	r2,r2,20832
}
  8034a8:	e037883a 	mov	sp,fp
  8034ac:	dfc00117 	ldw	ra,4(sp)
  8034b0:	df000017 	ldw	fp,0(sp)
  8034b4:	dec00204 	addi	sp,sp,8
  8034b8:	f800283a 	ret

008034bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8034bc:	defffa04 	addi	sp,sp,-24
  8034c0:	dfc00515 	stw	ra,20(sp)
  8034c4:	df000415 	stw	fp,16(sp)
  8034c8:	df000404 	addi	fp,sp,16
  8034cc:	e13ffe15 	stw	r4,-8(fp)
  8034d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8034d4:	e0bffe17 	ldw	r2,-8(fp)
  8034d8:	10000326 	beq	r2,zero,8034e8 <alt_dev_llist_insert+0x2c>
  8034dc:	e0bffe17 	ldw	r2,-8(fp)
  8034e0:	10800217 	ldw	r2,8(r2)
  8034e4:	1000061e 	bne	r2,zero,803500 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8034e8:	080346c0 	call	80346c <alt_get_errno>
  8034ec:	1007883a 	mov	r3,r2
  8034f0:	00800584 	movi	r2,22
  8034f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8034f8:	00bffa84 	movi	r2,-22
  8034fc:	00001306 	br	80354c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  803500:	e0bffe17 	ldw	r2,-8(fp)
  803504:	e0ffff17 	ldw	r3,-4(fp)
  803508:	e0fffc15 	stw	r3,-16(fp)
  80350c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803510:	e0bffd17 	ldw	r2,-12(fp)
  803514:	e0fffc17 	ldw	r3,-16(fp)
  803518:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80351c:	e0bffc17 	ldw	r2,-16(fp)
  803520:	10c00017 	ldw	r3,0(r2)
  803524:	e0bffd17 	ldw	r2,-12(fp)
  803528:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80352c:	e0bffc17 	ldw	r2,-16(fp)
  803530:	10800017 	ldw	r2,0(r2)
  803534:	e0fffd17 	ldw	r3,-12(fp)
  803538:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80353c:	e0bffc17 	ldw	r2,-16(fp)
  803540:	e0fffd17 	ldw	r3,-12(fp)
  803544:	10c00015 	stw	r3,0(r2)

  return 0;  
  803548:	0005883a 	mov	r2,zero
}
  80354c:	e037883a 	mov	sp,fp
  803550:	dfc00117 	ldw	ra,4(sp)
  803554:	df000017 	ldw	fp,0(sp)
  803558:	dec00204 	addi	sp,sp,8
  80355c:	f800283a 	ret

00803560 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803560:	defffa04 	addi	sp,sp,-24
  803564:	dfc00515 	stw	ra,20(sp)
  803568:	df000415 	stw	fp,16(sp)
  80356c:	df000404 	addi	fp,sp,16
  803570:	e13ffe15 	stw	r4,-8(fp)
  803574:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803578:	e0bfff17 	ldw	r2,-4(fp)
  80357c:	10800017 	ldw	r2,0(r2)
  803580:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803584:	e13ffe17 	ldw	r4,-8(fp)
  803588:	0801db00 	call	801db0 <strlen>
  80358c:	10800044 	addi	r2,r2,1
  803590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803594:	00000d06 	br	8035cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803598:	e0bffc17 	ldw	r2,-16(fp)
  80359c:	10800217 	ldw	r2,8(r2)
  8035a0:	e0fffd17 	ldw	r3,-12(fp)
  8035a4:	180d883a 	mov	r6,r3
  8035a8:	e17ffe17 	ldw	r5,-8(fp)
  8035ac:	1009883a 	mov	r4,r2
  8035b0:	08040300 	call	804030 <memcmp>
  8035b4:	1000021e 	bne	r2,zero,8035c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8035b8:	e0bffc17 	ldw	r2,-16(fp)
  8035bc:	00000706 	br	8035dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8035c0:	e0bffc17 	ldw	r2,-16(fp)
  8035c4:	10800017 	ldw	r2,0(r2)
  8035c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8035cc:	e0fffc17 	ldw	r3,-16(fp)
  8035d0:	e0bfff17 	ldw	r2,-4(fp)
  8035d4:	18bff01e 	bne	r3,r2,803598 <__alt_data_end+0xff803598>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8035d8:	0005883a 	mov	r2,zero
}
  8035dc:	e037883a 	mov	sp,fp
  8035e0:	dfc00117 	ldw	ra,4(sp)
  8035e4:	df000017 	ldw	fp,0(sp)
  8035e8:	dec00204 	addi	sp,sp,8
  8035ec:	f800283a 	ret

008035f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8035f0:	deffff04 	addi	sp,sp,-4
  8035f4:	df000015 	stw	fp,0(sp)
  8035f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8035fc:	0001883a 	nop
  803600:	e037883a 	mov	sp,fp
  803604:	df000017 	ldw	fp,0(sp)
  803608:	dec00104 	addi	sp,sp,4
  80360c:	f800283a 	ret

00803610 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803610:	defff904 	addi	sp,sp,-28
  803614:	dfc00615 	stw	ra,24(sp)
  803618:	df000515 	stw	fp,20(sp)
  80361c:	df000504 	addi	fp,sp,20
  803620:	e13ffc15 	stw	r4,-16(fp)
  803624:	e17ffd15 	stw	r5,-12(fp)
  803628:	e1bffe15 	stw	r6,-8(fp)
  80362c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  803630:	e0800217 	ldw	r2,8(fp)
  803634:	d8800015 	stw	r2,0(sp)
  803638:	e1ffff17 	ldw	r7,-4(fp)
  80363c:	e1bffe17 	ldw	r6,-8(fp)
  803640:	e17ffd17 	ldw	r5,-12(fp)
  803644:	e13ffc17 	ldw	r4,-16(fp)
  803648:	08037f00 	call	8037f0 <alt_iic_isr_register>
}  
  80364c:	e037883a 	mov	sp,fp
  803650:	dfc00117 	ldw	ra,4(sp)
  803654:	df000017 	ldw	fp,0(sp)
  803658:	dec00204 	addi	sp,sp,8
  80365c:	f800283a 	ret

00803660 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  803660:	defff904 	addi	sp,sp,-28
  803664:	df000615 	stw	fp,24(sp)
  803668:	df000604 	addi	fp,sp,24
  80366c:	e13ffe15 	stw	r4,-8(fp)
  803670:	e17fff15 	stw	r5,-4(fp)
  803674:	e0bfff17 	ldw	r2,-4(fp)
  803678:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80367c:	0005303a 	rdctl	r2,status
  803680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803684:	e0fffb17 	ldw	r3,-20(fp)
  803688:	00bfff84 	movi	r2,-2
  80368c:	1884703a 	and	r2,r3,r2
  803690:	1001703a 	wrctl	status,r2
  
  return context;
  803694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803698:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80369c:	00c00044 	movi	r3,1
  8036a0:	e0bffa17 	ldw	r2,-24(fp)
  8036a4:	1884983a 	sll	r2,r3,r2
  8036a8:	1007883a 	mov	r3,r2
  8036ac:	00802034 	movhi	r2,128
  8036b0:	10945c04 	addi	r2,r2,20848
  8036b4:	10800017 	ldw	r2,0(r2)
  8036b8:	1886b03a 	or	r3,r3,r2
  8036bc:	00802034 	movhi	r2,128
  8036c0:	10945c04 	addi	r2,r2,20848
  8036c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8036c8:	00802034 	movhi	r2,128
  8036cc:	10945c04 	addi	r2,r2,20848
  8036d0:	10800017 	ldw	r2,0(r2)
  8036d4:	100170fa 	wrctl	ienable,r2
  8036d8:	e0bffc17 	ldw	r2,-16(fp)
  8036dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8036e0:	e0bffd17 	ldw	r2,-12(fp)
  8036e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8036e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8036ec:	0001883a 	nop
}
  8036f0:	e037883a 	mov	sp,fp
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00104 	addi	sp,sp,4
  8036fc:	f800283a 	ret

00803700 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  803700:	defff904 	addi	sp,sp,-28
  803704:	df000615 	stw	fp,24(sp)
  803708:	df000604 	addi	fp,sp,24
  80370c:	e13ffe15 	stw	r4,-8(fp)
  803710:	e17fff15 	stw	r5,-4(fp)
  803714:	e0bfff17 	ldw	r2,-4(fp)
  803718:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80371c:	0005303a 	rdctl	r2,status
  803720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803724:	e0fffb17 	ldw	r3,-20(fp)
  803728:	00bfff84 	movi	r2,-2
  80372c:	1884703a 	and	r2,r3,r2
  803730:	1001703a 	wrctl	status,r2
  
  return context;
  803734:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803738:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80373c:	00c00044 	movi	r3,1
  803740:	e0bffa17 	ldw	r2,-24(fp)
  803744:	1884983a 	sll	r2,r3,r2
  803748:	0084303a 	nor	r2,zero,r2
  80374c:	1007883a 	mov	r3,r2
  803750:	00802034 	movhi	r2,128
  803754:	10945c04 	addi	r2,r2,20848
  803758:	10800017 	ldw	r2,0(r2)
  80375c:	1886703a 	and	r3,r3,r2
  803760:	00802034 	movhi	r2,128
  803764:	10945c04 	addi	r2,r2,20848
  803768:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80376c:	00802034 	movhi	r2,128
  803770:	10945c04 	addi	r2,r2,20848
  803774:	10800017 	ldw	r2,0(r2)
  803778:	100170fa 	wrctl	ienable,r2
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803784:	e0bffd17 	ldw	r2,-12(fp)
  803788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80378c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  803790:	0001883a 	nop
}
  803794:	e037883a 	mov	sp,fp
  803798:	df000017 	ldw	fp,0(sp)
  80379c:	dec00104 	addi	sp,sp,4
  8037a0:	f800283a 	ret

008037a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8037a4:	defffc04 	addi	sp,sp,-16
  8037a8:	df000315 	stw	fp,12(sp)
  8037ac:	df000304 	addi	fp,sp,12
  8037b0:	e13ffe15 	stw	r4,-8(fp)
  8037b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8037b8:	000530fa 	rdctl	r2,ienable
  8037bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8037c0:	00c00044 	movi	r3,1
  8037c4:	e0bfff17 	ldw	r2,-4(fp)
  8037c8:	1884983a 	sll	r2,r3,r2
  8037cc:	1007883a 	mov	r3,r2
  8037d0:	e0bffd17 	ldw	r2,-12(fp)
  8037d4:	1884703a 	and	r2,r3,r2
  8037d8:	1004c03a 	cmpne	r2,r2,zero
  8037dc:	10803fcc 	andi	r2,r2,255
}
  8037e0:	e037883a 	mov	sp,fp
  8037e4:	df000017 	ldw	fp,0(sp)
  8037e8:	dec00104 	addi	sp,sp,4
  8037ec:	f800283a 	ret

008037f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8037f0:	defff504 	addi	sp,sp,-44
  8037f4:	dfc00a15 	stw	ra,40(sp)
  8037f8:	df000915 	stw	fp,36(sp)
  8037fc:	df000904 	addi	fp,sp,36
  803800:	e13ffc15 	stw	r4,-16(fp)
  803804:	e17ffd15 	stw	r5,-12(fp)
  803808:	e1bffe15 	stw	r6,-8(fp)
  80380c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  803810:	00bffa84 	movi	r2,-22
  803814:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  803818:	e0bffd17 	ldw	r2,-12(fp)
  80381c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803820:	e0bff817 	ldw	r2,-32(fp)
  803824:	10800808 	cmpgei	r2,r2,32
  803828:	1000271e 	bne	r2,zero,8038c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80382c:	0005303a 	rdctl	r2,status
  803830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803834:	e0fffb17 	ldw	r3,-20(fp)
  803838:	00bfff84 	movi	r2,-2
  80383c:	1884703a 	and	r2,r3,r2
  803840:	1001703a 	wrctl	status,r2
  
  return context;
  803844:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  803848:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80384c:	00802034 	movhi	r2,128
  803850:	10945e04 	addi	r2,r2,20856
  803854:	e0fff817 	ldw	r3,-32(fp)
  803858:	180690fa 	slli	r3,r3,3
  80385c:	10c5883a 	add	r2,r2,r3
  803860:	e0fffe17 	ldw	r3,-8(fp)
  803864:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  803868:	00802034 	movhi	r2,128
  80386c:	10945e04 	addi	r2,r2,20856
  803870:	e0fff817 	ldw	r3,-32(fp)
  803874:	180690fa 	slli	r3,r3,3
  803878:	10c5883a 	add	r2,r2,r3
  80387c:	10800104 	addi	r2,r2,4
  803880:	e0ffff17 	ldw	r3,-4(fp)
  803884:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  803888:	e0bffe17 	ldw	r2,-8(fp)
  80388c:	10000526 	beq	r2,zero,8038a4 <alt_iic_isr_register+0xb4>
  803890:	e0bff817 	ldw	r2,-32(fp)
  803894:	100b883a 	mov	r5,r2
  803898:	e13ffc17 	ldw	r4,-16(fp)
  80389c:	08036600 	call	803660 <alt_ic_irq_enable>
  8038a0:	00000406 	br	8038b4 <alt_iic_isr_register+0xc4>
  8038a4:	e0bff817 	ldw	r2,-32(fp)
  8038a8:	100b883a 	mov	r5,r2
  8038ac:	e13ffc17 	ldw	r4,-16(fp)
  8038b0:	08037000 	call	803700 <alt_ic_irq_disable>
  8038b4:	e0bff715 	stw	r2,-36(fp)
  8038b8:	e0bffa17 	ldw	r2,-24(fp)
  8038bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8038c0:	e0bff917 	ldw	r2,-28(fp)
  8038c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8038c8:	e0bff717 	ldw	r2,-36(fp)
}
  8038cc:	e037883a 	mov	sp,fp
  8038d0:	dfc00117 	ldw	ra,4(sp)
  8038d4:	df000017 	ldw	fp,0(sp)
  8038d8:	dec00204 	addi	sp,sp,8
  8038dc:	f800283a 	ret

008038e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8038e0:	defff804 	addi	sp,sp,-32
  8038e4:	dfc00715 	stw	ra,28(sp)
  8038e8:	df000615 	stw	fp,24(sp)
  8038ec:	dc000515 	stw	r16,20(sp)
  8038f0:	df000604 	addi	fp,sp,24
  8038f4:	e13ffb15 	stw	r4,-20(fp)
  8038f8:	e17ffc15 	stw	r5,-16(fp)
  8038fc:	e1bffd15 	stw	r6,-12(fp)
  803900:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  803904:	e1bffe17 	ldw	r6,-8(fp)
  803908:	e17ffd17 	ldw	r5,-12(fp)
  80390c:	e13ffc17 	ldw	r4,-16(fp)
  803910:	0803b840 	call	803b84 <open>
  803914:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  803918:	e0bffa17 	ldw	r2,-24(fp)
  80391c:	10002216 	blt	r2,zero,8039a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  803920:	04002034 	movhi	r16,128
  803924:	84121b04 	addi	r16,r16,18540
  803928:	e0bffa17 	ldw	r2,-24(fp)
  80392c:	01400304 	movi	r5,12
  803930:	1009883a 	mov	r4,r2
  803934:	08018d40 	call	8018d4 <__mulsi3>
  803938:	8085883a 	add	r2,r16,r2
  80393c:	10c00017 	ldw	r3,0(r2)
  803940:	e0bffb17 	ldw	r2,-20(fp)
  803944:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  803948:	04002034 	movhi	r16,128
  80394c:	84121b04 	addi	r16,r16,18540
  803950:	e0bffa17 	ldw	r2,-24(fp)
  803954:	01400304 	movi	r5,12
  803958:	1009883a 	mov	r4,r2
  80395c:	08018d40 	call	8018d4 <__mulsi3>
  803960:	8085883a 	add	r2,r16,r2
  803964:	10800104 	addi	r2,r2,4
  803968:	10c00017 	ldw	r3,0(r2)
  80396c:	e0bffb17 	ldw	r2,-20(fp)
  803970:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803974:	04002034 	movhi	r16,128
  803978:	84121b04 	addi	r16,r16,18540
  80397c:	e0bffa17 	ldw	r2,-24(fp)
  803980:	01400304 	movi	r5,12
  803984:	1009883a 	mov	r4,r2
  803988:	08018d40 	call	8018d4 <__mulsi3>
  80398c:	8085883a 	add	r2,r16,r2
  803990:	10800204 	addi	r2,r2,8
  803994:	10c00017 	ldw	r3,0(r2)
  803998:	e0bffb17 	ldw	r2,-20(fp)
  80399c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8039a0:	e13ffa17 	ldw	r4,-24(fp)
  8039a4:	0803ce40 	call	803ce4 <alt_release_fd>
  }
} 
  8039a8:	0001883a 	nop
  8039ac:	e6ffff04 	addi	sp,fp,-4
  8039b0:	dfc00217 	ldw	ra,8(sp)
  8039b4:	df000117 	ldw	fp,4(sp)
  8039b8:	dc000017 	ldw	r16,0(sp)
  8039bc:	dec00304 	addi	sp,sp,12
  8039c0:	f800283a 	ret

008039c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8039c4:	defffb04 	addi	sp,sp,-20
  8039c8:	dfc00415 	stw	ra,16(sp)
  8039cc:	df000315 	stw	fp,12(sp)
  8039d0:	df000304 	addi	fp,sp,12
  8039d4:	e13ffd15 	stw	r4,-12(fp)
  8039d8:	e17ffe15 	stw	r5,-8(fp)
  8039dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8039e0:	01c07fc4 	movi	r7,511
  8039e4:	01800044 	movi	r6,1
  8039e8:	e17ffd17 	ldw	r5,-12(fp)
  8039ec:	01002034 	movhi	r4,128
  8039f0:	21121e04 	addi	r4,r4,18552
  8039f4:	08038e00 	call	8038e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8039f8:	01c07fc4 	movi	r7,511
  8039fc:	000d883a 	mov	r6,zero
  803a00:	e17ffe17 	ldw	r5,-8(fp)
  803a04:	01002034 	movhi	r4,128
  803a08:	21121b04 	addi	r4,r4,18540
  803a0c:	08038e00 	call	8038e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803a10:	01c07fc4 	movi	r7,511
  803a14:	01800044 	movi	r6,1
  803a18:	e17fff17 	ldw	r5,-4(fp)
  803a1c:	01002034 	movhi	r4,128
  803a20:	21122104 	addi	r4,r4,18564
  803a24:	08038e00 	call	8038e0 <alt_open_fd>
}  
  803a28:	0001883a 	nop
  803a2c:	e037883a 	mov	sp,fp
  803a30:	dfc00117 	ldw	ra,4(sp)
  803a34:	df000017 	ldw	fp,0(sp)
  803a38:	dec00204 	addi	sp,sp,8
  803a3c:	f800283a 	ret

00803a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a40:	defffe04 	addi	sp,sp,-8
  803a44:	dfc00115 	stw	ra,4(sp)
  803a48:	df000015 	stw	fp,0(sp)
  803a4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a50:	00802034 	movhi	r2,128
  803a54:	10928704 	addi	r2,r2,18972
  803a58:	10800017 	ldw	r2,0(r2)
  803a5c:	10000526 	beq	r2,zero,803a74 <alt_get_errno+0x34>
  803a60:	00802034 	movhi	r2,128
  803a64:	10928704 	addi	r2,r2,18972
  803a68:	10800017 	ldw	r2,0(r2)
  803a6c:	103ee83a 	callr	r2
  803a70:	00000206 	br	803a7c <alt_get_errno+0x3c>
  803a74:	00802034 	movhi	r2,128
  803a78:	10945804 	addi	r2,r2,20832
}
  803a7c:	e037883a 	mov	sp,fp
  803a80:	dfc00117 	ldw	ra,4(sp)
  803a84:	df000017 	ldw	fp,0(sp)
  803a88:	dec00204 	addi	sp,sp,8
  803a8c:	f800283a 	ret

00803a90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803a90:	defffb04 	addi	sp,sp,-20
  803a94:	dfc00415 	stw	ra,16(sp)
  803a98:	df000315 	stw	fp,12(sp)
  803a9c:	dc000215 	stw	r16,8(sp)
  803aa0:	df000304 	addi	fp,sp,12
  803aa4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803aa8:	e0bffe17 	ldw	r2,-8(fp)
  803aac:	10800217 	ldw	r2,8(r2)
  803ab0:	10d00034 	orhi	r3,r2,16384
  803ab4:	e0bffe17 	ldw	r2,-8(fp)
  803ab8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803abc:	e03ffd15 	stw	zero,-12(fp)
  803ac0:	00002306 	br	803b50 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803ac4:	04002034 	movhi	r16,128
  803ac8:	84121b04 	addi	r16,r16,18540
  803acc:	e0bffd17 	ldw	r2,-12(fp)
  803ad0:	01400304 	movi	r5,12
  803ad4:	1009883a 	mov	r4,r2
  803ad8:	08018d40 	call	8018d4 <__mulsi3>
  803adc:	8085883a 	add	r2,r16,r2
  803ae0:	10c00017 	ldw	r3,0(r2)
  803ae4:	e0bffe17 	ldw	r2,-8(fp)
  803ae8:	10800017 	ldw	r2,0(r2)
  803aec:	1880151e 	bne	r3,r2,803b44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803af0:	04002034 	movhi	r16,128
  803af4:	84121b04 	addi	r16,r16,18540
  803af8:	e0bffd17 	ldw	r2,-12(fp)
  803afc:	01400304 	movi	r5,12
  803b00:	1009883a 	mov	r4,r2
  803b04:	08018d40 	call	8018d4 <__mulsi3>
  803b08:	8085883a 	add	r2,r16,r2
  803b0c:	10800204 	addi	r2,r2,8
  803b10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803b14:	10000b0e 	bge	r2,zero,803b44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  803b18:	01400304 	movi	r5,12
  803b1c:	e13ffd17 	ldw	r4,-12(fp)
  803b20:	08018d40 	call	8018d4 <__mulsi3>
  803b24:	1007883a 	mov	r3,r2
  803b28:	00802034 	movhi	r2,128
  803b2c:	10921b04 	addi	r2,r2,18540
  803b30:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803b34:	e0bffe17 	ldw	r2,-8(fp)
  803b38:	18800226 	beq	r3,r2,803b44 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  803b3c:	00bffcc4 	movi	r2,-13
  803b40:	00000a06 	br	803b6c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803b44:	e0bffd17 	ldw	r2,-12(fp)
  803b48:	10800044 	addi	r2,r2,1
  803b4c:	e0bffd15 	stw	r2,-12(fp)
  803b50:	00802034 	movhi	r2,128
  803b54:	10928604 	addi	r2,r2,18968
  803b58:	10800017 	ldw	r2,0(r2)
  803b5c:	1007883a 	mov	r3,r2
  803b60:	e0bffd17 	ldw	r2,-12(fp)
  803b64:	18bfd72e 	bgeu	r3,r2,803ac4 <__alt_data_end+0xff803ac4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  803b68:	0005883a 	mov	r2,zero
}
  803b6c:	e6ffff04 	addi	sp,fp,-4
  803b70:	dfc00217 	ldw	ra,8(sp)
  803b74:	df000117 	ldw	fp,4(sp)
  803b78:	dc000017 	ldw	r16,0(sp)
  803b7c:	dec00304 	addi	sp,sp,12
  803b80:	f800283a 	ret

00803b84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803b84:	defff604 	addi	sp,sp,-40
  803b88:	dfc00915 	stw	ra,36(sp)
  803b8c:	df000815 	stw	fp,32(sp)
  803b90:	df000804 	addi	fp,sp,32
  803b94:	e13ffd15 	stw	r4,-12(fp)
  803b98:	e17ffe15 	stw	r5,-8(fp)
  803b9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  803ba0:	00bfffc4 	movi	r2,-1
  803ba4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  803ba8:	00bffb44 	movi	r2,-19
  803bac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  803bb0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803bb4:	01402034 	movhi	r5,128
  803bb8:	29528404 	addi	r5,r5,18960
  803bbc:	e13ffd17 	ldw	r4,-12(fp)
  803bc0:	08035600 	call	803560 <alt_find_dev>
  803bc4:	e0bff815 	stw	r2,-32(fp)
  803bc8:	e0bff817 	ldw	r2,-32(fp)
  803bcc:	1000051e 	bne	r2,zero,803be4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803bd0:	e13ffd17 	ldw	r4,-12(fp)
  803bd4:	0803d8c0 	call	803d8c <alt_find_file>
  803bd8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803bdc:	00800044 	movi	r2,1
  803be0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803be4:	e0bff817 	ldw	r2,-32(fp)
  803be8:	10002b26 	beq	r2,zero,803c98 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803bec:	e13ff817 	ldw	r4,-32(fp)
  803bf0:	0803ea00 	call	803ea0 <alt_get_fd>
  803bf4:	e0bff915 	stw	r2,-28(fp)
  803bf8:	e0bff917 	ldw	r2,-28(fp)
  803bfc:	1000030e 	bge	r2,zero,803c0c <open+0x88>
    {
      status = index;
  803c00:	e0bff917 	ldw	r2,-28(fp)
  803c04:	e0bffa15 	stw	r2,-24(fp)
  803c08:	00002506 	br	803ca0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  803c0c:	01400304 	movi	r5,12
  803c10:	e13ff917 	ldw	r4,-28(fp)
  803c14:	08018d40 	call	8018d4 <__mulsi3>
  803c18:	1007883a 	mov	r3,r2
  803c1c:	00802034 	movhi	r2,128
  803c20:	10921b04 	addi	r2,r2,18540
  803c24:	1885883a 	add	r2,r3,r2
  803c28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  803c2c:	e0fffe17 	ldw	r3,-8(fp)
  803c30:	00900034 	movhi	r2,16384
  803c34:	10bfffc4 	addi	r2,r2,-1
  803c38:	1886703a 	and	r3,r3,r2
  803c3c:	e0bffc17 	ldw	r2,-16(fp)
  803c40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803c44:	e0bffb17 	ldw	r2,-20(fp)
  803c48:	1000051e 	bne	r2,zero,803c60 <open+0xdc>
  803c4c:	e13ffc17 	ldw	r4,-16(fp)
  803c50:	0803a900 	call	803a90 <alt_file_locked>
  803c54:	e0bffa15 	stw	r2,-24(fp)
  803c58:	e0bffa17 	ldw	r2,-24(fp)
  803c5c:	10001016 	blt	r2,zero,803ca0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803c60:	e0bff817 	ldw	r2,-32(fp)
  803c64:	10800317 	ldw	r2,12(r2)
  803c68:	10000826 	beq	r2,zero,803c8c <open+0x108>
  803c6c:	e0bff817 	ldw	r2,-32(fp)
  803c70:	10800317 	ldw	r2,12(r2)
  803c74:	e1ffff17 	ldw	r7,-4(fp)
  803c78:	e1bffe17 	ldw	r6,-8(fp)
  803c7c:	e17ffd17 	ldw	r5,-12(fp)
  803c80:	e13ffc17 	ldw	r4,-16(fp)
  803c84:	103ee83a 	callr	r2
  803c88:	00000106 	br	803c90 <open+0x10c>
  803c8c:	0005883a 	mov	r2,zero
  803c90:	e0bffa15 	stw	r2,-24(fp)
  803c94:	00000206 	br	803ca0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803c98:	00bffb44 	movi	r2,-19
  803c9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803ca0:	e0bffa17 	ldw	r2,-24(fp)
  803ca4:	1000090e 	bge	r2,zero,803ccc <open+0x148>
  {
    alt_release_fd (index);  
  803ca8:	e13ff917 	ldw	r4,-28(fp)
  803cac:	0803ce40 	call	803ce4 <alt_release_fd>
    ALT_ERRNO = -status;
  803cb0:	0803a400 	call	803a40 <alt_get_errno>
  803cb4:	1007883a 	mov	r3,r2
  803cb8:	e0bffa17 	ldw	r2,-24(fp)
  803cbc:	0085c83a 	sub	r2,zero,r2
  803cc0:	18800015 	stw	r2,0(r3)
    return -1;
  803cc4:	00bfffc4 	movi	r2,-1
  803cc8:	00000106 	br	803cd0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  803ccc:	e0bff917 	ldw	r2,-28(fp)
}
  803cd0:	e037883a 	mov	sp,fp
  803cd4:	dfc00117 	ldw	ra,4(sp)
  803cd8:	df000017 	ldw	fp,0(sp)
  803cdc:	dec00204 	addi	sp,sp,8
  803ce0:	f800283a 	ret

00803ce4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803ce4:	defffc04 	addi	sp,sp,-16
  803ce8:	dfc00315 	stw	ra,12(sp)
  803cec:	df000215 	stw	fp,8(sp)
  803cf0:	dc000115 	stw	r16,4(sp)
  803cf4:	df000204 	addi	fp,sp,8
  803cf8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  803cfc:	e0bffe17 	ldw	r2,-8(fp)
  803d00:	108000d0 	cmplti	r2,r2,3
  803d04:	1000111e 	bne	r2,zero,803d4c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  803d08:	04002034 	movhi	r16,128
  803d0c:	84121b04 	addi	r16,r16,18540
  803d10:	e0bffe17 	ldw	r2,-8(fp)
  803d14:	01400304 	movi	r5,12
  803d18:	1009883a 	mov	r4,r2
  803d1c:	08018d40 	call	8018d4 <__mulsi3>
  803d20:	8085883a 	add	r2,r16,r2
  803d24:	10800204 	addi	r2,r2,8
  803d28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803d2c:	04002034 	movhi	r16,128
  803d30:	84121b04 	addi	r16,r16,18540
  803d34:	e0bffe17 	ldw	r2,-8(fp)
  803d38:	01400304 	movi	r5,12
  803d3c:	1009883a 	mov	r4,r2
  803d40:	08018d40 	call	8018d4 <__mulsi3>
  803d44:	8085883a 	add	r2,r16,r2
  803d48:	10000015 	stw	zero,0(r2)
  }
}
  803d4c:	0001883a 	nop
  803d50:	e6ffff04 	addi	sp,fp,-4
  803d54:	dfc00217 	ldw	ra,8(sp)
  803d58:	df000117 	ldw	fp,4(sp)
  803d5c:	dc000017 	ldw	r16,0(sp)
  803d60:	dec00304 	addi	sp,sp,12
  803d64:	f800283a 	ret

00803d68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803d68:	deffff04 	addi	sp,sp,-4
  803d6c:	df000015 	stw	fp,0(sp)
  803d70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803d74:	000170fa 	wrctl	ienable,zero
}
  803d78:	0001883a 	nop
  803d7c:	e037883a 	mov	sp,fp
  803d80:	df000017 	ldw	fp,0(sp)
  803d84:	dec00104 	addi	sp,sp,4
  803d88:	f800283a 	ret

00803d8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803d8c:	defffb04 	addi	sp,sp,-20
  803d90:	dfc00415 	stw	ra,16(sp)
  803d94:	df000315 	stw	fp,12(sp)
  803d98:	df000304 	addi	fp,sp,12
  803d9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803da0:	00802034 	movhi	r2,128
  803da4:	10928204 	addi	r2,r2,18952
  803da8:	10800017 	ldw	r2,0(r2)
  803dac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803db0:	00003106 	br	803e78 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  803db4:	e0bffd17 	ldw	r2,-12(fp)
  803db8:	10800217 	ldw	r2,8(r2)
  803dbc:	1009883a 	mov	r4,r2
  803dc0:	0801db00 	call	801db0 <strlen>
  803dc4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  803dc8:	e0bffd17 	ldw	r2,-12(fp)
  803dcc:	10c00217 	ldw	r3,8(r2)
  803dd0:	e0bffe17 	ldw	r2,-8(fp)
  803dd4:	10bfffc4 	addi	r2,r2,-1
  803dd8:	1885883a 	add	r2,r3,r2
  803ddc:	10800003 	ldbu	r2,0(r2)
  803de0:	10803fcc 	andi	r2,r2,255
  803de4:	1080201c 	xori	r2,r2,128
  803de8:	10bfe004 	addi	r2,r2,-128
  803dec:	10800bd8 	cmpnei	r2,r2,47
  803df0:	1000031e 	bne	r2,zero,803e00 <alt_find_file+0x74>
    {
      len -= 1;
  803df4:	e0bffe17 	ldw	r2,-8(fp)
  803df8:	10bfffc4 	addi	r2,r2,-1
  803dfc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803e00:	e0bffe17 	ldw	r2,-8(fp)
  803e04:	e0ffff17 	ldw	r3,-4(fp)
  803e08:	1885883a 	add	r2,r3,r2
  803e0c:	10800003 	ldbu	r2,0(r2)
  803e10:	10803fcc 	andi	r2,r2,255
  803e14:	1080201c 	xori	r2,r2,128
  803e18:	10bfe004 	addi	r2,r2,-128
  803e1c:	10800be0 	cmpeqi	r2,r2,47
  803e20:	1000081e 	bne	r2,zero,803e44 <alt_find_file+0xb8>
  803e24:	e0bffe17 	ldw	r2,-8(fp)
  803e28:	e0ffff17 	ldw	r3,-4(fp)
  803e2c:	1885883a 	add	r2,r3,r2
  803e30:	10800003 	ldbu	r2,0(r2)
  803e34:	10803fcc 	andi	r2,r2,255
  803e38:	1080201c 	xori	r2,r2,128
  803e3c:	10bfe004 	addi	r2,r2,-128
  803e40:	10000a1e 	bne	r2,zero,803e6c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  803e44:	e0bffd17 	ldw	r2,-12(fp)
  803e48:	10800217 	ldw	r2,8(r2)
  803e4c:	e0fffe17 	ldw	r3,-8(fp)
  803e50:	180d883a 	mov	r6,r3
  803e54:	e17fff17 	ldw	r5,-4(fp)
  803e58:	1009883a 	mov	r4,r2
  803e5c:	08040300 	call	804030 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803e60:	1000021e 	bne	r2,zero,803e6c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803e64:	e0bffd17 	ldw	r2,-12(fp)
  803e68:	00000806 	br	803e8c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  803e6c:	e0bffd17 	ldw	r2,-12(fp)
  803e70:	10800017 	ldw	r2,0(r2)
  803e74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803e78:	e0fffd17 	ldw	r3,-12(fp)
  803e7c:	00802034 	movhi	r2,128
  803e80:	10928204 	addi	r2,r2,18952
  803e84:	18bfcb1e 	bne	r3,r2,803db4 <__alt_data_end+0xff803db4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803e88:	0005883a 	mov	r2,zero
}
  803e8c:	e037883a 	mov	sp,fp
  803e90:	dfc00117 	ldw	ra,4(sp)
  803e94:	df000017 	ldw	fp,0(sp)
  803e98:	dec00204 	addi	sp,sp,8
  803e9c:	f800283a 	ret

00803ea0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803ea0:	defffa04 	addi	sp,sp,-24
  803ea4:	dfc00515 	stw	ra,20(sp)
  803ea8:	df000415 	stw	fp,16(sp)
  803eac:	dc000315 	stw	r16,12(sp)
  803eb0:	df000404 	addi	fp,sp,16
  803eb4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  803eb8:	00bffa04 	movi	r2,-24
  803ebc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803ec0:	e03ffc15 	stw	zero,-16(fp)
  803ec4:	00002106 	br	803f4c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  803ec8:	04002034 	movhi	r16,128
  803ecc:	84121b04 	addi	r16,r16,18540
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	01400304 	movi	r5,12
  803ed8:	1009883a 	mov	r4,r2
  803edc:	08018d40 	call	8018d4 <__mulsi3>
  803ee0:	8085883a 	add	r2,r16,r2
  803ee4:	10800017 	ldw	r2,0(r2)
  803ee8:	1000151e 	bne	r2,zero,803f40 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  803eec:	04002034 	movhi	r16,128
  803ef0:	84121b04 	addi	r16,r16,18540
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	01400304 	movi	r5,12
  803efc:	1009883a 	mov	r4,r2
  803f00:	08018d40 	call	8018d4 <__mulsi3>
  803f04:	8085883a 	add	r2,r16,r2
  803f08:	e0fffe17 	ldw	r3,-8(fp)
  803f0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  803f10:	00802034 	movhi	r2,128
  803f14:	10928604 	addi	r2,r2,18968
  803f18:	10c00017 	ldw	r3,0(r2)
  803f1c:	e0bffc17 	ldw	r2,-16(fp)
  803f20:	1880040e 	bge	r3,r2,803f34 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  803f24:	00802034 	movhi	r2,128
  803f28:	10928604 	addi	r2,r2,18968
  803f2c:	e0fffc17 	ldw	r3,-16(fp)
  803f30:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  803f34:	e0bffc17 	ldw	r2,-16(fp)
  803f38:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  803f3c:	00000606 	br	803f58 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803f40:	e0bffc17 	ldw	r2,-16(fp)
  803f44:	10800044 	addi	r2,r2,1
  803f48:	e0bffc15 	stw	r2,-16(fp)
  803f4c:	e0bffc17 	ldw	r2,-16(fp)
  803f50:	10800810 	cmplti	r2,r2,32
  803f54:	103fdc1e 	bne	r2,zero,803ec8 <__alt_data_end+0xff803ec8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803f58:	e0bffd17 	ldw	r2,-12(fp)
}
  803f5c:	e6ffff04 	addi	sp,fp,-4
  803f60:	dfc00217 	ldw	ra,8(sp)
  803f64:	df000117 	ldw	fp,4(sp)
  803f68:	dc000017 	ldw	r16,0(sp)
  803f6c:	dec00304 	addi	sp,sp,12
  803f70:	f800283a 	ret

00803f74 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803f74:	defffe04 	addi	sp,sp,-8
  803f78:	df000115 	stw	fp,4(sp)
  803f7c:	df000104 	addi	fp,sp,4
  803f80:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803f84:	e0bfff17 	ldw	r2,-4(fp)
  803f88:	10bffe84 	addi	r2,r2,-6
  803f8c:	10c00428 	cmpgeui	r3,r2,16
  803f90:	18001a1e 	bne	r3,zero,803ffc <alt_exception_cause_generated_bad_addr+0x88>
  803f94:	100690ba 	slli	r3,r2,2
  803f98:	00802034 	movhi	r2,128
  803f9c:	108feb04 	addi	r2,r2,16300
  803fa0:	1885883a 	add	r2,r3,r2
  803fa4:	10800017 	ldw	r2,0(r2)
  803fa8:	1000683a 	jmp	r2
  803fac:	00803fec 	andhi	r2,zero,255
  803fb0:	00803fec 	andhi	r2,zero,255
  803fb4:	00803ffc 	xorhi	r2,zero,255
  803fb8:	00803ffc 	xorhi	r2,zero,255
  803fbc:	00803ffc 	xorhi	r2,zero,255
  803fc0:	00803fec 	andhi	r2,zero,255
  803fc4:	00803ff4 	movhi	r2,255
  803fc8:	00803ffc 	xorhi	r2,zero,255
  803fcc:	00803fec 	andhi	r2,zero,255
  803fd0:	00803fec 	andhi	r2,zero,255
  803fd4:	00803ffc 	xorhi	r2,zero,255
  803fd8:	00803fec 	andhi	r2,zero,255
  803fdc:	00803ff4 	movhi	r2,255
  803fe0:	00803ffc 	xorhi	r2,zero,255
  803fe4:	00803ffc 	xorhi	r2,zero,255
  803fe8:	00803fec 	andhi	r2,zero,255
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803fec:	00800044 	movi	r2,1
  803ff0:	00000306 	br	804000 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803ff4:	0005883a 	mov	r2,zero
  803ff8:	00000106 	br	804000 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803ffc:	0005883a 	mov	r2,zero
  }
}
  804000:	e037883a 	mov	sp,fp
  804004:	df000017 	ldw	fp,0(sp)
  804008:	dec00104 	addi	sp,sp,4
  80400c:	f800283a 	ret

00804010 <exit>:
  804010:	defffe04 	addi	sp,sp,-8
  804014:	000b883a 	mov	r5,zero
  804018:	dc000015 	stw	r16,0(sp)
  80401c:	dfc00115 	stw	ra,4(sp)
  804020:	2021883a 	mov	r16,r4
  804024:	08040600 	call	804060 <__call_exitprocs>
  804028:	8009883a 	mov	r4,r16
  80402c:	08041f00 	call	8041f0 <_exit>

00804030 <memcmp>:
  804030:	218d883a 	add	r6,r4,r6
  804034:	21800826 	beq	r4,r6,804058 <memcmp+0x28>
  804038:	20800003 	ldbu	r2,0(r4)
  80403c:	28c00003 	ldbu	r3,0(r5)
  804040:	10c00226 	beq	r2,r3,80404c <memcmp+0x1c>
  804044:	10c5c83a 	sub	r2,r2,r3
  804048:	f800283a 	ret
  80404c:	21000044 	addi	r4,r4,1
  804050:	29400044 	addi	r5,r5,1
  804054:	003ff706 	br	804034 <__alt_data_end+0xff804034>
  804058:	0005883a 	mov	r2,zero
  80405c:	f800283a 	ret

00804060 <__call_exitprocs>:
  804060:	defff504 	addi	sp,sp,-44
  804064:	dd000515 	stw	r20,20(sp)
  804068:	05002034 	movhi	r20,128
  80406c:	dc800315 	stw	r18,12(sp)
  804070:	dfc00a15 	stw	ra,40(sp)
  804074:	df000915 	stw	fp,36(sp)
  804078:	ddc00815 	stw	r23,32(sp)
  80407c:	dd800715 	stw	r22,28(sp)
  804080:	dd400615 	stw	r21,24(sp)
  804084:	dcc00415 	stw	r19,16(sp)
  804088:	dc400215 	stw	r17,8(sp)
  80408c:	dc000115 	stw	r16,4(sp)
  804090:	d9000015 	stw	r4,0(sp)
  804094:	2825883a 	mov	r18,r5
  804098:	a5127d04 	addi	r20,r20,18932
  80409c:	a4400017 	ldw	r17,0(r20)
  8040a0:	8cc00c17 	ldw	r19,48(r17)
  8040a4:	8c400c04 	addi	r17,r17,48
  8040a8:	98004526 	beq	r19,zero,8041c0 <__call_exitprocs+0x160>
  8040ac:	9c000117 	ldw	r16,4(r19)
  8040b0:	00900034 	movhi	r2,16384
  8040b4:	10bfffc4 	addi	r2,r2,-1
  8040b8:	9d402217 	ldw	r21,136(r19)
  8040bc:	85bfffc4 	addi	r22,r16,-1
  8040c0:	80a1883a 	add	r16,r16,r2
  8040c4:	8421883a 	add	r16,r16,r16
  8040c8:	8421883a 	add	r16,r16,r16
  8040cc:	ac2f883a 	add	r23,r21,r16
  8040d0:	84000204 	addi	r16,r16,8
  8040d4:	9c21883a 	add	r16,r19,r16
  8040d8:	b0002716 	blt	r22,zero,804178 <__call_exitprocs+0x118>
  8040dc:	90000726 	beq	r18,zero,8040fc <__call_exitprocs+0x9c>
  8040e0:	a800041e 	bne	r21,zero,8040f4 <__call_exitprocs+0x94>
  8040e4:	b5bfffc4 	addi	r22,r22,-1
  8040e8:	bdffff04 	addi	r23,r23,-4
  8040ec:	843fff04 	addi	r16,r16,-4
  8040f0:	003ff906 	br	8040d8 <__alt_data_end+0xff8040d8>
  8040f4:	b9002017 	ldw	r4,128(r23)
  8040f8:	913ffa1e 	bne	r18,r4,8040e4 <__alt_data_end+0xff8040e4>
  8040fc:	99000117 	ldw	r4,4(r19)
  804100:	82000017 	ldw	r8,0(r16)
  804104:	213fffc4 	addi	r4,r4,-1
  804108:	b100021e 	bne	r22,r4,804114 <__call_exitprocs+0xb4>
  80410c:	9d800115 	stw	r22,4(r19)
  804110:	00000106 	br	804118 <__call_exitprocs+0xb8>
  804114:	80000015 	stw	zero,0(r16)
  804118:	403ff226 	beq	r8,zero,8040e4 <__alt_data_end+0xff8040e4>
  80411c:	9f000117 	ldw	fp,4(r19)
  804120:	a8000526 	beq	r21,zero,804138 <__call_exitprocs+0xd8>
  804124:	00800044 	movi	r2,1
  804128:	1592983a 	sll	r9,r2,r22
  80412c:	a9404017 	ldw	r5,256(r21)
  804130:	494a703a 	and	r5,r9,r5
  804134:	2800021e 	bne	r5,zero,804140 <__call_exitprocs+0xe0>
  804138:	403ee83a 	callr	r8
  80413c:	00000906 	br	804164 <__call_exitprocs+0x104>
  804140:	a9004117 	ldw	r4,260(r21)
  804144:	4908703a 	and	r4,r9,r4
  804148:	2000041e 	bne	r4,zero,80415c <__call_exitprocs+0xfc>
  80414c:	b9400017 	ldw	r5,0(r23)
  804150:	d9000017 	ldw	r4,0(sp)
  804154:	403ee83a 	callr	r8
  804158:	00000206 	br	804164 <__call_exitprocs+0x104>
  80415c:	b9000017 	ldw	r4,0(r23)
  804160:	403ee83a 	callr	r8
  804164:	99000117 	ldw	r4,4(r19)
  804168:	e13fcc1e 	bne	fp,r4,80409c <__alt_data_end+0xff80409c>
  80416c:	89000017 	ldw	r4,0(r17)
  804170:	993fdc26 	beq	r19,r4,8040e4 <__alt_data_end+0xff8040e4>
  804174:	003fc906 	br	80409c <__alt_data_end+0xff80409c>
  804178:	00802034 	movhi	r2,128
  80417c:	10864a04 	addi	r2,r2,6440
  804180:	10000f26 	beq	r2,zero,8041c0 <__call_exitprocs+0x160>
  804184:	99400117 	ldw	r5,4(r19)
  804188:	99000017 	ldw	r4,0(r19)
  80418c:	2800091e 	bne	r5,zero,8041b4 <__call_exitprocs+0x154>
  804190:	20000826 	beq	r4,zero,8041b4 <__call_exitprocs+0x154>
  804194:	89000015 	stw	r4,0(r17)
  804198:	a8000226 	beq	r21,zero,8041a4 <__call_exitprocs+0x144>
  80419c:	a809883a 	mov	r4,r21
  8041a0:	08019280 	call	801928 <free>
  8041a4:	9809883a 	mov	r4,r19
  8041a8:	08019280 	call	801928 <free>
  8041ac:	8cc00017 	ldw	r19,0(r17)
  8041b0:	003fbd06 	br	8040a8 <__alt_data_end+0xff8040a8>
  8041b4:	9823883a 	mov	r17,r19
  8041b8:	2027883a 	mov	r19,r4
  8041bc:	003fba06 	br	8040a8 <__alt_data_end+0xff8040a8>
  8041c0:	dfc00a17 	ldw	ra,40(sp)
  8041c4:	df000917 	ldw	fp,36(sp)
  8041c8:	ddc00817 	ldw	r23,32(sp)
  8041cc:	dd800717 	ldw	r22,28(sp)
  8041d0:	dd400617 	ldw	r21,24(sp)
  8041d4:	dd000517 	ldw	r20,20(sp)
  8041d8:	dcc00417 	ldw	r19,16(sp)
  8041dc:	dc800317 	ldw	r18,12(sp)
  8041e0:	dc400217 	ldw	r17,8(sp)
  8041e4:	dc000117 	ldw	r16,4(sp)
  8041e8:	dec00b04 	addi	sp,sp,44
  8041ec:	f800283a 	ret

008041f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8041f0:	defffd04 	addi	sp,sp,-12
  8041f4:	df000215 	stw	fp,8(sp)
  8041f8:	df000204 	addi	fp,sp,8
  8041fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  804200:	0001883a 	nop
  804204:	e0bfff17 	ldw	r2,-4(fp)
  804208:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80420c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804210:	10000226 	beq	r2,zero,80421c <_exit+0x2c>
    ALT_SIM_FAIL();
  804214:	002af070 	cmpltui	zero,zero,43969
  804218:	00000106 	br	804220 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80421c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804220:	003fff06 	br	804220 <__alt_data_end+0xff804220>
