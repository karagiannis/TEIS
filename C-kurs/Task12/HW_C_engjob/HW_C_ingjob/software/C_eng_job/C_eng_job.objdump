
C_eng_job.elf:     file format elf32-littlenios2
C_eng_job.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000033ec memsz 0x000033ec flags r-x
    LOAD off    0x0000440c vaddr 0x0080340c paddr 0x00803b30 align 2**12
         filesz 0x00000724 memsz 0x00000724 flags rw-
    LOAD off    0x00005254 vaddr 0x00804254 paddr 0x00804254 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031c4  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  00803344  00803344  00004344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000724  0080340c  00803b30  0000440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  00804254  00804254  00005254  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller 00000000  00804384  00804384  00004b30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000580  00000000  00000000  00004b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008965  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b37  00000000  00000000  0000da3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e6b  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c80  00000000  00000000  000133e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ff6  00000000  00000000  00014060  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001df2  00000000  00000000  00016056  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00017e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  00017e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019e4d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00019e50  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00019e59  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00019e5a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00019e5b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00019e66  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00019e71  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  00019e7c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  00019e93  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c6c2  00000000  00000000  00019ed9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
00803344 l    d  .rodata	00000000 .rodata
0080340c l    d  .rwdata	00000000 .rwdata
00804254 l    d  .bss	00000000 .bss
00804384 l    d  .SDRAM_Controller	00000000 .SDRAM_Controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../C_eng_job_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0080425c l     O .bss	00000004 hours.3582
00804260 l     O .bss	00000004 minutes.3583
00804264 l     O .bss	00000004 seconds.3584
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 impure.c
0080380c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_write.c
00802708 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803928 l     O .rwdata	0000002c jtag_uart_0
008038ec l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00802b80 l     F .text	00000058 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802c54 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802e50 l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 memcmp.c
00804280 g     O .bss	00000004 alt_instruction_exception_handler
00802a90 g     F .text	00000020 adc_stop
00802544 g     F .text	00000040 alt_main
00804284 g     O .bss	00000100 alt_irq
00803b30 g       *ABS*	00000000 __flash_rwdata_start
00801d20 g     F .text	000000c8 i2bcd
00804258 g     O .bss	00000004 j
00801034 g     F .text	0000010c print_char
008015f8 g     F .text	000000a8 print_welcome_screen
00803160 g     F .text	00000008 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000000c __reset
00802b54 g     F .text	00000018 adc_interrupt_disable
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080426c g     O .bss	00000004 errno
00800cdc g     F .text	0000010c read_accelerometerX
00802a24 g     F .text	00000064 altera_modular_adc_init
00804274 g     O .bss	00000004 alt_argv
0080bafc g       *ABS*	00000000 _gp
00801de8 g     F .text	00000280 update_time
008009a4 g     F .text	0000008c read_temp
00803954 g     O .rwdata	00000180 alt_fd_list
00802cd4 g     F .text	00000074 alt_find_dev
00802244 g     F .text	00000028 memcpy
00801140 g     F .text	000000a8 print_str
00802ad8 g     F .text	00000014 adc_set_mode_run_continuously
00802ed8 g     F .text	00000074 alt_io_redirect
008032a0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00802874 g     F .text	0000005c altera_avalon_jtag_uart_read
00802160 g     F .text	00000064 .hidden __udivsi3
00800e94 g     F .text	000000d0 print_hline
00800abc g     F .text	00000034 config_time_base
00803b0c g     O .rwdata	00000008 altera_modular_adc_list
00803b14 g     O .rwdata	00000004 alt_max_fd
0080340c g     O .rwdata	00000400 font8x8_basic
00803afe g     O .rwdata	00000004 spi_command_rx
00803b04 g     O .rwdata	00000004 _global_impure_ptr
00804384 g       *ABS*	00000000 __bss_end
00802de8 g     F .text	00000068 alt_iic_isr_register
00800b3c g     F .text	00000114 draw_graph
00802c3c g     F .text	00000014 adc_wait_for_interrupt
00800de8 g     F .text	000000ac print_pix
00802dd0 g     F .text	00000018 alt_ic_irq_enabled
0080427c g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	00000060 alt_irq_handler
00803ad4 g     O .rwdata	00000028 alt_dev_null
00802ac0 g     F .text	00000018 adc_set_mode_run_once
00802c50 g     F .text	00000004 alt_dcache_flush_all
00803b30 g       *ABS*	00000000 __ram_rwdata_end
00803b18 g     O .rwdata	00000008 alt_dev_list
00800f64 g     F .text	000000d0 print_vline
00802728 g     F .text	000000d4 write
008022e0 g     F .text	00000058 _putc_r
0080340c g       *ABS*	00000000 __ram_rodata_end
00802ab0 g     F .text	00000010 adc_start
008021c4 g     F .text	00000058 .hidden __umodsi3
00804384 g       *ABS*	00000000 end
00804254 g     O .bss	00000004 i
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
008028d0 g     F .text	00000034 altera_avalon_jtag_uart_write
00802584 g     F .text	00000170 alt_printf
00800af0 g     F .text	0000004c init_measurement
00800180 g     F .text	0000003c _start
00800c50 g     F .text	0000008c update_graph
00802904 g     F .text	000000e8 alt_avalon_spi_command
0080281c g     F .text	00000038 alt_sys_init
0080221c g     F .text	00000028 .hidden __mulsi3
0080340c g       *ABS*	00000000 __ram_rwdata_start
00803344 g       *ABS*	00000000 __ram_rodata_start
00802854 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00803214 g     F .text	0000008c alt_get_fd
00803314 g     F .text	00000030 memcmp
00804384 g       *ABS*	00000000 __alt_stack_base
00801824 g     F .text	00000068 queue_dequeue
00802b40 g     F .text	00000014 adc_interrupt_enable
00803168 g     F .text	000000ac alt_find_file
00802c5c g     F .text	00000078 alt_dev_llist_insert
00802354 g     F .text	000000b8 __sfvwrite_small_dev
00804254 g       *ABS*	00000000 __bss_start
0080226c g     F .text	00000020 memset
008001bc g     F .text	000007e8 main
00804270 g     O .bss	00000004 alt_envp
00802864 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00804268 g     O .bss	00000003 accel_data
008029ec g     F .text	00000038 alt_adc_word_read
00803b28 g     O .rwdata	00000004 alt_errno
0080228c g     F .text	00000054 putc
00802068 g     F .text	00000084 .hidden __divsi3
00803344 g       *ABS*	00000000 __flash_rodata_start
00801594 g     F .text	00000064 read_pixel_ram_int
008027fc g     F .text	00000020 alt_irq_init
00803104 g     F .text	0000005c alt_release_fd
0080240c g     F .text	00000058 _write_r
00803b08 g     O .rwdata	00000004 _impure_ptr
00804278 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller
00800020 g       .exceptions	00000000 alt_irq_entry
00803b20 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00802d4c g     F .text	00000004 alt_ic_isr_register
00803b30 g       *ABS*	00000000 _edata
00804384 g       *ABS*	00000000 _end
00800a30 g     F .text	0000008c read_light
00802c2c g     F .text	00000010 adc_interrupt_asserted
008011e8 g     F .text	00000158 print_symmetry_dots_circle
00800180 g       *ABS*	00000000 __ram_exceptions_end
00802d90 g     F .text	00000040 alt_ic_irq_disable
00802b6c g     F .text	00000014 adc_clear_interrupt_status
008020ec g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802a88 g     F .text	00000008 altera_modular_adc_open
0080000c g       .entry	00000000 _exit
00801918 g     F .text	00000408 queue_print_screen
00802338 g     F .text	0000001c strlen
00803afc g     O .rwdata	00000002 spi_command_tx
00802f4c g     F .text	000001b8 open
008026f4 g     F .text	00000014 alt_putchar
00802aec g     F .text	00000054 adc_recalibrate
00802d48 g     F .text	00000004 alt_icache_flush_all
00803b2c g     O .rwdata	00000004 alt_priority_mask
00802d50 g     F .text	00000040 alt_ic_irq_enable
00801340 g     F .text	0000015c print_empty_circle
00801510 g     F .text	00000084 clear_screen
0080188c g     F .text	0000008c queue_print
008016a0 g     F .text	00000054 queue_init
008016f4 g     F .text	00000130 queue_enqueue
0080149c g     F .text	00000074 print_circle
00802464 g     F .text	000000e0 alt_load
00802bd8 g     F .text	00000054 alt_adc_register_callback



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80010c:	04002034 	movhi	r16,128
  800110:	8410a104 	addi	r16,r16,17028

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	0005883a 	mov	r2,zero
    mask = 1;
  800118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	20ca703a 	and	r5,r4,r3
  800120:	28000b26 	beq	r5,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800124:	100490fa 	slli	r2,r2,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	203ff51e 	bne	r4,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	18c7883a 	add	r3,r3,r3
      i++;
  800154:	10800044 	addi	r2,r2,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a1e117 	ldw	r2,-30844(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6aebf14 	ori	gp,gp,47868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	10909514 	ori	r2,r2,16980

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d0e114 	ori	r3,r3,17284

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	08024640 	call	802464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	08025440 	call	802544 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <main>:
unsigned int i2bcd(unsigned int i);
void update_time(unsigned int i);


int main()
{
  8001bc:	defeb904 	addi	sp,sp,-1308
  8001c0:	dfc14615 	stw	ra,1304(sp)
  8001c4:	df014515 	stw	fp,1300(sp)
  8001c8:	dc414415 	stw	r17,1296(sp)
  8001cc:	dc014315 	stw	r16,1292(sp)
  8001d0:	df014504 	addi	fp,sp,1300
	print_welcome_screen();
  8001d4:	08015f80 	call	8015f8 <print_welcome_screen>
	enum sampling_state state = fast_sampling;
  8001d8:	e03ebb15 	stw	zero,-1300(fp)
	QUEUE q1;
	//QUEUE q2;
	//QUEUE q3;
	QUEUE q4;
	QUEUE q5;
	QUEUE* q11 = &q1;
  8001dc:	e0bec304 	addi	r2,fp,-1268
  8001e0:	e0bec015 	stw	r2,-1280(fp)
	//QUEUE* q22 = &q2;
	//QUEUE* q33 = &q3;
	QUEUE* q44 = &q4;
  8001e4:	e0bed004 	addi	r2,fp,-1216
  8001e8:	e0bec115 	stw	r2,-1276(fp)
	QUEUE* q55 = &q5;
  8001ec:	e0bedd04 	addi	r2,fp,-1164
  8001f0:	e0bec215 	stw	r2,-1272(fp)



	SENSOR_OBJECT accelorometerX =
  8001f4:	009958f4 	movhi	r2,25955
  8001f8:	1098d044 	addi	r2,r2,25409
  8001fc:	e0beea15 	stw	r2,-1112(fp)
  800200:	009bdcb4 	movhi	r2,28530
  800204:	10995b04 	addi	r2,r2,25964
  800208:	e0beeb15 	stw	r2,-1108(fp)
  80020c:	009e0834 	movhi	r2,30752
  800210:	108b9b44 	addi	r2,r2,11885
  800214:	e0beec15 	stw	r2,-1104(fp)
  800218:	e03eed15 	stw	zero,-1100(fp)
  80021c:	e0beee04 	addi	r2,fp,-1096
  800220:	00c01004 	movi	r3,64
  800224:	180d883a 	mov	r6,r3
  800228:	000b883a 	mov	r5,zero
  80022c:	1009883a 	mov	r4,r2
  800230:	080226c0 	call	80226c <memset>
  800234:	00800784 	movi	r2,30
  800238:	e0befe15 	stw	r2,-1032(fp)
  80023c:	00800c84 	movi	r2,50
  800240:	e0beff15 	stw	r2,-1028(fp)
  800244:	00800044 	movi	r2,1
  800248:	e0bf0015 	stw	r2,-1024(fp)
  80024c:	00800044 	movi	r2,1
  800250:	e0bf0115 	stw	r2,-1020(fp)
  800254:	00800644 	movi	r2,25
  800258:	e0bf0215 	stw	r2,-1016(fp)
  80025c:	00800104 	movi	r2,4
  800260:	e0bf0315 	stw	r2,-1012(fp)
  800264:	e0bec317 	ldw	r2,-1268(fp)
  800268:	e0bf0415 	stw	r2,-1008(fp)
  80026c:	e0bec417 	ldw	r2,-1264(fp)
  800270:	e0bf0515 	stw	r2,-1004(fp)
  800274:	e0bec517 	ldw	r2,-1260(fp)
  800278:	e0bf0615 	stw	r2,-1000(fp)
  80027c:	e0bec617 	ldw	r2,-1256(fp)
  800280:	e0bf0715 	stw	r2,-996(fp)
  800284:	e0bec717 	ldw	r2,-1252(fp)
  800288:	e0bf0815 	stw	r2,-992(fp)
  80028c:	e0bec817 	ldw	r2,-1248(fp)
  800290:	e0bf0915 	stw	r2,-988(fp)
  800294:	e0bec917 	ldw	r2,-1244(fp)
  800298:	e0bf0a15 	stw	r2,-984(fp)
  80029c:	e0beca17 	ldw	r2,-1240(fp)
  8002a0:	e0bf0b15 	stw	r2,-980(fp)
  8002a4:	e0becb17 	ldw	r2,-1236(fp)
  8002a8:	e0bf0c15 	stw	r2,-976(fp)
  8002ac:	e0becc17 	ldw	r2,-1232(fp)
  8002b0:	e0bf0d15 	stw	r2,-972(fp)
  8002b4:	e0becd17 	ldw	r2,-1228(fp)
  8002b8:	e0bf0e15 	stw	r2,-968(fp)
  8002bc:	e0bece17 	ldw	r2,-1224(fp)
  8002c0:	e0bf0f15 	stw	r2,-964(fp)
  8002c4:	e0becf17 	ldw	r2,-1220(fp)
  8002c8:	e0bf1015 	stw	r2,-960(fp)
  8002cc:	e0bec017 	ldw	r2,-1280(fp)
  8002d0:	e0bf1115 	stw	r2,-956(fp)
  8002d4:	00802034 	movhi	r2,128
  8002d8:	1082af04 	addi	r2,r2,2748
  8002dc:	e0bf1215 	stw	r2,-952(fp)
  8002e0:	00802034 	movhi	r2,128
  8002e4:	1082bc04 	addi	r2,r2,2800
  8002e8:	e0bf1315 	stw	r2,-948(fp)
  8002ec:	00802034 	movhi	r2,128
  8002f0:	10833704 	addi	r2,r2,3292
  8002f4:	e0bf1415 	stw	r2,-944(fp)
  8002f8:	00802034 	movhi	r2,128
  8002fc:	10831404 	addi	r2,r2,3152
  800300:	e0bf1515 	stw	r2,-940(fp)
  800304:	e0beea04 	addi	r2,fp,-1112
  800308:	e0bf1615 	stw	r2,-936(fp)
  80030c:	00802034 	movhi	r2,128
  800310:	1082cf04 	addi	r2,r2,2876
  800314:	e0bf1715 	stw	r2,-932(fp)
					update_graph,
					&accelorometerZ,
					draw_graph
				};
*/
	SENSOR_OBJECT temp_sensor =
  800318:	009c1b74 	movhi	r2,28781
  80031c:	10995504 	addi	r2,r2,25940
  800320:	e0bf1815 	stw	r2,-928(fp)
  800324:	009d1874 	movhi	r2,29793
  800328:	109c9944 	addi	r2,r2,29285
  80032c:	e0bf1915 	stw	r2,-924(fp)
  800330:	00801974 	movhi	r2,101
  800334:	109c9d44 	addi	r2,r2,29301
  800338:	e0bf1a15 	stw	r2,-920(fp)
  80033c:	e0bf1b04 	addi	r2,fp,-916
  800340:	00c01104 	movi	r3,68
  800344:	180d883a 	mov	r6,r3
  800348:	000b883a 	mov	r5,zero
  80034c:	1009883a 	mov	r4,r2
  800350:	080226c0 	call	80226c <memset>
  800354:	00800784 	movi	r2,30
  800358:	e0bf2c15 	stw	r2,-848(fp)
  80035c:	00802d04 	movi	r2,180
  800360:	e0bf2d15 	stw	r2,-844(fp)
  800364:	00800044 	movi	r2,1
  800368:	e0bf2e15 	stw	r2,-840(fp)
  80036c:	00801904 	movi	r2,100
  800370:	e0bf2f15 	stw	r2,-836(fp)
  800374:	00800284 	movi	r2,10
  800378:	e0bf3015 	stw	r2,-832(fp)
  80037c:	00800104 	movi	r2,4
  800380:	e0bf3115 	stw	r2,-828(fp)
  800384:	e0bed017 	ldw	r2,-1216(fp)
  800388:	e0bf3215 	stw	r2,-824(fp)
  80038c:	e0bed117 	ldw	r2,-1212(fp)
  800390:	e0bf3315 	stw	r2,-820(fp)
  800394:	e0bed217 	ldw	r2,-1208(fp)
  800398:	e0bf3415 	stw	r2,-816(fp)
  80039c:	e0bed317 	ldw	r2,-1204(fp)
  8003a0:	e0bf3515 	stw	r2,-812(fp)
  8003a4:	e0bed417 	ldw	r2,-1200(fp)
  8003a8:	e0bf3615 	stw	r2,-808(fp)
  8003ac:	e0bed517 	ldw	r2,-1196(fp)
  8003b0:	e0bf3715 	stw	r2,-804(fp)
  8003b4:	e0bed617 	ldw	r2,-1192(fp)
  8003b8:	e0bf3815 	stw	r2,-800(fp)
  8003bc:	e0bed717 	ldw	r2,-1188(fp)
  8003c0:	e0bf3915 	stw	r2,-796(fp)
  8003c4:	e0bed817 	ldw	r2,-1184(fp)
  8003c8:	e0bf3a15 	stw	r2,-792(fp)
  8003cc:	e0bed917 	ldw	r2,-1180(fp)
  8003d0:	e0bf3b15 	stw	r2,-788(fp)
  8003d4:	e0beda17 	ldw	r2,-1176(fp)
  8003d8:	e0bf3c15 	stw	r2,-784(fp)
  8003dc:	e0bedb17 	ldw	r2,-1172(fp)
  8003e0:	e0bf3d15 	stw	r2,-780(fp)
  8003e4:	e0bedc17 	ldw	r2,-1168(fp)
  8003e8:	e0bf3e15 	stw	r2,-776(fp)
  8003ec:	e0bec117 	ldw	r2,-1276(fp)
  8003f0:	e0bf3f15 	stw	r2,-772(fp)
  8003f4:	00802034 	movhi	r2,128
  8003f8:	1082af04 	addi	r2,r2,2748
  8003fc:	e0bf4015 	stw	r2,-768(fp)
  800400:	00802034 	movhi	r2,128
  800404:	1082bc04 	addi	r2,r2,2800
  800408:	e0bf4115 	stw	r2,-764(fp)
  80040c:	00802034 	movhi	r2,128
  800410:	10826904 	addi	r2,r2,2468
  800414:	e0bf4215 	stw	r2,-760(fp)
  800418:	00802034 	movhi	r2,128
  80041c:	10831404 	addi	r2,r2,3152
  800420:	e0bf4315 	stw	r2,-756(fp)
  800424:	e0bf1804 	addi	r2,fp,-928
  800428:	e0bf4415 	stw	r2,-752(fp)
  80042c:	00802034 	movhi	r2,128
  800430:	1082cf04 	addi	r2,r2,2876
  800434:	e0bf4515 	stw	r2,-748(fp)
						update_graph,
						&temp_sensor,
						draw_graph
					};

	SENSOR_OBJECT light_sensor =
  800438:	009a19f4 	movhi	r2,26727
  80043c:	109a5304 	addi	r2,r2,26956
  800440:	e0bf4615 	stw	r2,-744(fp)
  800444:	00801d04 	movi	r2,116
  800448:	e0bf4715 	stw	r2,-740(fp)
  80044c:	e0bf4804 	addi	r2,fp,-736
  800450:	00c01204 	movi	r3,72
  800454:	180d883a 	mov	r6,r3
  800458:	000b883a 	mov	r5,zero
  80045c:	1009883a 	mov	r4,r2
  800460:	080226c0 	call	80226c <memset>
  800464:	00802204 	movi	r2,136
  800468:	e0bf5a15 	stw	r2,-664(fp)
  80046c:	00802d04 	movi	r2,180
  800470:	e0bf5b15 	stw	r2,-660(fp)
  800474:	00800044 	movi	r2,1
  800478:	e0bf5c15 	stw	r2,-656(fp)
  80047c:	00801904 	movi	r2,100
  800480:	e0bf5d15 	stw	r2,-652(fp)
  800484:	00800284 	movi	r2,10
  800488:	e0bf5e15 	stw	r2,-648(fp)
  80048c:	00800104 	movi	r2,4
  800490:	e0bf5f15 	stw	r2,-644(fp)
  800494:	e0bedd17 	ldw	r2,-1164(fp)
  800498:	e0bf6015 	stw	r2,-640(fp)
  80049c:	e0bede17 	ldw	r2,-1160(fp)
  8004a0:	e0bf6115 	stw	r2,-636(fp)
  8004a4:	e0bedf17 	ldw	r2,-1156(fp)
  8004a8:	e0bf6215 	stw	r2,-632(fp)
  8004ac:	e0bee017 	ldw	r2,-1152(fp)
  8004b0:	e0bf6315 	stw	r2,-628(fp)
  8004b4:	e0bee117 	ldw	r2,-1148(fp)
  8004b8:	e0bf6415 	stw	r2,-624(fp)
  8004bc:	e0bee217 	ldw	r2,-1144(fp)
  8004c0:	e0bf6515 	stw	r2,-620(fp)
  8004c4:	e0bee317 	ldw	r2,-1140(fp)
  8004c8:	e0bf6615 	stw	r2,-616(fp)
  8004cc:	e0bee417 	ldw	r2,-1136(fp)
  8004d0:	e0bf6715 	stw	r2,-612(fp)
  8004d4:	e0bee517 	ldw	r2,-1132(fp)
  8004d8:	e0bf6815 	stw	r2,-608(fp)
  8004dc:	e0bee617 	ldw	r2,-1128(fp)
  8004e0:	e0bf6915 	stw	r2,-604(fp)
  8004e4:	e0bee717 	ldw	r2,-1124(fp)
  8004e8:	e0bf6a15 	stw	r2,-600(fp)
  8004ec:	e0bee817 	ldw	r2,-1120(fp)
  8004f0:	e0bf6b15 	stw	r2,-596(fp)
  8004f4:	e0bee917 	ldw	r2,-1116(fp)
  8004f8:	e0bf6c15 	stw	r2,-592(fp)
  8004fc:	e0bec217 	ldw	r2,-1272(fp)
  800500:	e0bf6d15 	stw	r2,-588(fp)
  800504:	00802034 	movhi	r2,128
  800508:	1082af04 	addi	r2,r2,2748
  80050c:	e0bf6e15 	stw	r2,-584(fp)
  800510:	00802034 	movhi	r2,128
  800514:	1082bc04 	addi	r2,r2,2800
  800518:	e0bf6f15 	stw	r2,-580(fp)
  80051c:	00802034 	movhi	r2,128
  800520:	10828c04 	addi	r2,r2,2608
  800524:	e0bf7015 	stw	r2,-576(fp)
  800528:	00802034 	movhi	r2,128
  80052c:	10831404 	addi	r2,r2,3152
  800530:	e0bf7115 	stw	r2,-572(fp)
  800534:	e0bf4604 	addi	r2,fp,-744
  800538:	e0bf7215 	stw	r2,-568(fp)
  80053c:	00802034 	movhi	r2,128
  800540:	1082cf04 	addi	r2,r2,2876
  800544:	e0bf7315 	stw	r2,-564(fp)
							accelorometerY,
							accelorometerZ,
							temp_sensor,
							light_sensor};*/

	SENSOR_OBJECT sensors[3]={accelorometerX,
  800548:	e0bf7404 	addi	r2,fp,-560
  80054c:	e0feea04 	addi	r3,fp,-1112
  800550:	01002e04 	movi	r4,184
  800554:	200d883a 	mov	r6,r4
  800558:	180b883a 	mov	r5,r3
  80055c:	1009883a 	mov	r4,r2
  800560:	08022440 	call	802244 <memcpy>
  800564:	e0bfa204 	addi	r2,fp,-376
  800568:	e0ff1804 	addi	r3,fp,-928
  80056c:	01002e04 	movi	r4,184
  800570:	200d883a 	mov	r6,r4
  800574:	180b883a 	mov	r5,r3
  800578:	1009883a 	mov	r4,r2
  80057c:	08022440 	call	802244 <memcpy>
  800580:	e0bfd004 	addi	r2,fp,-192
  800584:	e0ff4604 	addi	r3,fp,-744
  800588:	01002e04 	movi	r4,184
  80058c:	200d883a 	mov	r6,r4
  800590:	180b883a 	mov	r5,r3
  800594:	1009883a 	mov	r4,r2
  800598:	08022440 	call	802244 <memcpy>
								temp_sensor,
								light_sensor};



		for(i = 0; i < 78600; i++)
  80059c:	d021d615 	stw	zero,-30888(gp)
  8005a0:	00000b06 	br	8005d0 <main+0x414>
			set_address_pixel(i, 0);
  8005a4:	d0a1d617 	ldw	r2,-30888(gp)
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	1085883a 	add	r2,r2,r2
  8005b0:	1007883a 	mov	r3,r2
  8005b4:	00804034 	movhi	r2,256
  8005b8:	1885883a 	add	r2,r3,r2
  8005bc:	0007883a 	mov	r3,zero
  8005c0:	10c00035 	stwio	r3,0(r2)
								temp_sensor,
								light_sensor};



		for(i = 0; i < 78600; i++)
  8005c4:	d0a1d617 	ldw	r2,-30888(gp)
  8005c8:	10800044 	addi	r2,r2,1
  8005cc:	d0a1d615 	stw	r2,-30888(gp)
  8005d0:	d0e1d617 	ldw	r3,-30888(gp)
  8005d4:	00800074 	movhi	r2,1
  8005d8:	108cc1c4 	addi	r2,r2,13063
  8005dc:	10fff12e 	bgeu	r2,r3,8005a4 <__alt_data_end+0xff8005a4>
			set_address_pixel(i, 0);

		print_hline(0,120,320,6);
  8005e0:	01c00184 	movi	r7,6
  8005e4:	01805004 	movi	r6,320
  8005e8:	01401e04 	movi	r5,120
  8005ec:	0009883a 	mov	r4,zero
  8005f0:	0800e940 	call	800e94 <print_hline>
		print_vline(320/3,0,240,6);
  8005f4:	01c00184 	movi	r7,6
  8005f8:	01803c04 	movi	r6,240
  8005fc:	000b883a 	mov	r5,zero
  800600:	01001a84 	movi	r4,106
  800604:	0800f640 	call	800f64 <print_vline>
		print_vline(2*320/3,0,240,6);
  800608:	01c00184 	movi	r7,6
  80060c:	01803c04 	movi	r6,240
  800610:	000b883a 	mov	r5,zero
  800614:	01003544 	movi	r4,213
  800618:	0800f640 	call	800f64 <print_vline>

		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
  80061c:	01c02034 	movhi	r7,128
  800620:	39ccd104 	addi	r7,r7,13124
  800624:	01800144 	movi	r6,5
  800628:	01402584 	movi	r5,150
  80062c:	01003684 	movi	r4,218
  800630:	08011400 	call	801140 <print_str>
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
  800634:	01c02034 	movhi	r7,128
  800638:	39ccd404 	addi	r7,r7,13136
  80063c:	01800144 	movi	r6,5
  800640:	01402d04 	movi	r5,180
  800644:	01003684 	movi	r4,218
  800648:	08011400 	call	801140 <print_str>
		print_str(2*320/3 +5,210,5,"L.Karagiannis");
  80064c:	01c02034 	movhi	r7,128
  800650:	39ccd804 	addi	r7,r7,13152
  800654:	01800144 	movi	r6,5
  800658:	01403484 	movi	r5,210
  80065c:	01003684 	movi	r4,218
  800660:	08011400 	call	801140 <print_str>


		for(int i = 0; i<3; i++)
  800664:	e03ebc15 	stw	zero,-1296(fp)
  800668:	00001206 	br	8006b4 <main+0x4f8>
			sensors[i].init_measurement(&sensors[i]);
  80066c:	e0bebc17 	ldw	r2,-1296(fp)
  800670:	01402e04 	movi	r5,184
  800674:	1009883a 	mov	r4,r2
  800678:	080221c0 	call	80221c <__mulsi3>
  80067c:	e0febb04 	addi	r3,fp,-1300
  800680:	1885883a 	add	r2,r3,r2
  800684:	1080e204 	addi	r2,r2,904
  800688:	14000017 	ldw	r16,0(r2)
  80068c:	e47f7404 	addi	r17,fp,-560
  800690:	01402e04 	movi	r5,184
  800694:	e13ebc17 	ldw	r4,-1296(fp)
  800698:	080221c0 	call	80221c <__mulsi3>
  80069c:	8885883a 	add	r2,r17,r2
  8006a0:	1009883a 	mov	r4,r2
  8006a4:	803ee83a 	callr	r16
		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
		print_str(2*320/3 +5,210,5,"L.Karagiannis");


		for(int i = 0; i<3; i++)
  8006a8:	e0bebc17 	ldw	r2,-1296(fp)
  8006ac:	10800044 	addi	r2,r2,1
  8006b0:	e0bebc15 	stw	r2,-1296(fp)
  8006b4:	e0bebc17 	ldw	r2,-1296(fp)
  8006b8:	108000d0 	cmplti	r2,r2,3
  8006bc:	103feb1e 	bne	r2,zero,80066c <__alt_data_end+0xff80066c>
			sensors[i].init_measurement(&sensors[i]);

	while(1){


		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 6)//first button
  8006c0:	00804234 	movhi	r2,264
  8006c4:	10848804 	addi	r2,r2,4640
  8006c8:	10800037 	ldwio	r2,0(r2)
  8006cc:	10800198 	cmpnei	r2,r2,6
  8006d0:	1000011e 	bne	r2,zero,8006d8 <main+0x51c>
			state = fast_sampling;
  8006d4:	e03ebb15 	stw	zero,-1300(fp)
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 5)//snd button
  8006d8:	00804234 	movhi	r2,264
  8006dc:	10848804 	addi	r2,r2,4640
  8006e0:	10800037 	ldwio	r2,0(r2)
  8006e4:	10800158 	cmpnei	r2,r2,5
  8006e8:	1000021e 	bne	r2,zero,8006f4 <main+0x538>
			state = slow_sampling;
  8006ec:	00800044 	movi	r2,1
  8006f0:	e0bebb15 	stw	r2,-1300(fp)

		switch(state){
  8006f4:	e0bebb17 	ldw	r2,-1300(fp)
  8006f8:	10000326 	beq	r2,zero,800708 <main+0x54c>
  8006fc:	10800060 	cmpeqi	r2,r2,1
  800700:	10004c1e 	bne	r2,zero,800834 <main+0x678>
  800704:	0000a606 	br	8009a0 <main+0x7e4>
		case fast_sampling:
#ifdef DEBUG
			alt_printf("fast\n");
#endif
			TIMER_RESET;
  800708:	00d00034 	movhi	r3,16384
  80070c:	00804234 	movhi	r2,264
  800710:	10849904 	addi	r2,r2,4708
  800714:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  800718:	00e00034 	movhi	r3,32768
  80071c:	00804234 	movhi	r2,264
  800720:	10849904 	addi	r2,r2,4708
  800724:	10c00035 	stwio	r3,0(r2)
			while(TIMER_READ < 5000000);
  800728:	0001883a 	nop
  80072c:	00804234 	movhi	r2,264
  800730:	10849804 	addi	r2,r2,4704
  800734:	10c00037 	ldwio	r3,0(r2)
  800738:	00801334 	movhi	r2,76
  80073c:	1092cfc4 	addi	r2,r2,19263
  800740:	10fffa0e 	bge	r2,r3,80072c <__alt_data_end+0xff80072c>
			update_time(1);
  800744:	01000044 	movi	r4,1
  800748:	0801de80 	call	801de8 <update_time>

			for(int i = 0; i<3; i++){
  80074c:	e03ebd15 	stw	zero,-1292(fp)
  800750:	00003406 	br	800824 <main+0x668>
				sensors[i].configure_time_base(1,&sensors[i]);
  800754:	e0bebd17 	ldw	r2,-1292(fp)
  800758:	01402e04 	movi	r5,184
  80075c:	1009883a 	mov	r4,r2
  800760:	080221c0 	call	80221c <__mulsi3>
  800764:	e0febb04 	addi	r3,fp,-1300
  800768:	1885883a 	add	r2,r3,r2
  80076c:	1080e104 	addi	r2,r2,900
  800770:	14000017 	ldw	r16,0(r2)
  800774:	e47f7404 	addi	r17,fp,-560
  800778:	01402e04 	movi	r5,184
  80077c:	e13ebd17 	ldw	r4,-1292(fp)
  800780:	080221c0 	call	80221c <__mulsi3>
  800784:	8885883a 	add	r2,r17,r2
  800788:	100b883a 	mov	r5,r2
  80078c:	01000044 	movi	r4,1
  800790:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  800794:	e0bebd17 	ldw	r2,-1292(fp)
  800798:	01402e04 	movi	r5,184
  80079c:	1009883a 	mov	r4,r2
  8007a0:	080221c0 	call	80221c <__mulsi3>
  8007a4:	e0febb04 	addi	r3,fp,-1300
  8007a8:	1885883a 	add	r2,r3,r2
  8007ac:	1080e304 	addi	r2,r2,908
  8007b0:	14000017 	ldw	r16,0(r2)
  8007b4:	e0bebd17 	ldw	r2,-1292(fp)
  8007b8:	01402e04 	movi	r5,184
  8007bc:	1009883a 	mov	r4,r2
  8007c0:	080221c0 	call	80221c <__mulsi3>
  8007c4:	e0febb04 	addi	r3,fp,-1300
  8007c8:	1885883a 	add	r2,r3,r2
  8007cc:	1080e004 	addi	r2,r2,896
  8007d0:	10800017 	ldw	r2,0(r2)
  8007d4:	1009883a 	mov	r4,r2
  8007d8:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  8007dc:	e0bebd17 	ldw	r2,-1292(fp)
  8007e0:	01402e04 	movi	r5,184
  8007e4:	1009883a 	mov	r4,r2
  8007e8:	080221c0 	call	80221c <__mulsi3>
  8007ec:	e0febb04 	addi	r3,fp,-1300
  8007f0:	1885883a 	add	r2,r3,r2
  8007f4:	1080e404 	addi	r2,r2,912
  8007f8:	14000017 	ldw	r16,0(r2)
  8007fc:	e47f7404 	addi	r17,fp,-560
  800800:	01402e04 	movi	r5,184
  800804:	e13ebd17 	ldw	r4,-1292(fp)
  800808:	080221c0 	call	80221c <__mulsi3>
  80080c:	8885883a 	add	r2,r17,r2
  800810:	1009883a 	mov	r4,r2
  800814:	803ee83a 	callr	r16
			TIMER_RESET;
			TIMER_START;
			while(TIMER_READ < 5000000);
			update_time(1);

			for(int i = 0; i<3; i++){
  800818:	e0bebd17 	ldw	r2,-1292(fp)
  80081c:	10800044 	addi	r2,r2,1
  800820:	e0bebd15 	stw	r2,-1292(fp)
  800824:	e0bebd17 	ldw	r2,-1292(fp)
  800828:	108000d0 	cmplti	r2,r2,3
  80082c:	103fc91e 	bne	r2,zero,800754 <__alt_data_end+0xff800754>
				sensors[i].configure_time_base(1,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
			break;
  800830:	00005b06 	br	8009a0 <main+0x7e4>
		case slow_sampling:
#ifdef DEBUG
			alt_printf("slow\n");
#endif
			TIMER_RESET;
  800834:	00d00034 	movhi	r3,16384
  800838:	00804234 	movhi	r2,264
  80083c:	10849904 	addi	r2,r2,4708
  800840:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  800844:	00e00034 	movhi	r3,32768
  800848:	00804234 	movhi	r2,264
  80084c:	10849904 	addi	r2,r2,4708
  800850:	10c00035 	stwio	r3,0(r2)
			for (int i = 0; i < 10;i++){
  800854:	e03ebe15 	stw	zero,-1288(fp)
  800858:	00001406 	br	8008ac <main+0x6f0>
				while(TIMER_READ < 50000000);
  80085c:	0001883a 	nop
  800860:	00804234 	movhi	r2,264
  800864:	10849804 	addi	r2,r2,4704
  800868:	10c00037 	ldwio	r3,0(r2)
  80086c:	0080bef4 	movhi	r2,763
  800870:	10bc1fc4 	addi	r2,r2,-3969
  800874:	10fffa0e 	bge	r2,r3,800860 <__alt_data_end+0xff800860>
				update_time(10);
  800878:	01000284 	movi	r4,10
  80087c:	0801de80 	call	801de8 <update_time>
				TIMER_RESET;
  800880:	00d00034 	movhi	r3,16384
  800884:	00804234 	movhi	r2,264
  800888:	10849904 	addi	r2,r2,4708
  80088c:	10c00035 	stwio	r3,0(r2)
				TIMER_START;
  800890:	00e00034 	movhi	r3,32768
  800894:	00804234 	movhi	r2,264
  800898:	10849904 	addi	r2,r2,4708
  80089c:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG
			alt_printf("slow\n");
#endif
			TIMER_RESET;
			TIMER_START;
			for (int i = 0; i < 10;i++){
  8008a0:	e0bebe17 	ldw	r2,-1288(fp)
  8008a4:	10800044 	addi	r2,r2,1
  8008a8:	e0bebe15 	stw	r2,-1288(fp)
  8008ac:	e0bebe17 	ldw	r2,-1288(fp)
  8008b0:	10800290 	cmplti	r2,r2,10
  8008b4:	103fe91e 	bne	r2,zero,80085c <__alt_data_end+0xff80085c>
				while(TIMER_READ < 50000000);
				update_time(10);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 0; i<3; i++){
  8008b8:	e03ebf15 	stw	zero,-1284(fp)
  8008bc:	00003406 	br	800990 <main+0x7d4>
				sensors[i].configure_time_base(10,&sensors[i]);
  8008c0:	e0bebf17 	ldw	r2,-1284(fp)
  8008c4:	01402e04 	movi	r5,184
  8008c8:	1009883a 	mov	r4,r2
  8008cc:	080221c0 	call	80221c <__mulsi3>
  8008d0:	e0febb04 	addi	r3,fp,-1300
  8008d4:	1885883a 	add	r2,r3,r2
  8008d8:	1080e104 	addi	r2,r2,900
  8008dc:	14000017 	ldw	r16,0(r2)
  8008e0:	e47f7404 	addi	r17,fp,-560
  8008e4:	01402e04 	movi	r5,184
  8008e8:	e13ebf17 	ldw	r4,-1284(fp)
  8008ec:	080221c0 	call	80221c <__mulsi3>
  8008f0:	8885883a 	add	r2,r17,r2
  8008f4:	100b883a 	mov	r5,r2
  8008f8:	01000284 	movi	r4,10
  8008fc:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  800900:	e0bebf17 	ldw	r2,-1284(fp)
  800904:	01402e04 	movi	r5,184
  800908:	1009883a 	mov	r4,r2
  80090c:	080221c0 	call	80221c <__mulsi3>
  800910:	e0febb04 	addi	r3,fp,-1300
  800914:	1885883a 	add	r2,r3,r2
  800918:	1080e304 	addi	r2,r2,908
  80091c:	14000017 	ldw	r16,0(r2)
  800920:	e0bebf17 	ldw	r2,-1284(fp)
  800924:	01402e04 	movi	r5,184
  800928:	1009883a 	mov	r4,r2
  80092c:	080221c0 	call	80221c <__mulsi3>
  800930:	e0febb04 	addi	r3,fp,-1300
  800934:	1885883a 	add	r2,r3,r2
  800938:	1080e004 	addi	r2,r2,896
  80093c:	10800017 	ldw	r2,0(r2)
  800940:	1009883a 	mov	r4,r2
  800944:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  800948:	e0bebf17 	ldw	r2,-1284(fp)
  80094c:	01402e04 	movi	r5,184
  800950:	1009883a 	mov	r4,r2
  800954:	080221c0 	call	80221c <__mulsi3>
  800958:	e0febb04 	addi	r3,fp,-1300
  80095c:	1885883a 	add	r2,r3,r2
  800960:	1080e404 	addi	r2,r2,912
  800964:	14000017 	ldw	r16,0(r2)
  800968:	e47f7404 	addi	r17,fp,-560
  80096c:	01402e04 	movi	r5,184
  800970:	e13ebf17 	ldw	r4,-1284(fp)
  800974:	080221c0 	call	80221c <__mulsi3>
  800978:	8885883a 	add	r2,r17,r2
  80097c:	1009883a 	mov	r4,r2
  800980:	803ee83a 	callr	r16
				while(TIMER_READ < 50000000);
				update_time(10);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 0; i<3; i++){
  800984:	e0bebf17 	ldw	r2,-1284(fp)
  800988:	10800044 	addi	r2,r2,1
  80098c:	e0bebf15 	stw	r2,-1284(fp)
  800990:	e0bebf17 	ldw	r2,-1284(fp)
  800994:	108000d0 	cmplti	r2,r2,3
  800998:	103fc91e 	bne	r2,zero,8008c0 <__alt_data_end+0xff8008c0>
				sensors[i].configure_time_base(10,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
           break;
  80099c:	0001883a 	nop
		}
	}
  8009a0:	003f4706 	br	8006c0 <__alt_data_end+0xff8006c0>

008009a4 <read_temp>:

	return 0;
}

void read_temp(QUEUE *q){
  8009a4:	defffc04 	addi	sp,sp,-16
  8009a8:	dfc00315 	stw	ra,12(sp)
  8009ac:	df000215 	stw	fp,8(sp)
  8009b0:	df000204 	addi	fp,sp,8
  8009b4:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  8009b8:	00c00044 	movi	r3,1
  8009bc:	00804234 	movhi	r2,264
  8009c0:	10849c04 	addi	r2,r2,4720
  8009c4:	10c00035 	stwio	r3,0(r2)
		alt_u32 temp = ADC_READ_TEMP;
  8009c8:	00804234 	movhi	r2,264
  8009cc:	10840104 	addi	r2,r2,4100
  8009d0:	10800037 	ldwio	r2,0(r2)
  8009d4:	e0bffe15 	stw	r2,-8(fp)
		if(queue_enqueue(q,temp))
  8009d8:	e0bffe17 	ldw	r2,-8(fp)
  8009dc:	100b883a 	mov	r5,r2
  8009e0:	e13fff17 	ldw	r4,-4(fp)
  8009e4:	08016f40 	call	8016f4 <queue_enqueue>
  8009e8:	1000061e 	bne	r2,zero,800a04 <read_temp+0x60>
								;
						else{
							queue_dequeue(q);
  8009ec:	e13fff17 	ldw	r4,-4(fp)
  8009f0:	08018240 	call	801824 <queue_dequeue>
							queue_enqueue(q,temp);
  8009f4:	e0bffe17 	ldw	r2,-8(fp)
  8009f8:	100b883a 	mov	r5,r2
  8009fc:	e13fff17 	ldw	r4,-4(fp)
  800a00:	08016f40 	call	8016f4 <queue_enqueue>
						}
		alt_printf("nu");
  800a04:	01002034 	movhi	r4,128
  800a08:	210cdc04 	addi	r4,r4,13168
  800a0c:	08025840 	call	802584 <alt_printf>
		 queue_print(q);
  800a10:	e13fff17 	ldw	r4,-4(fp)
  800a14:	080188c0 	call	80188c <queue_print>
}
  800a18:	0001883a 	nop
  800a1c:	e037883a 	mov	sp,fp
  800a20:	dfc00117 	ldw	ra,4(sp)
  800a24:	df000017 	ldw	fp,0(sp)
  800a28:	dec00204 	addi	sp,sp,8
  800a2c:	f800283a 	ret

00800a30 <read_light>:
void read_light(QUEUE *q){
  800a30:	defffc04 	addi	sp,sp,-16
  800a34:	dfc00315 	stw	ra,12(sp)
  800a38:	df000215 	stw	fp,8(sp)
  800a3c:	df000204 	addi	fp,sp,8
  800a40:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  800a44:	00c00044 	movi	r3,1
  800a48:	00804234 	movhi	r2,264
  800a4c:	10849c04 	addi	r2,r2,4720
  800a50:	10c00035 	stwio	r3,0(r2)
			alt_u32 light = ADC_READ_PHOTO;
  800a54:	00804234 	movhi	r2,264
  800a58:	10840004 	addi	r2,r2,4096
  800a5c:	10800037 	ldwio	r2,0(r2)
  800a60:	e0bffe15 	stw	r2,-8(fp)
			if(queue_enqueue(q,light))
  800a64:	e0bffe17 	ldw	r2,-8(fp)
  800a68:	100b883a 	mov	r5,r2
  800a6c:	e13fff17 	ldw	r4,-4(fp)
  800a70:	08016f40 	call	8016f4 <queue_enqueue>
  800a74:	1000091e 	bne	r2,zero,800a9c <read_light+0x6c>
									;
							else{
								queue_dequeue(q);
  800a78:	e13fff17 	ldw	r4,-4(fp)
  800a7c:	08018240 	call	801824 <queue_dequeue>
								queue_enqueue(q,light);
  800a80:	e0bffe17 	ldw	r2,-8(fp)
  800a84:	100b883a 	mov	r5,r2
  800a88:	e13fff17 	ldw	r4,-4(fp)
  800a8c:	08016f40 	call	8016f4 <queue_enqueue>
			alt_printf("printar nu");				}
  800a90:	01002034 	movhi	r4,128
  800a94:	210cdd04 	addi	r4,r4,13172
  800a98:	08025840 	call	802584 <alt_printf>
			queue_print(q);
  800a9c:	e13fff17 	ldw	r4,-4(fp)
  800aa0:	080188c0 	call	80188c <queue_print>
}
  800aa4:	0001883a 	nop
  800aa8:	e037883a 	mov	sp,fp
  800aac:	dfc00117 	ldw	ra,4(sp)
  800ab0:	df000017 	ldw	fp,0(sp)
  800ab4:	dec00204 	addi	sp,sp,8
  800ab8:	f800283a 	ret

00800abc <config_time_base>:
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj){
  800abc:	defffd04 	addi	sp,sp,-12
  800ac0:	df000215 	stw	fp,8(sp)
  800ac4:	df000204 	addi	fp,sp,8
  800ac8:	e13ffe15 	stw	r4,-8(fp)
  800acc:	e17fff15 	stw	r5,-4(fp)
	 sensor_obj->time_base = time_base;
  800ad0:	e0bfff17 	ldw	r2,-4(fp)
  800ad4:	e0fffe17 	ldw	r3,-8(fp)
  800ad8:	10c01615 	stw	r3,88(r2)
}
  800adc:	0001883a 	nop
  800ae0:	e037883a 	mov	sp,fp
  800ae4:	df000017 	ldw	fp,0(sp)
  800ae8:	dec00104 	addi	sp,sp,4
  800aec:	f800283a 	ret

00800af0 <init_measurement>:
void init_measurement(SENSOR_OBJECT* sensor_obj){
  800af0:	defffd04 	addi	sp,sp,-12
  800af4:	dfc00215 	stw	ra,8(sp)
  800af8:	df000115 	stw	fp,4(sp)
  800afc:	df000104 	addi	fp,sp,4
  800b00:	e13fff15 	stw	r4,-4(fp)
	queue_init(sensor_obj->q);
  800b04:	e0bfff17 	ldw	r2,-4(fp)
  800b08:	10802717 	ldw	r2,156(r2)
  800b0c:	1009883a 	mov	r4,r2
  800b10:	08016a00 	call	8016a0 <queue_init>
	sensor_obj->draw_graph(sensor_obj);
  800b14:	e0bfff17 	ldw	r2,-4(fp)
  800b18:	10802d17 	ldw	r2,180(r2)
  800b1c:	e13fff17 	ldw	r4,-4(fp)
  800b20:	103ee83a 	callr	r2
}
  800b24:	0001883a 	nop
  800b28:	e037883a 	mov	sp,fp
  800b2c:	dfc00117 	ldw	ra,4(sp)
  800b30:	df000017 	ldw	fp,0(sp)
  800b34:	dec00204 	addi	sp,sp,8
  800b38:	f800283a 	ret

00800b3c <draw_graph>:

void draw_graph(SENSOR_OBJECT* sensor_obj){
  800b3c:	defffc04 	addi	sp,sp,-16
  800b40:	dfc00315 	stw	ra,12(sp)
  800b44:	df000215 	stw	fp,8(sp)
  800b48:	df000204 	addi	fp,sp,8
  800b4c:	e13fff15 	stw	r4,-4(fp)
	print_char(sensor_obj->x_origo +55,sensor_obj->y_origo -3,7,0,'>');
  800b50:	e0bfff17 	ldw	r2,-4(fp)
  800b54:	10801417 	ldw	r2,80(r2)
  800b58:	10c00dc4 	addi	r3,r2,55
  800b5c:	e0bfff17 	ldw	r2,-4(fp)
  800b60:	10801517 	ldw	r2,84(r2)
  800b64:	113fff44 	addi	r4,r2,-3
  800b68:	00800f84 	movi	r2,62
  800b6c:	d8800015 	stw	r2,0(sp)
  800b70:	000f883a 	mov	r7,zero
  800b74:	018001c4 	movi	r6,7
  800b78:	200b883a 	mov	r5,r4
  800b7c:	1809883a 	mov	r4,r3
  800b80:	08010340 	call	801034 <print_char>
		print_hline(sensor_obj->x_origo,sensor_obj->y_origo,60,7);
  800b84:	e0bfff17 	ldw	r2,-4(fp)
  800b88:	10c01417 	ldw	r3,80(r2)
  800b8c:	e0bfff17 	ldw	r2,-4(fp)
  800b90:	10801517 	ldw	r2,84(r2)
  800b94:	01c001c4 	movi	r7,7
  800b98:	01800f04 	movi	r6,60
  800b9c:	100b883a 	mov	r5,r2
  800ba0:	1809883a 	mov	r4,r3
  800ba4:	0800e940 	call	800e94 <print_hline>

		print_char(sensor_obj->x_origo -4,sensor_obj->y_origo -45,7,0,'^');
  800ba8:	e0bfff17 	ldw	r2,-4(fp)
  800bac:	10801417 	ldw	r2,80(r2)
  800bb0:	10ffff04 	addi	r3,r2,-4
  800bb4:	e0bfff17 	ldw	r2,-4(fp)
  800bb8:	10801517 	ldw	r2,84(r2)
  800bbc:	113ff4c4 	addi	r4,r2,-45
  800bc0:	00801784 	movi	r2,94
  800bc4:	d8800015 	stw	r2,0(sp)
  800bc8:	000f883a 	mov	r7,zero
  800bcc:	018001c4 	movi	r6,7
  800bd0:	200b883a 	mov	r5,r4
  800bd4:	1809883a 	mov	r4,r3
  800bd8:	08010340 	call	801034 <print_char>
		print_vline(sensor_obj->x_origo-1,sensor_obj->y_origo -45,45,7);
  800bdc:	e0bfff17 	ldw	r2,-4(fp)
  800be0:	10801417 	ldw	r2,80(r2)
  800be4:	10ffffc4 	addi	r3,r2,-1
  800be8:	e0bfff17 	ldw	r2,-4(fp)
  800bec:	10801517 	ldw	r2,84(r2)
  800bf0:	10bff4c4 	addi	r2,r2,-45
  800bf4:	01c001c4 	movi	r7,7
  800bf8:	01800b44 	movi	r6,45
  800bfc:	100b883a 	mov	r5,r2
  800c00:	1809883a 	mov	r4,r3
  800c04:	0800f640 	call	800f64 <print_vline>

		print_str(sensor_obj->x_origo -20, sensor_obj->y_origo +10,7,sensor_obj->description);
  800c08:	e0bfff17 	ldw	r2,-4(fp)
  800c0c:	10801417 	ldw	r2,80(r2)
  800c10:	10fffb04 	addi	r3,r2,-20
  800c14:	e0bfff17 	ldw	r2,-4(fp)
  800c18:	10801517 	ldw	r2,84(r2)
  800c1c:	10800284 	addi	r2,r2,10
  800c20:	e13fff17 	ldw	r4,-4(fp)
  800c24:	200f883a 	mov	r7,r4
  800c28:	018001c4 	movi	r6,7
  800c2c:	100b883a 	mov	r5,r2
  800c30:	1809883a 	mov	r4,r3
  800c34:	08011400 	call	801140 <print_str>
}
  800c38:	0001883a 	nop
  800c3c:	e037883a 	mov	sp,fp
  800c40:	dfc00117 	ldw	ra,4(sp)
  800c44:	df000017 	ldw	fp,0(sp)
  800c48:	dec00204 	addi	sp,sp,8
  800c4c:	f800283a 	ret

00800c50 <update_graph>:
void update_graph(SENSOR_OBJECT* sensor_obj){
  800c50:	defffa04 	addi	sp,sp,-24
  800c54:	dfc00515 	stw	ra,20(sp)
  800c58:	df000415 	stw	fp,16(sp)
  800c5c:	df000404 	addi	fp,sp,16
  800c60:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c64:	e0bfff17 	ldw	r2,-4(fp)
  800c68:	10c02717 	ldw	r3,156(r2)
			sensor_obj->x_origo,
  800c6c:	e0bfff17 	ldw	r2,-4(fp)
  800c70:	10801417 	ldw	r2,80(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c74:	1011883a 	mov	r8,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
  800c78:	e0bfff17 	ldw	r2,-4(fp)
  800c7c:	10801517 	ldw	r2,84(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c80:	100d883a 	mov	r6,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
  800c84:	e0bfff17 	ldw	r2,-4(fp)
  800c88:	10801717 	ldw	r2,92(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c8c:	100f883a 	mov	r7,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
  800c90:	e0bfff17 	ldw	r2,-4(fp)
  800c94:	10801817 	ldw	r2,96(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800c98:	1009883a 	mov	r4,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb,sensor_obj );
  800c9c:	e0bfff17 	ldw	r2,-4(fp)
  800ca0:	10801917 	ldw	r2,100(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800ca4:	100b883a 	mov	r5,r2
  800ca8:	e0bfff17 	ldw	r2,-4(fp)
  800cac:	d8800215 	stw	r2,8(sp)
  800cb0:	d9400115 	stw	r5,4(sp)
  800cb4:	d9000015 	stw	r4,0(sp)
  800cb8:	400b883a 	mov	r5,r8
  800cbc:	1809883a 	mov	r4,r3
  800cc0:	08019180 	call	801918 <queue_print_screen>
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb,sensor_obj );
}
  800cc4:	0001883a 	nop
  800cc8:	e037883a 	mov	sp,fp
  800ccc:	dfc00117 	ldw	ra,4(sp)
  800cd0:	df000017 	ldw	fp,0(sp)
  800cd4:	dec00204 	addi	sp,sp,8
  800cd8:	f800283a 	ret

00800cdc <read_accelerometerX>:
void read_accelerometerX(QUEUE *q)
{
  800cdc:	defff604 	addi	sp,sp,-40
  800ce0:	dfc00915 	stw	ra,36(sp)
  800ce4:	df000815 	stw	fp,32(sp)
  800ce8:	df000804 	addi	fp,sp,32
  800cec:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  800cf0:	008002c4 	movi	r2,11
  800cf4:	e0bffcc5 	stb	r2,-13(fp)
  800cf8:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800cfc:	008002c4 	movi	r2,11
  800d00:	e0bffd45 	stb	r2,-11(fp)
  800d04:	e03ffd85 	stb	zero,-10(fp)
  800d08:	e03ffdc5 	stb	zero,-9(fp)
  800d0c:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800d10:	00800284 	movi	r2,10
  800d14:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  800d18:	00800b44 	movi	r2,45
  800d1c:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800d20:	00800084 	movi	r2,2
  800d24:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800d28:	e0fffcc4 	addi	r3,fp,-13
  800d2c:	d8000215 	stw	zero,8(sp)
  800d30:	e0bffd44 	addi	r2,fp,-11
  800d34:	d8800115 	stw	r2,4(sp)
  800d38:	d8000015 	stw	zero,0(sp)
  800d3c:	180f883a 	mov	r7,r3
  800d40:	018000c4 	movi	r6,3
  800d44:	000b883a 	mov	r5,zero
  800d48:	01004234 	movhi	r4,264
  800d4c:	21048004 	addi	r4,r4,4608
  800d50:	08029040 	call	802904 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800d54:	008002c4 	movi	r2,11
  800d58:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800d5c:	00800204 	movi	r2,8
  800d60:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800d64:	e0fffcc4 	addi	r3,fp,-13
  800d68:	d8000215 	stw	zero,8(sp)
  800d6c:	e0bffc04 	addi	r2,fp,-16
  800d70:	d8800115 	stw	r2,4(sp)
  800d74:	008000c4 	movi	r2,3
  800d78:	d8800015 	stw	r2,0(sp)
  800d7c:	180f883a 	mov	r7,r3
  800d80:	01800084 	movi	r6,2
  800d84:	000b883a 	mov	r5,zero
  800d88:	01004234 	movhi	r4,264
  800d8c:	21048004 	addi	r4,r4,4608
  800d90:	08029040 	call	802904 <alt_avalon_spi_command>
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_x = 0;
  800d94:	e03ffb15 	stw	zero,-20(fp)
		accel_x = (alt_32)accel_data.x;
  800d98:	e0bffc03 	ldbu	r2,-16(fp)
  800d9c:	10803fcc 	andi	r2,r2,255
  800da0:	1080201c 	xori	r2,r2,128
  800da4:	10bfe004 	addi	r2,r2,-128
  800da8:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_x))
  800dac:	e17ffb17 	ldw	r5,-20(fp)
  800db0:	e13fff17 	ldw	r4,-4(fp)
  800db4:	08016f40 	call	8016f4 <queue_enqueue>
  800db8:	1000051e 	bne	r2,zero,800dd0 <read_accelerometerX+0xf4>
						;
				else{
					queue_dequeue(q);
  800dbc:	e13fff17 	ldw	r4,-4(fp)
  800dc0:	08018240 	call	801824 <queue_dequeue>
					queue_enqueue(q,accel_x);
  800dc4:	e17ffb17 	ldw	r5,-20(fp)
  800dc8:	e13fff17 	ldw	r4,-4(fp)
  800dcc:	08016f40 	call	8016f4 <queue_enqueue>
				}
}
  800dd0:	0001883a 	nop
  800dd4:	e037883a 	mov	sp,fp
  800dd8:	dfc00117 	ldw	ra,4(sp)
  800ddc:	df000017 	ldw	fp,0(sp)
  800de0:	dec00204 	addi	sp,sp,8
  800de4:	f800283a 	ret

00800de8 <print_pix>:

*/
/*************************************************/

void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
  800de8:	defffb04 	addi	sp,sp,-20
  800dec:	dfc00415 	stw	ra,16(sp)
  800df0:	df000315 	stw	fp,12(sp)
  800df4:	df000304 	addi	fp,sp,12
  800df8:	e13ffd15 	stw	r4,-12(fp)
  800dfc:	e17ffe15 	stw	r5,-8(fp)
  800e00:	e1bfff15 	stw	r6,-4(fp)
	if(rgb <= 7 && rgb >= 0)
  800e04:	e0bfff17 	ldw	r2,-4(fp)
  800e08:	10800228 	cmpgeui	r2,r2,8
  800e0c:	10000e1e 	bne	r2,zero,800e48 <print_pix+0x60>
		set_pixel(x,y,rgb);
  800e10:	01405004 	movi	r5,320
  800e14:	e13ffe17 	ldw	r4,-8(fp)
  800e18:	080221c0 	call	80221c <__mulsi3>
  800e1c:	1007883a 	mov	r3,r2
  800e20:	e0bffd17 	ldw	r2,-12(fp)
  800e24:	1885883a 	add	r2,r3,r2
  800e28:	1085883a 	add	r2,r2,r2
  800e2c:	1085883a 	add	r2,r2,r2
  800e30:	1007883a 	mov	r3,r2
  800e34:	00804034 	movhi	r2,256
  800e38:	1885883a 	add	r2,r3,r2
  800e3c:	e0ffff17 	ldw	r3,-4(fp)
  800e40:	10c00035 	stwio	r3,0(r2)
	else
		set_pixel(x,y,0);
}
  800e44:	00000d06 	br	800e7c <print_pix+0x94>
void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
	if(rgb <= 7 && rgb >= 0)
		set_pixel(x,y,rgb);
	else
		set_pixel(x,y,0);
  800e48:	01405004 	movi	r5,320
  800e4c:	e13ffe17 	ldw	r4,-8(fp)
  800e50:	080221c0 	call	80221c <__mulsi3>
  800e54:	1007883a 	mov	r3,r2
  800e58:	e0bffd17 	ldw	r2,-12(fp)
  800e5c:	1885883a 	add	r2,r3,r2
  800e60:	1085883a 	add	r2,r2,r2
  800e64:	1085883a 	add	r2,r2,r2
  800e68:	1007883a 	mov	r3,r2
  800e6c:	00804034 	movhi	r2,256
  800e70:	1885883a 	add	r2,r3,r2
  800e74:	0007883a 	mov	r3,zero
  800e78:	10c00035 	stwio	r3,0(r2)
}
  800e7c:	0001883a 	nop
  800e80:	e037883a 	mov	sp,fp
  800e84:	dfc00117 	ldw	ra,4(sp)
  800e88:	df000017 	ldw	fp,0(sp)
  800e8c:	dec00204 	addi	sp,sp,8
  800e90:	f800283a 	ret

00800e94 <print_hline>:
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){
  800e94:	defff804 	addi	sp,sp,-32
  800e98:	dfc00715 	stw	ra,28(sp)
  800e9c:	df000615 	stw	fp,24(sp)
  800ea0:	df000604 	addi	fp,sp,24
  800ea4:	e13ffc15 	stw	r4,-16(fp)
  800ea8:	e17ffd15 	stw	r5,-12(fp)
  800eac:	e1bffe15 	stw	r6,-8(fp)
  800eb0:	e1ffff15 	stw	r7,-4(fp)



	if(x_start + len <= 320){
  800eb4:	e0fffc17 	ldw	r3,-16(fp)
  800eb8:	e0bffe17 	ldw	r2,-8(fp)
  800ebc:	1885883a 	add	r2,r3,r2
  800ec0:	10805068 	cmpgeui	r2,r2,321
  800ec4:	1000101e 	bne	r2,zero,800f08 <print_hline+0x74>
		for(int i = 0; i < len; i++){
  800ec8:	e03ffa15 	stw	zero,-24(fp)
  800ecc:	00000a06 	br	800ef8 <print_hline+0x64>
			print_pix(x_start + i,y_start, RGB);
  800ed0:	e0fffa17 	ldw	r3,-24(fp)
  800ed4:	e0bffc17 	ldw	r2,-16(fp)
  800ed8:	1885883a 	add	r2,r3,r2
  800edc:	e1bfff17 	ldw	r6,-4(fp)
  800ee0:	e17ffd17 	ldw	r5,-12(fp)
  800ee4:	1009883a 	mov	r4,r2
  800ee8:	0800de80 	call	800de8 <print_pix>
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){



	if(x_start + len <= 320){
		for(int i = 0; i < len; i++){
  800eec:	e0bffa17 	ldw	r2,-24(fp)
  800ef0:	10800044 	addi	r2,r2,1
  800ef4:	e0bffa15 	stw	r2,-24(fp)
  800ef8:	e0fffa17 	ldw	r3,-24(fp)
  800efc:	e0bffe17 	ldw	r2,-8(fp)
  800f00:	18bff336 	bltu	r3,r2,800ed0 <__alt_data_end+0xff800ed0>
		for(int i = 0; i < (320-x_start); i++){
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800f04:	00001106 	br	800f4c <print_hline+0xb8>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800f08:	e03ffb15 	stw	zero,-20(fp)
  800f0c:	00000a06 	br	800f38 <print_hline+0xa4>
					print_pix(x_start + i,y_start, RGB);
  800f10:	e0fffb17 	ldw	r3,-20(fp)
  800f14:	e0bffc17 	ldw	r2,-16(fp)
  800f18:	1885883a 	add	r2,r3,r2
  800f1c:	e1bfff17 	ldw	r6,-4(fp)
  800f20:	e17ffd17 	ldw	r5,-12(fp)
  800f24:	1009883a 	mov	r4,r2
  800f28:	0800de80 	call	800de8 <print_pix>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  800f2c:	e0bffb17 	ldw	r2,-20(fp)
  800f30:	10800044 	addi	r2,r2,1
  800f34:	e0bffb15 	stw	r2,-20(fp)
  800f38:	00c05004 	movi	r3,320
  800f3c:	e0bffc17 	ldw	r2,-16(fp)
  800f40:	1885c83a 	sub	r2,r3,r2
  800f44:	e0fffb17 	ldw	r3,-20(fp)
  800f48:	18bff136 	bltu	r3,r2,800f10 <__alt_data_end+0xff800f10>
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  800f4c:	0001883a 	nop
  800f50:	e037883a 	mov	sp,fp
  800f54:	dfc00117 	ldw	ra,4(sp)
  800f58:	df000017 	ldw	fp,0(sp)
  800f5c:	dec00204 	addi	sp,sp,8
  800f60:	f800283a 	ret

00800f64 <print_vline>:
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
  800f64:	defff804 	addi	sp,sp,-32
  800f68:	dfc00715 	stw	ra,28(sp)
  800f6c:	df000615 	stw	fp,24(sp)
  800f70:	df000604 	addi	fp,sp,24
  800f74:	e13ffc15 	stw	r4,-16(fp)
  800f78:	e17ffd15 	stw	r5,-12(fp)
  800f7c:	e1bffe15 	stw	r6,-8(fp)
  800f80:	e1ffff15 	stw	r7,-4(fp)
	if(y_start + len <= 240){
  800f84:	e0fffd17 	ldw	r3,-12(fp)
  800f88:	e0bffe17 	ldw	r2,-8(fp)
  800f8c:	1885883a 	add	r2,r3,r2
  800f90:	10803c68 	cmpgeui	r2,r2,241
  800f94:	1000101e 	bne	r2,zero,800fd8 <print_vline+0x74>
			for(int i = 0; i < len; i++){
  800f98:	e03ffa15 	stw	zero,-24(fp)
  800f9c:	00000a06 	br	800fc8 <print_vline+0x64>
				print_pix(x_start,y_start + i, RGB);
  800fa0:	e0fffa17 	ldw	r3,-24(fp)
  800fa4:	e0bffd17 	ldw	r2,-12(fp)
  800fa8:	1885883a 	add	r2,r3,r2
  800fac:	e1bfff17 	ldw	r6,-4(fp)
  800fb0:	100b883a 	mov	r5,r2
  800fb4:	e13ffc17 	ldw	r4,-16(fp)
  800fb8:	0800de80 	call	800de8 <print_pix>

}
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
	if(y_start + len <= 240){
			for(int i = 0; i < len; i++){
  800fbc:	e0bffa17 	ldw	r2,-24(fp)
  800fc0:	10800044 	addi	r2,r2,1
  800fc4:	e0bffa15 	stw	r2,-24(fp)
  800fc8:	e0fffa17 	ldw	r3,-24(fp)
  800fcc:	e0bffe17 	ldw	r2,-8(fp)
  800fd0:	18bff336 	bltu	r3,r2,800fa0 <__alt_data_end+0xff800fa0>

			for(int i = 0; i < (240-y_start); i++){
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  800fd4:	00001106 	br	80101c <print_vline+0xb8>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  800fd8:	e03ffb15 	stw	zero,-20(fp)
  800fdc:	00000a06 	br	801008 <print_vline+0xa4>
						print_pix(x_start,y_start +i , RGB);
  800fe0:	e0fffb17 	ldw	r3,-20(fp)
  800fe4:	e0bffd17 	ldw	r2,-12(fp)
  800fe8:	1885883a 	add	r2,r3,r2
  800fec:	e1bfff17 	ldw	r6,-4(fp)
  800ff0:	100b883a 	mov	r5,r2
  800ff4:	e13ffc17 	ldw	r4,-16(fp)
  800ff8:	0800de80 	call	800de8 <print_pix>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  800ffc:	e0bffb17 	ldw	r2,-20(fp)
  801000:	10800044 	addi	r2,r2,1
  801004:	e0bffb15 	stw	r2,-20(fp)
  801008:	00c03c04 	movi	r3,240
  80100c:	e0bffd17 	ldw	r2,-12(fp)
  801010:	1885c83a 	sub	r2,r3,r2
  801014:	e0fffb17 	ldw	r3,-20(fp)
  801018:	18bff136 	bltu	r3,r2,800fe0 <__alt_data_end+0xff800fe0>
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  80101c:	0001883a 	nop
  801020:	e037883a 	mov	sp,fp
  801024:	dfc00117 	ldw	ra,4(sp)
  801028:	df000017 	ldw	fp,0(sp)
  80102c:	dec00204 	addi	sp,sp,8
  801030:	f800283a 	ret

00801034 <print_char>:

void  print_char(alt_u32 x,alt_u32 y,alt_u32 rgb,alt_u32 BG_RGB,char Character)
{
  801034:	defff604 	addi	sp,sp,-40
  801038:	dfc00915 	stw	ra,36(sp)
  80103c:	df000815 	stw	fp,32(sp)
  801040:	df000804 	addi	fp,sp,32
  801044:	e13ffb15 	stw	r4,-20(fp)
  801048:	e17ffc15 	stw	r5,-16(fp)
  80104c:	e1bffd15 	stw	r6,-12(fp)
  801050:	e1fffe15 	stw	r7,-8(fp)
  801054:	e0800217 	ldw	r2,8(fp)
  801058:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
  80105c:	e0bfff03 	ldbu	r2,-4(fp)
  801060:	e0bffa05 	stb	r2,-24(fp)
	for (row = 0; row <8; row++)
  801064:	e03ff815 	stw	zero,-32(fp)
  801068:	00002c06 	br	80111c <print_char+0xe8>
	{
			temp =  (alt_8)font8x8_basic[token][row];
  80106c:	e0fffa03 	ldbu	r3,-24(fp)
  801070:	00802034 	movhi	r2,128
  801074:	108d0304 	addi	r2,r2,13324
  801078:	180690fa 	slli	r3,r3,3
  80107c:	10c7883a 	add	r3,r2,r3
  801080:	e0bff817 	ldw	r2,-32(fp)
  801084:	1885883a 	add	r2,r3,r2
  801088:	10800003 	ldbu	r2,0(r2)
  80108c:	e0bffa45 	stb	r2,-23(fp)

			for (int pos = 0 ; pos != 8 ; pos++) {
  801090:	e03ff915 	stw	zero,-28(fp)
  801094:	00001b06 	br	801104 <print_char+0xd0>
			    if (temp & (1 << pos)) {
  801098:	e0fffa43 	ldbu	r3,-23(fp)
  80109c:	e0bff917 	ldw	r2,-28(fp)
  8010a0:	1885d83a 	sra	r2,r3,r2
  8010a4:	1080004c 	andi	r2,r2,1
  8010a8:	10000a26 	beq	r2,zero,8010d4 <print_char+0xa0>
			        // Current bit is set to 1
			    	print_pix(x+pos,y+row,rgb);
  8010ac:	e0fff917 	ldw	r3,-28(fp)
  8010b0:	e0bffb17 	ldw	r2,-20(fp)
  8010b4:	1889883a 	add	r4,r3,r2
  8010b8:	e0fff817 	ldw	r3,-32(fp)
  8010bc:	e0bffc17 	ldw	r2,-16(fp)
  8010c0:	1885883a 	add	r2,r3,r2
  8010c4:	e1bffd17 	ldw	r6,-12(fp)
  8010c8:	100b883a 	mov	r5,r2
  8010cc:	0800de80 	call	800de8 <print_pix>
  8010d0:	00000906 	br	8010f8 <print_char+0xc4>
			    } else {
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
  8010d4:	e0fff917 	ldw	r3,-28(fp)
  8010d8:	e0bffb17 	ldw	r2,-20(fp)
  8010dc:	1889883a 	add	r4,r3,r2
  8010e0:	e0fff817 	ldw	r3,-32(fp)
  8010e4:	e0bffc17 	ldw	r2,-16(fp)
  8010e8:	1885883a 	add	r2,r3,r2
  8010ec:	e1bffe17 	ldw	r6,-8(fp)
  8010f0:	100b883a 	mov	r5,r2
  8010f4:	0800de80 	call	800de8 <print_pix>
	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
	{
			temp =  (alt_8)font8x8_basic[token][row];

			for (int pos = 0 ; pos != 8 ; pos++) {
  8010f8:	e0bff917 	ldw	r2,-28(fp)
  8010fc:	10800044 	addi	r2,r2,1
  801100:	e0bff915 	stw	r2,-28(fp)
  801104:	e0bff917 	ldw	r2,-28(fp)
  801108:	10800218 	cmpnei	r2,r2,8
  80110c:	103fe21e 	bne	r2,zero,801098 <__alt_data_end+0xff801098>
{
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
  801110:	e0bff817 	ldw	r2,-32(fp)
  801114:	10800044 	addi	r2,r2,1
  801118:	e0bff815 	stw	r2,-32(fp)
  80111c:	e0bff817 	ldw	r2,-32(fp)
  801120:	10800210 	cmplti	r2,r2,8
  801124:	103fd11e 	bne	r2,zero,80106c <__alt_data_end+0xff80106c>
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
			    }
			}
	}
}
  801128:	0001883a 	nop
  80112c:	e037883a 	mov	sp,fp
  801130:	dfc00117 	ldw	ra,4(sp)
  801134:	df000017 	ldw	fp,0(sp)
  801138:	dec00204 	addi	sp,sp,8
  80113c:	f800283a 	ret

00801140 <print_str>:
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
  801140:	defff804 	addi	sp,sp,-32
  801144:	dfc00715 	stw	ra,28(sp)
  801148:	df000615 	stw	fp,24(sp)
  80114c:	df000604 	addi	fp,sp,24
  801150:	e13ffc15 	stw	r4,-16(fp)
  801154:	e17ffd15 	stw	r5,-12(fp)
  801158:	e1bffe15 	stw	r6,-8(fp)
  80115c:	e1ffff15 	stw	r7,-4(fp)
	alt_u16 len = (alt_u16) strlen(str);
  801160:	e13fff17 	ldw	r4,-4(fp)
  801164:	08023380 	call	802338 <strlen>
  801168:	e0bffb8d 	sth	r2,-18(fp)
	alt_u16 i;
	for(i=0; i< len; i++){
  80116c:	e03ffb0d 	sth	zero,-20(fp)
  801170:	00001406 	br	8011c4 <print_str+0x84>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
  801174:	e0bffb0b 	ldhu	r2,-20(fp)
  801178:	100490fa 	slli	r2,r2,3
  80117c:	1007883a 	mov	r3,r2
  801180:	e0bffc17 	ldw	r2,-16(fp)
  801184:	1889883a 	add	r4,r3,r2
  801188:	e0bffb0b 	ldhu	r2,-20(fp)
  80118c:	e0ffff17 	ldw	r3,-4(fp)
  801190:	1885883a 	add	r2,r3,r2
  801194:	10800003 	ldbu	r2,0(r2)
  801198:	10803fcc 	andi	r2,r2,255
  80119c:	1080201c 	xori	r2,r2,128
  8011a0:	10bfe004 	addi	r2,r2,-128
  8011a4:	d8800015 	stw	r2,0(sp)
  8011a8:	000f883a 	mov	r7,zero
  8011ac:	e1bffe17 	ldw	r6,-8(fp)
  8011b0:	e17ffd17 	ldw	r5,-12(fp)
  8011b4:	08010340 	call	801034 <print_char>
}
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
	alt_u16 len = (alt_u16) strlen(str);
	alt_u16 i;
	for(i=0; i< len; i++){
  8011b8:	e0bffb0b 	ldhu	r2,-20(fp)
  8011bc:	10800044 	addi	r2,r2,1
  8011c0:	e0bffb0d 	sth	r2,-20(fp)
  8011c4:	e0fffb0b 	ldhu	r3,-20(fp)
  8011c8:	e0bffb8b 	ldhu	r2,-18(fp)
  8011cc:	18bfe936 	bltu	r3,r2,801174 <__alt_data_end+0xff801174>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
	}
}
  8011d0:	0001883a 	nop
  8011d4:	e037883a 	mov	sp,fp
  8011d8:	dfc00117 	ldw	ra,4(sp)
  8011dc:	df000017 	ldw	fp,0(sp)
  8011e0:	dec00204 	addi	sp,sp,8
  8011e4:	f800283a 	ret

008011e8 <print_symmetry_dots_circle>:

void print_symmetry_dots_circle(alt_u32 x, alt_u32 y, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  8011e8:	defffa04 	addi	sp,sp,-24
  8011ec:	dfc00515 	stw	ra,20(sp)
  8011f0:	df000415 	stw	fp,16(sp)
  8011f4:	df000404 	addi	fp,sp,16
  8011f8:	e13ffc15 	stw	r4,-16(fp)
  8011fc:	e17ffd15 	stw	r5,-12(fp)
  801200:	e1bffe15 	stw	r6,-8(fp)
  801204:	e1ffff15 	stw	r7,-4(fp)
		print_pix(x+x_centrum,y + y_centrum,rgb);
  801208:	e0fffc17 	ldw	r3,-16(fp)
  80120c:	e0bffe17 	ldw	r2,-8(fp)
  801210:	1889883a 	add	r4,r3,r2
  801214:	e0fffd17 	ldw	r3,-12(fp)
  801218:	e0bfff17 	ldw	r2,-4(fp)
  80121c:	1885883a 	add	r2,r3,r2
  801220:	e1800217 	ldw	r6,8(fp)
  801224:	100b883a 	mov	r5,r2
  801228:	0800de80 	call	800de8 <print_pix>
		print_pix(x+x_centrum,-y + y_centrum,rgb);
  80122c:	e0fffc17 	ldw	r3,-16(fp)
  801230:	e0bffe17 	ldw	r2,-8(fp)
  801234:	1889883a 	add	r4,r3,r2
  801238:	e0ffff17 	ldw	r3,-4(fp)
  80123c:	e0bffd17 	ldw	r2,-12(fp)
  801240:	1885c83a 	sub	r2,r3,r2
  801244:	e1800217 	ldw	r6,8(fp)
  801248:	100b883a 	mov	r5,r2
  80124c:	0800de80 	call	800de8 <print_pix>
		print_pix(-x+x_centrum,y + y_centrum,rgb);
  801250:	e0fffe17 	ldw	r3,-8(fp)
  801254:	e0bffc17 	ldw	r2,-16(fp)
  801258:	1889c83a 	sub	r4,r3,r2
  80125c:	e0fffd17 	ldw	r3,-12(fp)
  801260:	e0bfff17 	ldw	r2,-4(fp)
  801264:	1885883a 	add	r2,r3,r2
  801268:	e1800217 	ldw	r6,8(fp)
  80126c:	100b883a 	mov	r5,r2
  801270:	0800de80 	call	800de8 <print_pix>
		print_pix(-x+x_centrum,-y + y_centrum,rgb);
  801274:	e0fffe17 	ldw	r3,-8(fp)
  801278:	e0bffc17 	ldw	r2,-16(fp)
  80127c:	1889c83a 	sub	r4,r3,r2
  801280:	e0ffff17 	ldw	r3,-4(fp)
  801284:	e0bffd17 	ldw	r2,-12(fp)
  801288:	1885c83a 	sub	r2,r3,r2
  80128c:	e1800217 	ldw	r6,8(fp)
  801290:	100b883a 	mov	r5,r2
  801294:	0800de80 	call	800de8 <print_pix>

		print_pix(y + x_centrum,x+y_centrum,rgb);
  801298:	e0fffd17 	ldw	r3,-12(fp)
  80129c:	e0bffe17 	ldw	r2,-8(fp)
  8012a0:	1889883a 	add	r4,r3,r2
  8012a4:	e0fffc17 	ldw	r3,-16(fp)
  8012a8:	e0bfff17 	ldw	r2,-4(fp)
  8012ac:	1885883a 	add	r2,r3,r2
  8012b0:	e1800217 	ldw	r6,8(fp)
  8012b4:	100b883a 	mov	r5,r2
  8012b8:	0800de80 	call	800de8 <print_pix>
		print_pix(-y + x_centrum,x+y_centrum,rgb);
  8012bc:	e0fffe17 	ldw	r3,-8(fp)
  8012c0:	e0bffd17 	ldw	r2,-12(fp)
  8012c4:	1889c83a 	sub	r4,r3,r2
  8012c8:	e0fffc17 	ldw	r3,-16(fp)
  8012cc:	e0bfff17 	ldw	r2,-4(fp)
  8012d0:	1885883a 	add	r2,r3,r2
  8012d4:	e1800217 	ldw	r6,8(fp)
  8012d8:	100b883a 	mov	r5,r2
  8012dc:	0800de80 	call	800de8 <print_pix>
		print_pix(y + x_centrum,-x+y_centrum,rgb);
  8012e0:	e0fffd17 	ldw	r3,-12(fp)
  8012e4:	e0bffe17 	ldw	r2,-8(fp)
  8012e8:	1889883a 	add	r4,r3,r2
  8012ec:	e0ffff17 	ldw	r3,-4(fp)
  8012f0:	e0bffc17 	ldw	r2,-16(fp)
  8012f4:	1885c83a 	sub	r2,r3,r2
  8012f8:	e1800217 	ldw	r6,8(fp)
  8012fc:	100b883a 	mov	r5,r2
  801300:	0800de80 	call	800de8 <print_pix>
		print_pix(-y + x_centrum,-x+y_centrum,rgb);
  801304:	e0fffe17 	ldw	r3,-8(fp)
  801308:	e0bffd17 	ldw	r2,-12(fp)
  80130c:	1889c83a 	sub	r4,r3,r2
  801310:	e0ffff17 	ldw	r3,-4(fp)
  801314:	e0bffc17 	ldw	r2,-16(fp)
  801318:	1885c83a 	sub	r2,r3,r2
  80131c:	e1800217 	ldw	r6,8(fp)
  801320:	100b883a 	mov	r5,r2
  801324:	0800de80 	call	800de8 <print_pix>

}
  801328:	0001883a 	nop
  80132c:	e037883a 	mov	sp,fp
  801330:	dfc00117 	ldw	ra,4(sp)
  801334:	df000017 	ldw	fp,0(sp)
  801338:	dec00204 	addi	sp,sp,8
  80133c:	f800283a 	ret

00801340 <print_empty_circle>:
void print_empty_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  801340:	defff504 	addi	sp,sp,-44
  801344:	dfc00a15 	stw	ra,40(sp)
  801348:	df000915 	stw	fp,36(sp)
  80134c:	df000904 	addi	fp,sp,36
  801350:	e13ffc15 	stw	r4,-16(fp)
  801354:	e17ffd15 	stw	r5,-12(fp)
  801358:	e1bffe15 	stw	r6,-8(fp)
  80135c:	e1ffff15 	stw	r7,-4(fp)
		unsigned int value;
		unsigned int radius = radie;
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	e0bffb15 	stw	r2,-20(fp)
		int x = 0;
  801368:	e03ff815 	stw	zero,-32(fp)
		int y = radie;
  80136c:	e0bffc17 	ldw	r2,-16(fp)
  801370:	e0bff915 	stw	r2,-28(fp)

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
  801374:	e0fff817 	ldw	r3,-32(fp)
  801378:	e13ff917 	ldw	r4,-28(fp)
  80137c:	e0bfff17 	ldw	r2,-4(fp)
  801380:	d8800015 	stw	r2,0(sp)
  801384:	e1fffe17 	ldw	r7,-8(fp)
  801388:	e1bffd17 	ldw	r6,-12(fp)
  80138c:	200b883a 	mov	r5,r4
  801390:	1809883a 	mov	r4,r3
  801394:	08011e80 	call	8011e8 <print_symmetry_dots_circle>
		int h = 1- radie;
  801398:	00c00044 	movi	r3,1
  80139c:	e0bffc17 	ldw	r2,-16(fp)
  8013a0:	1885c83a 	sub	r2,r3,r2
  8013a4:	e0bffa15 	stw	r2,-24(fp)
		while(y > x){
  8013a8:	00003306 	br	801478 <print_empty_circle+0x138>
			if (h < 0){//east point
  8013ac:	e0bffa17 	ldw	r2,-24(fp)
  8013b0:	1000150e 	bge	r2,zero,801408 <print_empty_circle+0xc8>

				print_symmetry_dots_circle(x+1,y,x_centrum,y_centrum,rgb);
  8013b4:	e0bff817 	ldw	r2,-32(fp)
  8013b8:	10800044 	addi	r2,r2,1
  8013bc:	1009883a 	mov	r4,r2
  8013c0:	e0fff917 	ldw	r3,-28(fp)
  8013c4:	e0bfff17 	ldw	r2,-4(fp)
  8013c8:	d8800015 	stw	r2,0(sp)
  8013cc:	e1fffe17 	ldw	r7,-8(fp)
  8013d0:	e1bffd17 	ldw	r6,-12(fp)
  8013d4:	180b883a 	mov	r5,r3
  8013d8:	08011e80 	call	8011e8 <print_symmetry_dots_circle>
				h = h +2*x +3;
  8013dc:	e0bff817 	ldw	r2,-32(fp)
  8013e0:	1085883a 	add	r2,r2,r2
  8013e4:	1007883a 	mov	r3,r2
  8013e8:	e0bffa17 	ldw	r2,-24(fp)
  8013ec:	1885883a 	add	r2,r3,r2
  8013f0:	108000c4 	addi	r2,r2,3
  8013f4:	e0bffa15 	stw	r2,-24(fp)
				x= x+1;
  8013f8:	e0bff817 	ldw	r2,-32(fp)
  8013fc:	10800044 	addi	r2,r2,1
  801400:	e0bff815 	stw	r2,-32(fp)
  801404:	00001c06 	br	801478 <print_empty_circle+0x138>

			}
			else{
				print_symmetry_dots_circle(x+1,y-1,x_centrum,y_centrum,rgb);
  801408:	e0bff817 	ldw	r2,-32(fp)
  80140c:	10800044 	addi	r2,r2,1
  801410:	1007883a 	mov	r3,r2
  801414:	e0bff917 	ldw	r2,-28(fp)
  801418:	10bfffc4 	addi	r2,r2,-1
  80141c:	1009883a 	mov	r4,r2
  801420:	e0bfff17 	ldw	r2,-4(fp)
  801424:	d8800015 	stw	r2,0(sp)
  801428:	e1fffe17 	ldw	r7,-8(fp)
  80142c:	e1bffd17 	ldw	r6,-12(fp)
  801430:	200b883a 	mov	r5,r4
  801434:	1809883a 	mov	r4,r3
  801438:	08011e80 	call	8011e8 <print_symmetry_dots_circle>
				h= h+2*(x-y)+5;
  80143c:	e0fff817 	ldw	r3,-32(fp)
  801440:	e0bff917 	ldw	r2,-28(fp)
  801444:	1885c83a 	sub	r2,r3,r2
  801448:	1085883a 	add	r2,r2,r2
  80144c:	1007883a 	mov	r3,r2
  801450:	e0bffa17 	ldw	r2,-24(fp)
  801454:	1885883a 	add	r2,r3,r2
  801458:	10800144 	addi	r2,r2,5
  80145c:	e0bffa15 	stw	r2,-24(fp)
				y=y-1;
  801460:	e0bff917 	ldw	r2,-28(fp)
  801464:	10bfffc4 	addi	r2,r2,-1
  801468:	e0bff915 	stw	r2,-28(fp)
				x=x+1;
  80146c:	e0bff817 	ldw	r2,-32(fp)
  801470:	10800044 	addi	r2,r2,1
  801474:	e0bff815 	stw	r2,-32(fp)
		int x = 0;
		int y = radie;

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
		int h = 1- radie;
		while(y > x){
  801478:	e0bff917 	ldw	r2,-28(fp)
  80147c:	e0fff817 	ldw	r3,-32(fp)
  801480:	18bfca16 	blt	r3,r2,8013ac <__alt_data_end+0xff8013ac>
				y=y-1;
				x=x+1;
			}

		}
}
  801484:	0001883a 	nop
  801488:	e037883a 	mov	sp,fp
  80148c:	dfc00117 	ldw	ra,4(sp)
  801490:	df000017 	ldw	fp,0(sp)
  801494:	dec00204 	addi	sp,sp,8
  801498:	f800283a 	ret

0080149c <print_circle>:
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  80149c:	defff904 	addi	sp,sp,-28
  8014a0:	dfc00615 	stw	ra,24(sp)
  8014a4:	df000515 	stw	fp,20(sp)
  8014a8:	df000504 	addi	fp,sp,20
  8014ac:	e13ffc15 	stw	r4,-16(fp)
  8014b0:	e17ffd15 	stw	r5,-12(fp)
  8014b4:	e1bffe15 	stw	r6,-8(fp)
  8014b8:	e1ffff15 	stw	r7,-4(fp)
	unsigned int radius = radie;
  8014bc:	e0bffc17 	ldw	r2,-16(fp)
  8014c0:	e0bffb15 	stw	r2,-20(fp)

	for(radius = radie; radius > 0; radius--)
  8014c4:	e0bffc17 	ldw	r2,-16(fp)
  8014c8:	e0bffb15 	stw	r2,-20(fp)
  8014cc:	00000806 	br	8014f0 <print_circle+0x54>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
  8014d0:	e1ffff17 	ldw	r7,-4(fp)
  8014d4:	e1bffe17 	ldw	r6,-8(fp)
  8014d8:	e17ffd17 	ldw	r5,-12(fp)
  8014dc:	e13ffb17 	ldw	r4,-20(fp)
  8014e0:	08013400 	call	801340 <print_empty_circle>
}
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
	unsigned int radius = radie;

	for(radius = radie; radius > 0; radius--)
  8014e4:	e0bffb17 	ldw	r2,-20(fp)
  8014e8:	10bfffc4 	addi	r2,r2,-1
  8014ec:	e0bffb15 	stw	r2,-20(fp)
  8014f0:	e0bffb17 	ldw	r2,-20(fp)
  8014f4:	103ff61e 	bne	r2,zero,8014d0 <__alt_data_end+0xff8014d0>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
  8014f8:	0001883a 	nop
  8014fc:	e037883a 	mov	sp,fp
  801500:	dfc00117 	ldw	ra,4(sp)
  801504:	df000017 	ldw	fp,0(sp)
  801508:	dec00204 	addi	sp,sp,8
  80150c:	f800283a 	ret

00801510 <clear_screen>:
void clear_screen(alt_u32 rgb){
  801510:	defffb04 	addi	sp,sp,-20
  801514:	dfc00415 	stw	ra,16(sp)
  801518:	df000315 	stw	fp,12(sp)
  80151c:	df000304 	addi	fp,sp,12
  801520:	e13fff15 	stw	r4,-4(fp)
	for(int y = 0 ;y <240;y++)
  801524:	e03ffd15 	stw	zero,-12(fp)
  801528:	00001106 	br	801570 <clear_screen+0x60>
		for(int x = 0; x < 320; x++)
  80152c:	e03ffe15 	stw	zero,-8(fp)
  801530:	00000906 	br	801558 <clear_screen+0x48>
			print_pix(x,y,rgb);
  801534:	e0bffe17 	ldw	r2,-8(fp)
  801538:	e0fffd17 	ldw	r3,-12(fp)
  80153c:	e1bfff17 	ldw	r6,-4(fp)
  801540:	180b883a 	mov	r5,r3
  801544:	1009883a 	mov	r4,r2
  801548:	0800de80 	call	800de8 <print_pix>
	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
		for(int x = 0; x < 320; x++)
  80154c:	e0bffe17 	ldw	r2,-8(fp)
  801550:	10800044 	addi	r2,r2,1
  801554:	e0bffe15 	stw	r2,-8(fp)
  801558:	e0bffe17 	ldw	r2,-8(fp)
  80155c:	10805010 	cmplti	r2,r2,320
  801560:	103ff41e 	bne	r2,zero,801534 <__alt_data_end+0xff801534>

	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
  801564:	e0bffd17 	ldw	r2,-12(fp)
  801568:	10800044 	addi	r2,r2,1
  80156c:	e0bffd15 	stw	r2,-12(fp)
  801570:	e0bffd17 	ldw	r2,-12(fp)
  801574:	10803c10 	cmplti	r2,r2,240
  801578:	103fec1e 	bne	r2,zero,80152c <__alt_data_end+0xff80152c>
		for(int x = 0; x < 320; x++)
			print_pix(x,y,rgb);
}
  80157c:	0001883a 	nop
  801580:	e037883a 	mov	sp,fp
  801584:	dfc00117 	ldw	ra,4(sp)
  801588:	df000017 	ldw	fp,0(sp)
  80158c:	dec00204 	addi	sp,sp,8
  801590:	f800283a 	ret

00801594 <read_pixel_ram_int>:

pixel_data read_pixel_ram_int(alt_u32 x_start, alt_u32 y_start)
{
  801594:	defffb04 	addi	sp,sp,-20
  801598:	dfc00415 	stw	ra,16(sp)
  80159c:	df000315 	stw	fp,12(sp)
  8015a0:	df000304 	addi	fp,sp,12
  8015a4:	e13ffe15 	stw	r4,-8(fp)
  8015a8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 i = read_pixel(x_start, y_start);
  8015ac:	01405004 	movi	r5,320
  8015b0:	e13fff17 	ldw	r4,-4(fp)
  8015b4:	080221c0 	call	80221c <__mulsi3>
  8015b8:	1007883a 	mov	r3,r2
  8015bc:	e0bffe17 	ldw	r2,-8(fp)
  8015c0:	1885883a 	add	r2,r3,r2
  8015c4:	1085883a 	add	r2,r2,r2
  8015c8:	1085883a 	add	r2,r2,r2
  8015cc:	1007883a 	mov	r3,r2
  8015d0:	00804034 	movhi	r2,256
  8015d4:	1885883a 	add	r2,r3,r2
  8015d8:	10800037 	ldwio	r2,0(r2)
  8015dc:	e0bffd15 	stw	r2,-12(fp)
	return (alt_u8) i;
  8015e0:	e0bffd17 	ldw	r2,-12(fp)
}
  8015e4:	e037883a 	mov	sp,fp
  8015e8:	dfc00117 	ldw	ra,4(sp)
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00204 	addi	sp,sp,8
  8015f4:	f800283a 	ret

008015f8 <print_welcome_screen>:



void print_welcome_screen(){
  8015f8:	defffd04 	addi	sp,sp,-12
  8015fc:	dfc00215 	stw	ra,8(sp)
  801600:	df000115 	stw	fp,4(sp)
  801604:	df000104 	addi	fp,sp,4
	clear_screen(0);
  801608:	0009883a 	mov	r4,zero
  80160c:	08015100 	call	801510 <clear_screen>

	print_circle(10,  320/2, 240/2, 3);
  801610:	01c000c4 	movi	r7,3
  801614:	01801e04 	movi	r6,120
  801618:	01402804 	movi	r5,160
  80161c:	01000284 	movi	r4,10
  801620:	080149c0 	call	80149c <print_circle>
	print_str(50,50,2,"Welcome to measurement station!");
  801624:	01c02034 	movhi	r7,128
  801628:	39cce004 	addi	r7,r7,13184
  80162c:	01800084 	movi	r6,2
  801630:	01400c84 	movi	r5,50
  801634:	01000c84 	movi	r4,50
  801638:	08011400 	call	801140 <print_str>
	print_str(50,150,2,"Press any key to continue");
  80163c:	01c02034 	movhi	r7,128
  801640:	39cce804 	addi	r7,r7,13216
  801644:	01800084 	movi	r6,2
  801648:	01402584 	movi	r5,150
  80164c:	01000c84 	movi	r4,50
  801650:	08011400 	call	801140 <print_str>
	alt_u32 key = 0;
  801654:	e03fff15 	stw	zero,-4(fp)
	key = IORD_32DIRECT(KEY_INPUT_BASE,0);
  801658:	00804234 	movhi	r2,264
  80165c:	10848804 	addi	r2,r2,4640
  801660:	10800037 	ldwio	r2,0(r2)
  801664:	e0bfff15 	stw	r2,-4(fp)
	while(key == 7)
  801668:	00000406 	br	80167c <print_welcome_screen+0x84>
		key = IORD_32DIRECT(KEY_INPUT_BASE,0);
  80166c:	00804234 	movhi	r2,264
  801670:	10848804 	addi	r2,r2,4640
  801674:	10800037 	ldwio	r2,0(r2)
  801678:	e0bfff15 	stw	r2,-4(fp)
	print_circle(10,  320/2, 240/2, 3);
	print_str(50,50,2,"Welcome to measurement station!");
	print_str(50,150,2,"Press any key to continue");
	alt_u32 key = 0;
	key = IORD_32DIRECT(KEY_INPUT_BASE,0);
	while(key == 7)
  80167c:	e0bfff17 	ldw	r2,-4(fp)
  801680:	108001e0 	cmpeqi	r2,r2,7
  801684:	103ff91e 	bne	r2,zero,80166c <__alt_data_end+0xff80166c>
		key = IORD_32DIRECT(KEY_INPUT_BASE,0);


}
  801688:	0001883a 	nop
  80168c:	e037883a 	mov	sp,fp
  801690:	dfc00117 	ldw	ra,4(sp)
  801694:	df000017 	ldw	fp,0(sp)
  801698:	dec00204 	addi	sp,sp,8
  80169c:	f800283a 	ret

008016a0 <queue_init>:

/***************************************************/

void queue_init(QUEUE *q)
{
  8016a0:	defffd04 	addi	sp,sp,-12
  8016a4:	dfc00215 	stw	ra,8(sp)
  8016a8:	df000115 	stw	fp,4(sp)
  8016ac:	df000104 	addi	fp,sp,4
  8016b0:	e13fff15 	stw	r4,-4(fp)
    memset(q,0,sizeof(QUEUE));
  8016b4:	01800d04 	movi	r6,52
  8016b8:	000b883a 	mov	r5,zero
  8016bc:	e13fff17 	ldw	r4,-4(fp)
  8016c0:	080226c0 	call	80226c <memset>
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
  8016c4:	e0bfff17 	ldw	r2,-4(fp)
  8016c8:	10000a15 	stw	zero,40(r2)
    q->windex = 0;
  8016cc:	e0bfff17 	ldw	r2,-4(fp)
  8016d0:	10000b15 	stw	zero,44(r2)
    q->numitems = 0;
  8016d4:	e0bfff17 	ldw	r2,-4(fp)
  8016d8:	10000c15 	stw	zero,48(r2)
}
  8016dc:	0001883a 	nop
  8016e0:	e037883a 	mov	sp,fp
  8016e4:	dfc00117 	ldw	ra,4(sp)
  8016e8:	df000017 	ldw	fp,0(sp)
  8016ec:	dec00204 	addi	sp,sp,8
  8016f0:	f800283a 	ret

008016f4 <queue_enqueue>:

int queue_enqueue(QUEUE *q,int item)
{
  8016f4:	defff104 	addi	sp,sp,-60
  8016f8:	df000e15 	stw	fp,56(sp)
  8016fc:	df000e04 	addi	fp,sp,56
  801700:	e13ffe15 	stw	r4,-8(fp)
  801704:	e17fff15 	stw	r5,-4(fp)
    int num_items = q->numitems;
  801708:	e0bffe17 	ldw	r2,-8(fp)
  80170c:	10800c17 	ldw	r2,48(r2)
  801710:	e0bff315 	stw	r2,-52(fp)
    //int* temp_array;
    int temp_array[QUEUESIZE];
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
  801714:	e0bff317 	ldw	r2,-52(fp)
  801718:	10800288 	cmpgei	r2,r2,10
  80171c:	10003c1e 	bne	r2,zero,801810 <queue_enqueue+0x11c>
    {
        //temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
  801720:	e03ff215 	stw	zero,-56(fp)
  801724:	00001006 	br	801768 <queue_enqueue+0x74>
            temp_array[i]= q->items[i];       //Copy the queue to temp array
  801728:	e0fffe17 	ldw	r3,-8(fp)
  80172c:	e0bff217 	ldw	r2,-56(fp)
  801730:	1085883a 	add	r2,r2,r2
  801734:	1085883a 	add	r2,r2,r2
  801738:	1885883a 	add	r2,r3,r2
  80173c:	10c00017 	ldw	r3,0(r2)
  801740:	e0bff217 	ldw	r2,-56(fp)
  801744:	1085883a 	add	r2,r2,r2
  801748:	1085883a 	add	r2,r2,r2
  80174c:	e13ff204 	addi	r4,fp,-56
  801750:	2085883a 	add	r2,r4,r2
  801754:	10800204 	addi	r2,r2,8
  801758:	10c00015 	stw	r3,0(r2)
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        //temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
  80175c:	e0bff217 	ldw	r2,-56(fp)
  801760:	10800044 	addi	r2,r2,1
  801764:	e0bff215 	stw	r2,-56(fp)
  801768:	e0fff217 	ldw	r3,-56(fp)
  80176c:	e0bff317 	ldw	r2,-52(fp)
  801770:	18bfed16 	blt	r3,r2,801728 <__alt_data_end+0xff801728>
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0
  801774:	e0bffe17 	ldw	r2,-8(fp)
  801778:	e0ffff17 	ldw	r3,-4(fp)
  80177c:	10c00015 	stw	r3,0(r2)

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  801780:	00800044 	movi	r2,1
  801784:	e0bff215 	stw	r2,-56(fp)
  801788:	00001106 	br	8017d0 <queue_enqueue+0xdc>
            q->items[i] = temp_array[i-1];
  80178c:	e0bff217 	ldw	r2,-56(fp)
  801790:	10bfffc4 	addi	r2,r2,-1
  801794:	1085883a 	add	r2,r2,r2
  801798:	1085883a 	add	r2,r2,r2
  80179c:	e0fff204 	addi	r3,fp,-56
  8017a0:	1885883a 	add	r2,r3,r2
  8017a4:	10800204 	addi	r2,r2,8
  8017a8:	10c00017 	ldw	r3,0(r2)
  8017ac:	e13ffe17 	ldw	r4,-8(fp)
  8017b0:	e0bff217 	ldw	r2,-56(fp)
  8017b4:	1085883a 	add	r2,r2,r2
  8017b8:	1085883a 	add	r2,r2,r2
  8017bc:	2085883a 	add	r2,r4,r2
  8017c0:	10c00015 	stw	r3,0(r2)
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  8017c4:	e0bff217 	ldw	r2,-56(fp)
  8017c8:	10800044 	addi	r2,r2,1
  8017cc:	e0bff215 	stw	r2,-56(fp)
  8017d0:	e0bff317 	ldw	r2,-52(fp)
  8017d4:	10800044 	addi	r2,r2,1
  8017d8:	e0fff217 	ldw	r3,-56(fp)
  8017dc:	18bfeb16 	blt	r3,r2,80178c <__alt_data_end+0xff80178c>
            q->items[i] = temp_array[i-1];
        //free(temp_array);                             //Dispose the temp array
        q->numitems++;                          //increment the number of items
  8017e0:	e0bffe17 	ldw	r2,-8(fp)
  8017e4:	10800c17 	ldw	r2,48(r2)
  8017e8:	10c00044 	addi	r3,r2,1
  8017ec:	e0bffe17 	ldw	r2,-8(fp)
  8017f0:	10c00c15 	stw	r3,48(r2)
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
  8017f4:	e0bffe17 	ldw	r2,-8(fp)
  8017f8:	10800a17 	ldw	r2,40(r2)
  8017fc:	10c00044 	addi	r3,r2,1
  801800:	e0bffe17 	ldw	r2,-8(fp)
  801804:	10c00a15 	stw	r3,40(r2)
        return 1;                               //The enqueue succeeded
  801808:	00800044 	movi	r2,1
  80180c:	00000106 	br	801814 <queue_enqueue+0x120>
    }
    else return 0;          //The queue is filled, cannot insert more
  801810:	0005883a 	mov	r2,zero

}
  801814:	e037883a 	mov	sp,fp
  801818:	df000017 	ldw	fp,0(sp)
  80181c:	dec00104 	addi	sp,sp,4
  801820:	f800283a 	ret

00801824 <queue_dequeue>:

int queue_dequeue(QUEUE *q)
{
  801824:	defffd04 	addi	sp,sp,-12
  801828:	df000215 	stw	fp,8(sp)
  80182c:	df000204 	addi	fp,sp,8
  801830:	e13fff15 	stw	r4,-4(fp)
    int num_items = q->numitems;
  801834:	e0bfff17 	ldw	r2,-4(fp)
  801838:	10800c17 	ldw	r2,48(r2)
  80183c:	e0bffe15 	stw	r2,-8(fp)

    if (! num_items == 0)// The queue contains items
  801840:	e0bffe17 	ldw	r2,-8(fp)
  801844:	10000c26 	beq	r2,zero,801878 <queue_dequeue+0x54>
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
  801848:	e0bfff17 	ldw	r2,-4(fp)
  80184c:	10800a17 	ldw	r2,40(r2)
  801850:	10ffffc4 	addi	r3,r2,-1
  801854:	e0bfff17 	ldw	r2,-4(fp)
  801858:	10c00a15 	stw	r3,40(r2)
         q->numitems--;                 //Decrement the number of items in the queue
  80185c:	e0bfff17 	ldw	r2,-4(fp)
  801860:	10800c17 	ldw	r2,48(r2)
  801864:	10ffffc4 	addi	r3,r2,-1
  801868:	e0bfff17 	ldw	r2,-4(fp)
  80186c:	10c00c15 	stw	r3,48(r2)
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
  801870:	00800044 	movi	r2,1
  801874:	00000106 	br	80187c <queue_dequeue+0x58>
    }
    else return 0;          //The queue is empty, nothing can be dequeued
  801878:	0005883a 	mov	r2,zero


}
  80187c:	e037883a 	mov	sp,fp
  801880:	df000017 	ldw	fp,0(sp)
  801884:	dec00104 	addi	sp,sp,4
  801888:	f800283a 	ret

0080188c <queue_print>:


void queue_print(QUEUE *q)
{
  80188c:	defffc04 	addi	sp,sp,-16
  801890:	dfc00315 	stw	ra,12(sp)
  801894:	df000215 	stw	fp,8(sp)
  801898:	df000204 	addi	fp,sp,8
  80189c:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
  8018a0:	e03ffe15 	stw	zero,-8(fp)
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  8018a4:	e0bfff17 	ldw	r2,-4(fp)
  8018a8:	10800c17 	ldw	r2,48(r2)
  8018ac:	10bfffc4 	addi	r2,r2,-1
  8018b0:	e0bffe15 	stw	r2,-8(fp)
  8018b4:	00000d06 	br	8018ec <queue_print+0x60>
        alt_printf("%d", q->items[i] );
  8018b8:	e0ffff17 	ldw	r3,-4(fp)
  8018bc:	e0bffe17 	ldw	r2,-8(fp)
  8018c0:	1085883a 	add	r2,r2,r2
  8018c4:	1085883a 	add	r2,r2,r2
  8018c8:	1885883a 	add	r2,r3,r2
  8018cc:	10800017 	ldw	r2,0(r2)
  8018d0:	100b883a 	mov	r5,r2
  8018d4:	01002034 	movhi	r4,128
  8018d8:	210cef04 	addi	r4,r4,13244
  8018dc:	08025840 	call	802584 <alt_printf>


void queue_print(QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  8018e0:	e0bffe17 	ldw	r2,-8(fp)
  8018e4:	10bfffc4 	addi	r2,r2,-1
  8018e8:	e0bffe15 	stw	r2,-8(fp)
  8018ec:	e0bffe17 	ldw	r2,-8(fp)
  8018f0:	103ff10e 	bge	r2,zero,8018b8 <__alt_data_end+0xff8018b8>
        alt_printf("%d", q->items[i] );
    }
    alt_printf("\n");
  8018f4:	01002034 	movhi	r4,128
  8018f8:	210cf004 	addi	r4,r4,13248
  8018fc:	08025840 	call	802584 <alt_printf>
}
  801900:	0001883a 	nop
  801904:	e037883a 	mov	sp,fp
  801908:	dfc00117 	ldw	ra,4(sp)
  80190c:	df000017 	ldw	fp,0(sp)
  801910:	dec00204 	addi	sp,sp,8
  801914:	f800283a 	ret

00801918 <queue_print_screen>:
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb, SENSOR_OBJECT *sensor_obj){
  801918:	defff104 	addi	sp,sp,-60
  80191c:	dfc00e15 	stw	ra,56(sp)
  801920:	df000d15 	stw	fp,52(sp)
  801924:	df000d04 	addi	fp,sp,52
  801928:	e13ffc15 	stw	r4,-16(fp)
  80192c:	e17ffd15 	stw	r5,-12(fp)
  801930:	e1bffe15 	stw	r6,-8(fp)
  801934:	e1ffff15 	stw	r7,-4(fp)
	 int i = 0;
  801938:	e03ff415 	stw	zero,-48(fp)
	 int j;
	 int mean = 0;
  80193c:	e03ff515 	stw	zero,-44(fp)
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801940:	e0bffc17 	ldw	r2,-16(fp)
  801944:	10800c17 	ldw	r2,48(r2)
  801948:	10bfffc4 	addi	r2,r2,-1
  80194c:	e0bff415 	stw	r2,-48(fp)
  801950:	0000db06 	br	801cc0 <queue_print_screen+0x3a8>
#ifdef DEBUG
	        alt_printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
#endif
	        j = q->numitems-1 -i;
  801954:	e0bffc17 	ldw	r2,-16(fp)
  801958:	10800c17 	ldw	r2,48(r2)
  80195c:	10ffffc4 	addi	r3,r2,-1
  801960:	e0bff417 	ldw	r2,-48(fp)
  801964:	1885c83a 	sub	r2,r3,r2
  801968:	e0bff815 	stw	r2,-32(fp)
	        mean = mean + q->items[i];
  80196c:	e0fffc17 	ldw	r3,-16(fp)
  801970:	e0bff417 	ldw	r2,-48(fp)
  801974:	1085883a 	add	r2,r2,r2
  801978:	1085883a 	add	r2,r2,r2
  80197c:	1885883a 	add	r2,r3,r2
  801980:	10800017 	ldw	r2,0(r2)
  801984:	e0fff517 	ldw	r3,-44(fp)
  801988:	1885883a 	add	r2,r3,r2
  80198c:	e0bff515 	stw	r2,-44(fp)
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
  801990:	00800044 	movi	r2,1
  801994:	e0bff715 	stw	r2,-36(fp)
  801998:	00000d06 	br	8019d0 <queue_print_screen+0xb8>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
  80199c:	e0fffd17 	ldw	r3,-12(fp)
  8019a0:	e0bff817 	ldw	r2,-32(fp)
  8019a4:	1885883a 	add	r2,r3,r2
  8019a8:	1009883a 	mov	r4,r2
  8019ac:	e0fffe17 	ldw	r3,-8(fp)
  8019b0:	e0bff717 	ldw	r2,-36(fp)
  8019b4:	1885c83a 	sub	r2,r3,r2
  8019b8:	000d883a 	mov	r6,zero
  8019bc:	100b883a 	mov	r5,r2
  8019c0:	0800de80 	call	800de8 <print_pix>
	        mean = mean + q->items[i];
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
  8019c4:	e0bff717 	ldw	r2,-36(fp)
  8019c8:	10800044 	addi	r2,r2,1
  8019cc:	e0bff715 	stw	r2,-36(fp)
  8019d0:	e0bff717 	ldw	r2,-36(fp)
  8019d4:	10800dd0 	cmplti	r2,r2,55
  8019d8:	103ff01e 	bne	r2,zero,80199c <__alt_data_end+0xff80199c>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
  8019dc:	e0fffd17 	ldw	r3,-12(fp)
  8019e0:	e0bff817 	ldw	r2,-32(fp)
  8019e4:	1885883a 	add	r2,r3,r2
  8019e8:	1007883a 	mov	r3,r2
  8019ec:	e0bffe17 	ldw	r2,-8(fp)
  8019f0:	018001c4 	movi	r6,7
  8019f4:	100b883a 	mov	r5,r2
  8019f8:	1809883a 	mov	r4,r3
  8019fc:	0800de80 	call	800de8 <print_pix>
	        sensor_obj->draw_graph(sensor_obj);
  801a00:	e0800417 	ldw	r2,16(fp)
  801a04:	10802d17 	ldw	r2,180(r2)
  801a08:	e1000417 	ldw	r4,16(fp)
  801a0c:	103ee83a 	callr	r2
	        value = offset + q->items[i]/normalization;
  801a10:	e0fffc17 	ldw	r3,-16(fp)
  801a14:	e0bff417 	ldw	r2,-48(fp)
  801a18:	1085883a 	add	r2,r2,r2
  801a1c:	1085883a 	add	r2,r2,r2
  801a20:	1885883a 	add	r2,r3,r2
  801a24:	10800017 	ldw	r2,0(r2)
  801a28:	e17fff17 	ldw	r5,-4(fp)
  801a2c:	1009883a 	mov	r4,r2
  801a30:	08020680 	call	802068 <__divsi3>
  801a34:	1007883a 	mov	r3,r2
  801a38:	e0800217 	ldw	r2,8(fp)
  801a3c:	1885883a 	add	r2,r3,r2
  801a40:	e0bff615 	stw	r2,-40(fp)
	        if(offset + q->items[i]/normalization > 40)
  801a44:	e0fffc17 	ldw	r3,-16(fp)
  801a48:	e0bff417 	ldw	r2,-48(fp)
  801a4c:	1085883a 	add	r2,r2,r2
  801a50:	1085883a 	add	r2,r2,r2
  801a54:	1885883a 	add	r2,r3,r2
  801a58:	10800017 	ldw	r2,0(r2)
  801a5c:	e17fff17 	ldw	r5,-4(fp)
  801a60:	1009883a 	mov	r4,r2
  801a64:	08020680 	call	802068 <__divsi3>
  801a68:	1007883a 	mov	r3,r2
  801a6c:	e0800217 	ldw	r2,8(fp)
  801a70:	1885883a 	add	r2,r3,r2
  801a74:	10800a50 	cmplti	r2,r2,41
  801a78:	1000021e 	bne	r2,zero,801a84 <queue_print_screen+0x16c>
	        	value = 40;
  801a7c:	00800a04 	movi	r2,40
  801a80:	e0bff615 	stw	r2,-40(fp)
	        if (offset + q->items[i]/normalization < 0)
  801a84:	e0fffc17 	ldw	r3,-16(fp)
  801a88:	e0bff417 	ldw	r2,-48(fp)
  801a8c:	1085883a 	add	r2,r2,r2
  801a90:	1085883a 	add	r2,r2,r2
  801a94:	1885883a 	add	r2,r3,r2
  801a98:	10800017 	ldw	r2,0(r2)
  801a9c:	e17fff17 	ldw	r5,-4(fp)
  801aa0:	1009883a 	mov	r4,r2
  801aa4:	08020680 	call	802068 <__divsi3>
  801aa8:	1007883a 	mov	r3,r2
  801aac:	e0800217 	ldw	r2,8(fp)
  801ab0:	1885883a 	add	r2,r3,r2
  801ab4:	1000010e 	bge	r2,zero,801abc <queue_print_screen+0x1a4>
	          value = 0;
  801ab8:	e03ff615 	stw	zero,-40(fp)

	        print_pix(x_origo + j,y_origo-value,rgb);
  801abc:	e0fffd17 	ldw	r3,-12(fp)
  801ac0:	e0bff817 	ldw	r2,-32(fp)
  801ac4:	1885883a 	add	r2,r3,r2
  801ac8:	1009883a 	mov	r4,r2
  801acc:	e0fffe17 	ldw	r3,-8(fp)
  801ad0:	e0bff617 	ldw	r2,-40(fp)
  801ad4:	1885c83a 	sub	r2,r3,r2
  801ad8:	1007883a 	mov	r3,r2
  801adc:	e0800317 	ldw	r2,12(fp)
  801ae0:	100d883a 	mov	r6,r2
  801ae4:	180b883a 	mov	r5,r3
  801ae8:	0800de80 	call	800de8 <print_pix>
	        int  bcd = i2bcd(abs(q->items[0]));
  801aec:	e0bffc17 	ldw	r2,-16(fp)
  801af0:	10800017 	ldw	r2,0(r2)
  801af4:	1000010e 	bge	r2,zero,801afc <queue_print_screen+0x1e4>
  801af8:	0085c83a 	sub	r2,zero,r2
  801afc:	1009883a 	mov	r4,r2
  801b00:	0801d200 	call	801d20 <i2bcd>
  801b04:	e0bff915 	stw	r2,-28(fp)
	        if(q->items[0] & 0x80000000)//negative
  801b08:	e0bffc17 	ldw	r2,-16(fp)
  801b0c:	10800017 	ldw	r2,0(r2)
  801b10:	10000d0e 	bge	r2,zero,801b48 <queue_print_screen+0x230>
	        	print_char(x_origo +24, y_origo+30,4,0,'-');
  801b14:	e0bffd17 	ldw	r2,-12(fp)
  801b18:	10800604 	addi	r2,r2,24
  801b1c:	1007883a 	mov	r3,r2
  801b20:	e0bffe17 	ldw	r2,-8(fp)
  801b24:	10800784 	addi	r2,r2,30
  801b28:	1009883a 	mov	r4,r2
  801b2c:	00800b44 	movi	r2,45
  801b30:	d8800015 	stw	r2,0(sp)
  801b34:	000f883a 	mov	r7,zero
  801b38:	01800104 	movi	r6,4
  801b3c:	200b883a 	mov	r5,r4
  801b40:	1809883a 	mov	r4,r3
  801b44:	08010340 	call	801034 <print_char>

	        	char c = (char)((bcd & 0xF000) >>12);
  801b48:	e0bff917 	ldw	r2,-28(fp)
  801b4c:	10bc000c 	andi	r2,r2,61440
  801b50:	1005d33a 	srai	r2,r2,12
  801b54:	e0bffa05 	stb	r2,-24(fp)
	        	short s = (short) c +48;
  801b58:	e0bffa07 	ldb	r2,-24(fp)
  801b5c:	10800c04 	addi	r2,r2,48
  801b60:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +30, y_origo+30,4,0,(char)s);
  801b64:	e0bffd17 	ldw	r2,-12(fp)
  801b68:	10800784 	addi	r2,r2,30
  801b6c:	1007883a 	mov	r3,r2
  801b70:	e0bffe17 	ldw	r2,-8(fp)
  801b74:	10800784 	addi	r2,r2,30
  801b78:	1009883a 	mov	r4,r2
  801b7c:	e0bffa8b 	ldhu	r2,-22(fp)
  801b80:	10803fcc 	andi	r2,r2,255
  801b84:	1080201c 	xori	r2,r2,128
  801b88:	10bfe004 	addi	r2,r2,-128
  801b8c:	d8800015 	stw	r2,0(sp)
  801b90:	000f883a 	mov	r7,zero
  801b94:	01800104 	movi	r6,4
  801b98:	200b883a 	mov	r5,r4
  801b9c:	1809883a 	mov	r4,r3
  801ba0:	08010340 	call	801034 <print_char>

	        	c = (char)((bcd & 0x0F00) >>8);
  801ba4:	e0bff917 	ldw	r2,-28(fp)
  801ba8:	1083c00c 	andi	r2,r2,3840
  801bac:	1005d23a 	srai	r2,r2,8
  801bb0:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801bb4:	e0bffa07 	ldb	r2,-24(fp)
  801bb8:	10800c04 	addi	r2,r2,48
  801bbc:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +38, y_origo+30,4,0,(char)s);
  801bc0:	e0bffd17 	ldw	r2,-12(fp)
  801bc4:	10800984 	addi	r2,r2,38
  801bc8:	1007883a 	mov	r3,r2
  801bcc:	e0bffe17 	ldw	r2,-8(fp)
  801bd0:	10800784 	addi	r2,r2,30
  801bd4:	1009883a 	mov	r4,r2
  801bd8:	e0bffa8b 	ldhu	r2,-22(fp)
  801bdc:	10803fcc 	andi	r2,r2,255
  801be0:	1080201c 	xori	r2,r2,128
  801be4:	10bfe004 	addi	r2,r2,-128
  801be8:	d8800015 	stw	r2,0(sp)
  801bec:	000f883a 	mov	r7,zero
  801bf0:	01800104 	movi	r6,4
  801bf4:	200b883a 	mov	r5,r4
  801bf8:	1809883a 	mov	r4,r3
  801bfc:	08010340 	call	801034 <print_char>

	        	c = (char)((bcd & 0x0F0) >>4);
  801c00:	e0bff917 	ldw	r2,-28(fp)
  801c04:	10803c0c 	andi	r2,r2,240
  801c08:	1005d13a 	srai	r2,r2,4
  801c0c:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801c10:	e0bffa07 	ldb	r2,-24(fp)
  801c14:	10800c04 	addi	r2,r2,48
  801c18:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +46, y_origo+30,4,0,(char)s);
  801c1c:	e0bffd17 	ldw	r2,-12(fp)
  801c20:	10800b84 	addi	r2,r2,46
  801c24:	1007883a 	mov	r3,r2
  801c28:	e0bffe17 	ldw	r2,-8(fp)
  801c2c:	10800784 	addi	r2,r2,30
  801c30:	1009883a 	mov	r4,r2
  801c34:	e0bffa8b 	ldhu	r2,-22(fp)
  801c38:	10803fcc 	andi	r2,r2,255
  801c3c:	1080201c 	xori	r2,r2,128
  801c40:	10bfe004 	addi	r2,r2,-128
  801c44:	d8800015 	stw	r2,0(sp)
  801c48:	000f883a 	mov	r7,zero
  801c4c:	01800104 	movi	r6,4
  801c50:	200b883a 	mov	r5,r4
  801c54:	1809883a 	mov	r4,r3
  801c58:	08010340 	call	801034 <print_char>

	        	c = (char)(bcd & 0x0F);
  801c5c:	e0bff917 	ldw	r2,-28(fp)
  801c60:	108003cc 	andi	r2,r2,15
  801c64:	e0bffa05 	stb	r2,-24(fp)
	        	s = (short) c +48;
  801c68:	e0bffa07 	ldb	r2,-24(fp)
  801c6c:	10800c04 	addi	r2,r2,48
  801c70:	e0bffa8d 	sth	r2,-22(fp)
	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);
  801c74:	e0bffd17 	ldw	r2,-12(fp)
  801c78:	10800d84 	addi	r2,r2,54
  801c7c:	1007883a 	mov	r3,r2
  801c80:	e0bffe17 	ldw	r2,-8(fp)
  801c84:	10800784 	addi	r2,r2,30
  801c88:	1009883a 	mov	r4,r2
  801c8c:	e0bffa8b 	ldhu	r2,-22(fp)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1080201c 	xori	r2,r2,128
  801c98:	10bfe004 	addi	r2,r2,-128
  801c9c:	d8800015 	stw	r2,0(sp)
  801ca0:	000f883a 	mov	r7,zero
  801ca4:	01800104 	movi	r6,4
  801ca8:	200b883a 	mov	r5,r4
  801cac:	1809883a 	mov	r4,r3
  801cb0:	08010340 	call	801034 <print_char>
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb, SENSOR_OBJECT *sensor_obj){
	 int i = 0;
	 int j;
	 int mean = 0;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801cb4:	e0bff417 	ldw	r2,-48(fp)
  801cb8:	10bfffc4 	addi	r2,r2,-1
  801cbc:	e0bff415 	stw	r2,-48(fp)
  801cc0:	e0bff417 	ldw	r2,-48(fp)
  801cc4:	103f230e 	bge	r2,zero,801954 <__alt_data_end+0xff801954>
	        	s = (short) c +48;
	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);


	    }
	    mean = mean/q->numitems;
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	10800c17 	ldw	r2,48(r2)
  801cd0:	100b883a 	mov	r5,r2
  801cd4:	e13ff517 	ldw	r4,-44(fp)
  801cd8:	08020680 	call	802068 <__divsi3>
  801cdc:	e0bff515 	stw	r2,-44(fp)
	    int offs = 25 - mean/normalization;
  801ce0:	e17fff17 	ldw	r5,-4(fp)
  801ce4:	e13ff517 	ldw	r4,-44(fp)
  801ce8:	08020680 	call	802068 <__divsi3>
  801cec:	1007883a 	mov	r3,r2
  801cf0:	00800644 	movi	r2,25
  801cf4:	10c5c83a 	sub	r2,r2,r3
  801cf8:	e0bffb15 	stw	r2,-20(fp)
	    sensor_obj->offset = offs;
  801cfc:	e0fffb17 	ldw	r3,-20(fp)
  801d00:	e0800417 	ldw	r2,16(fp)
  801d04:	10c01815 	stw	r3,96(r2)
}
  801d08:	0001883a 	nop
  801d0c:	e037883a 	mov	sp,fp
  801d10:	dfc00117 	ldw	ra,4(sp)
  801d14:	df000017 	ldw	fp,0(sp)
  801d18:	dec00204 	addi	sp,sp,8
  801d1c:	f800283a 	ret

00801d20 <i2bcd>:

unsigned int i2bcd(unsigned int i) {
  801d20:	defffa04 	addi	sp,sp,-24
  801d24:	dfc00515 	stw	ra,20(sp)
  801d28:	df000415 	stw	fp,16(sp)
  801d2c:	df000404 	addi	fp,sp,16
  801d30:	e13fff15 	stw	r4,-4(fp)
    unsigned int binaryShift = 1;
  801d34:	00800044 	movi	r2,1
  801d38:	e0bffc15 	stw	r2,-16(fp)
    unsigned int digit,n,mask;
    unsigned int bcd = 0;
  801d3c:	e03ffd15 	stw	zero,-12(fp)
    alt_printf("%d\n",i);
  801d40:	e17fff17 	ldw	r5,-4(fp)
  801d44:	01002034 	movhi	r4,128
  801d48:	210cf104 	addi	r4,r4,13252
  801d4c:	08025840 	call	802584 <alt_printf>
    while (i > 0) {
  801d50:	00001306 	br	801da0 <i2bcd+0x80>
        digit = i % 10;
  801d54:	e0bfff17 	ldw	r2,-4(fp)
  801d58:	01400284 	movi	r5,10
  801d5c:	1009883a 	mov	r4,r2
  801d60:	08021c40 	call	8021c4 <__umodsi3>
  801d64:	e0bffe15 	stw	r2,-8(fp)
        bcd += (digit << binaryShift);
  801d68:	e0fffe17 	ldw	r3,-8(fp)
  801d6c:	e0bffc17 	ldw	r2,-16(fp)
  801d70:	1884983a 	sll	r2,r3,r2
  801d74:	e0fffd17 	ldw	r3,-12(fp)
  801d78:	1885883a 	add	r2,r3,r2
  801d7c:	e0bffd15 	stw	r2,-12(fp)
        binaryShift += 4;
  801d80:	e0bffc17 	ldw	r2,-16(fp)
  801d84:	10800104 	addi	r2,r2,4
  801d88:	e0bffc15 	stw	r2,-16(fp)
        i /= 10;
  801d8c:	e0bfff17 	ldw	r2,-4(fp)
  801d90:	01400284 	movi	r5,10
  801d94:	1009883a 	mov	r4,r2
  801d98:	08021600 	call	802160 <__udivsi3>
  801d9c:	e0bfff15 	stw	r2,-4(fp)
unsigned int i2bcd(unsigned int i) {
    unsigned int binaryShift = 1;
    unsigned int digit,n,mask;
    unsigned int bcd = 0;
    alt_printf("%d\n",i);
    while (i > 0) {
  801da0:	e0bfff17 	ldw	r2,-4(fp)
  801da4:	103feb1e 	bne	r2,zero,801d54 <__alt_data_end+0xff801d54>
        digit = i % 10;
        bcd += (digit << binaryShift);
        binaryShift += 4;
        i /= 10;
    }
    bcd = bcd >> 1;
  801da8:	e0bffd17 	ldw	r2,-12(fp)
  801dac:	1004d07a 	srli	r2,r2,1
  801db0:	e0bffd15 	stw	r2,-12(fp)
                putchar(' ');
            putchar((bcd & mask)? '1':'0');
            n++;
        }
#endif
    putchar('\n');
  801db4:	00802034 	movhi	r2,128
  801db8:	108ec204 	addi	r2,r2,15112
  801dbc:	10800017 	ldw	r2,0(r2)
  801dc0:	10800217 	ldw	r2,8(r2)
  801dc4:	100b883a 	mov	r5,r2
  801dc8:	01000284 	movi	r4,10
  801dcc:	080228c0 	call	80228c <putc>
    return bcd;
  801dd0:	e0bffd17 	ldw	r2,-12(fp)
}
  801dd4:	e037883a 	mov	sp,fp
  801dd8:	dfc00117 	ldw	ra,4(sp)
  801ddc:	df000017 	ldw	fp,0(sp)
  801de0:	dec00204 	addi	sp,sp,8
  801de4:	f800283a 	ret

00801de8 <update_time>:

void update_time(unsigned int i){
  801de8:	defff704 	addi	sp,sp,-36
  801dec:	dfc00815 	stw	ra,32(sp)
  801df0:	df000715 	stw	fp,28(sp)
  801df4:	df000704 	addi	fp,sp,28
  801df8:	e13fff15 	stw	r4,-4(fp)

	static int hours = 0;
	static int minutes = 0;
	static int seconds = 0;
	unsigned int bcd = 0;
  801dfc:	e03ffa15 	stw	zero,-24(fp)
	unsigned int time[3]={hours, minutes,seconds};
  801e00:	d0a1d817 	ldw	r2,-30880(gp)
  801e04:	e0bffc15 	stw	r2,-16(fp)
  801e08:	d0a1d917 	ldw	r2,-30876(gp)
  801e0c:	e0bffd15 	stw	r2,-12(fp)
  801e10:	d0a1da17 	ldw	r2,-30872(gp)
  801e14:	e0bffe15 	stw	r2,-8(fp)

	seconds++;
  801e18:	d0a1da17 	ldw	r2,-30872(gp)
  801e1c:	10800044 	addi	r2,r2,1
  801e20:	d0a1da15 	stw	r2,-30872(gp)
	if(seconds == 60){
  801e24:	d0a1da17 	ldw	r2,-30872(gp)
  801e28:	10800f18 	cmpnei	r2,r2,60
  801e2c:	10000b1e 	bne	r2,zero,801e5c <update_time+0x74>
		seconds = 0;
  801e30:	d021da15 	stw	zero,-30872(gp)
		minutes++;
  801e34:	d0a1d917 	ldw	r2,-30876(gp)
  801e38:	10800044 	addi	r2,r2,1
  801e3c:	d0a1d915 	stw	r2,-30876(gp)
		if (minutes == 60){
  801e40:	d0a1d917 	ldw	r2,-30876(gp)
  801e44:	10800f18 	cmpnei	r2,r2,60
  801e48:	1000041e 	bne	r2,zero,801e5c <update_time+0x74>
			minutes = 0;
  801e4c:	d021d915 	stw	zero,-30876(gp)
			hours++;
  801e50:	d0a1d817 	ldw	r2,-30880(gp)
  801e54:	10800044 	addi	r2,r2,1
  801e58:	d0a1d815 	stw	r2,-30880(gp)
		}
	}

	char c;
	short s;
	bcd = i2bcd(hours);
  801e5c:	d0a1d817 	ldw	r2,-30880(gp)
  801e60:	1009883a 	mov	r4,r2
  801e64:	0801d200 	call	801d20 <i2bcd>
  801e68:	e0bffa15 	stw	r2,-24(fp)
	c = (char)((bcd & 0x0F0) >>4);
  801e6c:	e0bffa17 	ldw	r2,-24(fp)
  801e70:	10803c0c 	andi	r2,r2,240
  801e74:	1004d13a 	srli	r2,r2,4
  801e78:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801e7c:	e0bffb07 	ldb	r2,-20(fp)
  801e80:	10800c04 	addi	r2,r2,48
  801e84:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +46, 50+30,4,0,(char)s);
  801e88:	e0bffb8b 	ldhu	r2,-18(fp)
  801e8c:	10803fcc 	andi	r2,r2,255
  801e90:	1080201c 	xori	r2,r2,128
  801e94:	10bfe004 	addi	r2,r2,-128
  801e98:	d8800015 	stw	r2,0(sp)
  801e9c:	000f883a 	mov	r7,zero
  801ea0:	01800104 	movi	r6,4
  801ea4:	01401404 	movi	r5,80
  801ea8:	01002104 	movi	r4,132
  801eac:	08010340 	call	801034 <print_char>

	c = (char)(bcd & 0x0F);
  801eb0:	e0bffa17 	ldw	r2,-24(fp)
  801eb4:	108003cc 	andi	r2,r2,15
  801eb8:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801ebc:	e0bffb07 	ldb	r2,-20(fp)
  801ec0:	10800c04 	addi	r2,r2,48
  801ec4:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3 -50+30 +54,50+30,4,0,(char)s);
  801ec8:	e0bffb8b 	ldhu	r2,-18(fp)
  801ecc:	10803fcc 	andi	r2,r2,255
  801ed0:	1080201c 	xori	r2,r2,128
  801ed4:	10bfe004 	addi	r2,r2,-128
  801ed8:	d8800015 	stw	r2,0(sp)
  801edc:	000f883a 	mov	r7,zero
  801ee0:	01800104 	movi	r6,4
  801ee4:	01401404 	movi	r5,80
  801ee8:	01002304 	movi	r4,140
  801eec:	08010340 	call	801034 <print_char>

	print_char(320/3-50 +30 +54+8,50+30,4,0,':');
  801ef0:	00800e84 	movi	r2,58
  801ef4:	d8800015 	stw	r2,0(sp)
  801ef8:	000f883a 	mov	r7,zero
  801efc:	01800104 	movi	r6,4
  801f00:	01401404 	movi	r5,80
  801f04:	01002504 	movi	r4,148
  801f08:	08010340 	call	801034 <print_char>

	bcd = i2bcd(minutes);
  801f0c:	d0a1d917 	ldw	r2,-30876(gp)
  801f10:	1009883a 	mov	r4,r2
  801f14:	0801d200 	call	801d20 <i2bcd>
  801f18:	e0bffa15 	stw	r2,-24(fp)
	c = (char)((bcd & 0x0F0) >>4);
  801f1c:	e0bffa17 	ldw	r2,-24(fp)
  801f20:	10803c0c 	andi	r2,r2,240
  801f24:	1004d13a 	srli	r2,r2,4
  801f28:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801f2c:	e0bffb07 	ldb	r2,-20(fp)
  801f30:	10800c04 	addi	r2,r2,48
  801f34:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +54+8+8, 50+30,4,0,(char)s);
  801f38:	e0bffb8b 	ldhu	r2,-18(fp)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	d8800015 	stw	r2,0(sp)
  801f4c:	000f883a 	mov	r7,zero
  801f50:	01800104 	movi	r6,4
  801f54:	01401404 	movi	r5,80
  801f58:	01002704 	movi	r4,156
  801f5c:	08010340 	call	801034 <print_char>

	c = (char)(bcd & 0x0F);
  801f60:	e0bffa17 	ldw	r2,-24(fp)
  801f64:	108003cc 	andi	r2,r2,15
  801f68:	e0bffb05 	stb	r2,-20(fp)
	s = (short) c +48;
  801f6c:	e0bffb07 	ldb	r2,-20(fp)
  801f70:	10800c04 	addi	r2,r2,48
  801f74:	e0bffb8d 	sth	r2,-18(fp)
	print_char(320/3-50 +30 +54+8+8+8,50+30,4,0,(char)s);
  801f78:	e0bffb8b 	ldhu	r2,-18(fp)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	d8800015 	stw	r2,0(sp)
  801f8c:	000f883a 	mov	r7,zero
  801f90:	01800104 	movi	r6,4
  801f94:	01401404 	movi	r5,80
  801f98:	01002904 	movi	r4,164
  801f9c:	08010340 	call	801034 <print_char>

	print_char(320/3-50 +30 +54+8+8+8+8,50+30,4,0,':');
  801fa0:	00800e84 	movi	r2,58
  801fa4:	d8800015 	stw	r2,0(sp)
  801fa8:	000f883a 	mov	r7,zero
  801fac:	01800104 	movi	r6,4
  801fb0:	01401404 	movi	r5,80
  801fb4:	01002b04 	movi	r4,172
  801fb8:	08010340 	call	801034 <print_char>


	bcd = i2bcd(seconds);
  801fbc:	d0a1da17 	ldw	r2,-30872(gp)
  801fc0:	1009883a 	mov	r4,r2
  801fc4:	0801d200 	call	801d20 <i2bcd>
  801fc8:	e0bffa15 	stw	r2,-24(fp)
		c = (char)((bcd & 0x0F0) >>4);
  801fcc:	e0bffa17 	ldw	r2,-24(fp)
  801fd0:	10803c0c 	andi	r2,r2,240
  801fd4:	1004d13a 	srli	r2,r2,4
  801fd8:	e0bffb05 	stb	r2,-20(fp)
		s = (short) c +48;
  801fdc:	e0bffb07 	ldb	r2,-20(fp)
  801fe0:	10800c04 	addi	r2,r2,48
  801fe4:	e0bffb8d 	sth	r2,-18(fp)
		print_char(320/3-50 +30 +54+40, 50+30,4,0,(char)s);
  801fe8:	e0bffb8b 	ldhu	r2,-18(fp)
  801fec:	10803fcc 	andi	r2,r2,255
  801ff0:	1080201c 	xori	r2,r2,128
  801ff4:	10bfe004 	addi	r2,r2,-128
  801ff8:	d8800015 	stw	r2,0(sp)
  801ffc:	000f883a 	mov	r7,zero
  802000:	01800104 	movi	r6,4
  802004:	01401404 	movi	r5,80
  802008:	01002d04 	movi	r4,180
  80200c:	08010340 	call	801034 <print_char>

		c = (char)(bcd & 0x0F);
  802010:	e0bffa17 	ldw	r2,-24(fp)
  802014:	108003cc 	andi	r2,r2,15
  802018:	e0bffb05 	stb	r2,-20(fp)
		s = (short) c +48;
  80201c:	e0bffb07 	ldb	r2,-20(fp)
  802020:	10800c04 	addi	r2,r2,48
  802024:	e0bffb8d 	sth	r2,-18(fp)
		print_char(320/3-50 +30 +54+48,50+30,4,0,(char)s);
  802028:	e0bffb8b 	ldhu	r2,-18(fp)
  80202c:	10803fcc 	andi	r2,r2,255
  802030:	1080201c 	xori	r2,r2,128
  802034:	10bfe004 	addi	r2,r2,-128
  802038:	d8800015 	stw	r2,0(sp)
  80203c:	000f883a 	mov	r7,zero
  802040:	01800104 	movi	r6,4
  802044:	01401404 	movi	r5,80
  802048:	01002f04 	movi	r4,188
  80204c:	08010340 	call	801034 <print_char>


}
  802050:	0001883a 	nop
  802054:	e037883a 	mov	sp,fp
  802058:	dfc00117 	ldw	ra,4(sp)
  80205c:	df000017 	ldw	fp,0(sp)
  802060:	dec00204 	addi	sp,sp,8
  802064:	f800283a 	ret

00802068 <__divsi3>:
  802068:	20001b16 	blt	r4,zero,8020d8 <__divsi3+0x70>
  80206c:	000f883a 	mov	r7,zero
  802070:	28001616 	blt	r5,zero,8020cc <__divsi3+0x64>
  802074:	200d883a 	mov	r6,r4
  802078:	29001a2e 	bgeu	r5,r4,8020e4 <__divsi3+0x7c>
  80207c:	00800804 	movi	r2,32
  802080:	00c00044 	movi	r3,1
  802084:	00000106 	br	80208c <__divsi3+0x24>
  802088:	10000d26 	beq	r2,zero,8020c0 <__divsi3+0x58>
  80208c:	294b883a 	add	r5,r5,r5
  802090:	10bfffc4 	addi	r2,r2,-1
  802094:	18c7883a 	add	r3,r3,r3
  802098:	293ffb36 	bltu	r5,r4,802088 <__alt_data_end+0xff802088>
  80209c:	0005883a 	mov	r2,zero
  8020a0:	18000726 	beq	r3,zero,8020c0 <__divsi3+0x58>
  8020a4:	0005883a 	mov	r2,zero
  8020a8:	31400236 	bltu	r6,r5,8020b4 <__divsi3+0x4c>
  8020ac:	314dc83a 	sub	r6,r6,r5
  8020b0:	10c4b03a 	or	r2,r2,r3
  8020b4:	1806d07a 	srli	r3,r3,1
  8020b8:	280ad07a 	srli	r5,r5,1
  8020bc:	183ffa1e 	bne	r3,zero,8020a8 <__alt_data_end+0xff8020a8>
  8020c0:	38000126 	beq	r7,zero,8020c8 <__divsi3+0x60>
  8020c4:	0085c83a 	sub	r2,zero,r2
  8020c8:	f800283a 	ret
  8020cc:	014bc83a 	sub	r5,zero,r5
  8020d0:	39c0005c 	xori	r7,r7,1
  8020d4:	003fe706 	br	802074 <__alt_data_end+0xff802074>
  8020d8:	0109c83a 	sub	r4,zero,r4
  8020dc:	01c00044 	movi	r7,1
  8020e0:	003fe306 	br	802070 <__alt_data_end+0xff802070>
  8020e4:	00c00044 	movi	r3,1
  8020e8:	003fee06 	br	8020a4 <__alt_data_end+0xff8020a4>

008020ec <__modsi3>:
  8020ec:	20001716 	blt	r4,zero,80214c <__modsi3+0x60>
  8020f0:	000f883a 	mov	r7,zero
  8020f4:	2005883a 	mov	r2,r4
  8020f8:	28001216 	blt	r5,zero,802144 <__modsi3+0x58>
  8020fc:	2900162e 	bgeu	r5,r4,802158 <__modsi3+0x6c>
  802100:	01800804 	movi	r6,32
  802104:	00c00044 	movi	r3,1
  802108:	00000106 	br	802110 <__modsi3+0x24>
  80210c:	30000a26 	beq	r6,zero,802138 <__modsi3+0x4c>
  802110:	294b883a 	add	r5,r5,r5
  802114:	31bfffc4 	addi	r6,r6,-1
  802118:	18c7883a 	add	r3,r3,r3
  80211c:	293ffb36 	bltu	r5,r4,80210c <__alt_data_end+0xff80210c>
  802120:	18000526 	beq	r3,zero,802138 <__modsi3+0x4c>
  802124:	1806d07a 	srli	r3,r3,1
  802128:	11400136 	bltu	r2,r5,802130 <__modsi3+0x44>
  80212c:	1145c83a 	sub	r2,r2,r5
  802130:	280ad07a 	srli	r5,r5,1
  802134:	183ffb1e 	bne	r3,zero,802124 <__alt_data_end+0xff802124>
  802138:	38000126 	beq	r7,zero,802140 <__modsi3+0x54>
  80213c:	0085c83a 	sub	r2,zero,r2
  802140:	f800283a 	ret
  802144:	014bc83a 	sub	r5,zero,r5
  802148:	003fec06 	br	8020fc <__alt_data_end+0xff8020fc>
  80214c:	0109c83a 	sub	r4,zero,r4
  802150:	01c00044 	movi	r7,1
  802154:	003fe706 	br	8020f4 <__alt_data_end+0xff8020f4>
  802158:	00c00044 	movi	r3,1
  80215c:	003ff106 	br	802124 <__alt_data_end+0xff802124>

00802160 <__udivsi3>:
  802160:	200d883a 	mov	r6,r4
  802164:	2900152e 	bgeu	r5,r4,8021bc <__udivsi3+0x5c>
  802168:	28001416 	blt	r5,zero,8021bc <__udivsi3+0x5c>
  80216c:	00800804 	movi	r2,32
  802170:	00c00044 	movi	r3,1
  802174:	00000206 	br	802180 <__udivsi3+0x20>
  802178:	10000e26 	beq	r2,zero,8021b4 <__udivsi3+0x54>
  80217c:	28000516 	blt	r5,zero,802194 <__udivsi3+0x34>
  802180:	294b883a 	add	r5,r5,r5
  802184:	10bfffc4 	addi	r2,r2,-1
  802188:	18c7883a 	add	r3,r3,r3
  80218c:	293ffa36 	bltu	r5,r4,802178 <__alt_data_end+0xff802178>
  802190:	18000826 	beq	r3,zero,8021b4 <__udivsi3+0x54>
  802194:	0005883a 	mov	r2,zero
  802198:	31400236 	bltu	r6,r5,8021a4 <__udivsi3+0x44>
  80219c:	314dc83a 	sub	r6,r6,r5
  8021a0:	10c4b03a 	or	r2,r2,r3
  8021a4:	1806d07a 	srli	r3,r3,1
  8021a8:	280ad07a 	srli	r5,r5,1
  8021ac:	183ffa1e 	bne	r3,zero,802198 <__alt_data_end+0xff802198>
  8021b0:	f800283a 	ret
  8021b4:	0005883a 	mov	r2,zero
  8021b8:	f800283a 	ret
  8021bc:	00c00044 	movi	r3,1
  8021c0:	003ff406 	br	802194 <__alt_data_end+0xff802194>

008021c4 <__umodsi3>:
  8021c4:	2005883a 	mov	r2,r4
  8021c8:	2900122e 	bgeu	r5,r4,802214 <__umodsi3+0x50>
  8021cc:	28001116 	blt	r5,zero,802214 <__umodsi3+0x50>
  8021d0:	01800804 	movi	r6,32
  8021d4:	00c00044 	movi	r3,1
  8021d8:	00000206 	br	8021e4 <__umodsi3+0x20>
  8021dc:	30000c26 	beq	r6,zero,802210 <__umodsi3+0x4c>
  8021e0:	28000516 	blt	r5,zero,8021f8 <__umodsi3+0x34>
  8021e4:	294b883a 	add	r5,r5,r5
  8021e8:	31bfffc4 	addi	r6,r6,-1
  8021ec:	18c7883a 	add	r3,r3,r3
  8021f0:	293ffa36 	bltu	r5,r4,8021dc <__alt_data_end+0xff8021dc>
  8021f4:	18000626 	beq	r3,zero,802210 <__umodsi3+0x4c>
  8021f8:	1806d07a 	srli	r3,r3,1
  8021fc:	11400136 	bltu	r2,r5,802204 <__umodsi3+0x40>
  802200:	1145c83a 	sub	r2,r2,r5
  802204:	280ad07a 	srli	r5,r5,1
  802208:	183ffb1e 	bne	r3,zero,8021f8 <__alt_data_end+0xff8021f8>
  80220c:	f800283a 	ret
  802210:	f800283a 	ret
  802214:	00c00044 	movi	r3,1
  802218:	003ff706 	br	8021f8 <__alt_data_end+0xff8021f8>

0080221c <__mulsi3>:
  80221c:	0005883a 	mov	r2,zero
  802220:	20000726 	beq	r4,zero,802240 <__mulsi3+0x24>
  802224:	20c0004c 	andi	r3,r4,1
  802228:	2008d07a 	srli	r4,r4,1
  80222c:	18000126 	beq	r3,zero,802234 <__mulsi3+0x18>
  802230:	1145883a 	add	r2,r2,r5
  802234:	294b883a 	add	r5,r5,r5
  802238:	203ffa1e 	bne	r4,zero,802224 <__alt_data_end+0xff802224>
  80223c:	f800283a 	ret
  802240:	f800283a 	ret

00802244 <memcpy>:
  802244:	2005883a 	mov	r2,r4
  802248:	2007883a 	mov	r3,r4
  80224c:	218d883a 	add	r6,r4,r6
  802250:	19800526 	beq	r3,r6,802268 <memcpy+0x24>
  802254:	29000003 	ldbu	r4,0(r5)
  802258:	18c00044 	addi	r3,r3,1
  80225c:	29400044 	addi	r5,r5,1
  802260:	193fffc5 	stb	r4,-1(r3)
  802264:	003ffa06 	br	802250 <__alt_data_end+0xff802250>
  802268:	f800283a 	ret

0080226c <memset>:
  80226c:	2005883a 	mov	r2,r4
  802270:	2007883a 	mov	r3,r4
  802274:	218d883a 	add	r6,r4,r6
  802278:	19800326 	beq	r3,r6,802288 <memset+0x1c>
  80227c:	19400005 	stb	r5,0(r3)
  802280:	18c00044 	addi	r3,r3,1
  802284:	003ffc06 	br	802278 <__alt_data_end+0xff802278>
  802288:	f800283a 	ret

0080228c <putc>:
  80228c:	defffd04 	addi	sp,sp,-12
  802290:	00802034 	movhi	r2,128
  802294:	dc000115 	stw	r16,4(sp)
  802298:	dfc00215 	stw	ra,8(sp)
  80229c:	1088d504 	addi	r2,r2,9044
  8022a0:	28800115 	stw	r2,4(r5)
  8022a4:	00802034 	movhi	r2,128
  8022a8:	108ec204 	addi	r2,r2,15112
  8022ac:	d9000005 	stb	r4,0(sp)
  8022b0:	2021883a 	mov	r16,r4
  8022b4:	11000017 	ldw	r4,0(r2)
  8022b8:	01c00044 	movi	r7,1
  8022bc:	d80d883a 	mov	r6,sp
  8022c0:	08023540 	call	802354 <__sfvwrite_small_dev>
  8022c4:	00ffffc4 	movi	r3,-1
  8022c8:	10c00126 	beq	r2,r3,8022d0 <putc+0x44>
  8022cc:	8005883a 	mov	r2,r16
  8022d0:	dfc00217 	ldw	ra,8(sp)
  8022d4:	dc000117 	ldw	r16,4(sp)
  8022d8:	dec00304 	addi	sp,sp,12
  8022dc:	f800283a 	ret

008022e0 <_putc_r>:
  8022e0:	defffd04 	addi	sp,sp,-12
  8022e4:	00802034 	movhi	r2,128
  8022e8:	dc000115 	stw	r16,4(sp)
  8022ec:	dfc00215 	stw	ra,8(sp)
  8022f0:	1088d504 	addi	r2,r2,9044
  8022f4:	30800115 	stw	r2,4(r6)
  8022f8:	00802034 	movhi	r2,128
  8022fc:	108ec204 	addi	r2,r2,15112
  802300:	11000017 	ldw	r4,0(r2)
  802304:	2821883a 	mov	r16,r5
  802308:	01c00044 	movi	r7,1
  80230c:	300b883a 	mov	r5,r6
  802310:	d80d883a 	mov	r6,sp
  802314:	dc000005 	stb	r16,0(sp)
  802318:	08023540 	call	802354 <__sfvwrite_small_dev>
  80231c:	00ffffc4 	movi	r3,-1
  802320:	10c00126 	beq	r2,r3,802328 <_putc_r+0x48>
  802324:	8005883a 	mov	r2,r16
  802328:	dfc00217 	ldw	ra,8(sp)
  80232c:	dc000117 	ldw	r16,4(sp)
  802330:	dec00304 	addi	sp,sp,12
  802334:	f800283a 	ret

00802338 <strlen>:
  802338:	2005883a 	mov	r2,r4
  80233c:	10c00007 	ldb	r3,0(r2)
  802340:	18000226 	beq	r3,zero,80234c <strlen+0x14>
  802344:	10800044 	addi	r2,r2,1
  802348:	003ffc06 	br	80233c <__alt_data_end+0xff80233c>
  80234c:	1105c83a 	sub	r2,r2,r4
  802350:	f800283a 	ret

00802354 <__sfvwrite_small_dev>:
  802354:	2880000b 	ldhu	r2,0(r5)
  802358:	1080020c 	andi	r2,r2,8
  80235c:	10002126 	beq	r2,zero,8023e4 <__sfvwrite_small_dev+0x90>
  802360:	2880008f 	ldh	r2,2(r5)
  802364:	defffa04 	addi	sp,sp,-24
  802368:	dc000015 	stw	r16,0(sp)
  80236c:	dfc00515 	stw	ra,20(sp)
  802370:	dd000415 	stw	r20,16(sp)
  802374:	dcc00315 	stw	r19,12(sp)
  802378:	dc800215 	stw	r18,8(sp)
  80237c:	dc400115 	stw	r17,4(sp)
  802380:	2821883a 	mov	r16,r5
  802384:	10001216 	blt	r2,zero,8023d0 <__sfvwrite_small_dev+0x7c>
  802388:	2027883a 	mov	r19,r4
  80238c:	3025883a 	mov	r18,r6
  802390:	3823883a 	mov	r17,r7
  802394:	05010004 	movi	r20,1024
  802398:	04400b0e 	bge	zero,r17,8023c8 <__sfvwrite_small_dev+0x74>
  80239c:	880f883a 	mov	r7,r17
  8023a0:	a440010e 	bge	r20,r17,8023a8 <__sfvwrite_small_dev+0x54>
  8023a4:	01c10004 	movi	r7,1024
  8023a8:	8140008f 	ldh	r5,2(r16)
  8023ac:	900d883a 	mov	r6,r18
  8023b0:	9809883a 	mov	r4,r19
  8023b4:	080240c0 	call	80240c <_write_r>
  8023b8:	0080050e 	bge	zero,r2,8023d0 <__sfvwrite_small_dev+0x7c>
  8023bc:	88a3c83a 	sub	r17,r17,r2
  8023c0:	90a5883a 	add	r18,r18,r2
  8023c4:	003ff406 	br	802398 <__alt_data_end+0xff802398>
  8023c8:	0005883a 	mov	r2,zero
  8023cc:	00000706 	br	8023ec <__sfvwrite_small_dev+0x98>
  8023d0:	8080000b 	ldhu	r2,0(r16)
  8023d4:	10801014 	ori	r2,r2,64
  8023d8:	8080000d 	sth	r2,0(r16)
  8023dc:	00bfffc4 	movi	r2,-1
  8023e0:	00000206 	br	8023ec <__sfvwrite_small_dev+0x98>
  8023e4:	00bfffc4 	movi	r2,-1
  8023e8:	f800283a 	ret
  8023ec:	dfc00517 	ldw	ra,20(sp)
  8023f0:	dd000417 	ldw	r20,16(sp)
  8023f4:	dcc00317 	ldw	r19,12(sp)
  8023f8:	dc800217 	ldw	r18,8(sp)
  8023fc:	dc400117 	ldw	r17,4(sp)
  802400:	dc000017 	ldw	r16,0(sp)
  802404:	dec00604 	addi	sp,sp,24
  802408:	f800283a 	ret

0080240c <_write_r>:
  80240c:	defffd04 	addi	sp,sp,-12
  802410:	dc000015 	stw	r16,0(sp)
  802414:	04002034 	movhi	r16,128
  802418:	dc400115 	stw	r17,4(sp)
  80241c:	84109b04 	addi	r16,r16,17004
  802420:	2023883a 	mov	r17,r4
  802424:	2809883a 	mov	r4,r5
  802428:	300b883a 	mov	r5,r6
  80242c:	380d883a 	mov	r6,r7
  802430:	dfc00215 	stw	ra,8(sp)
  802434:	80000015 	stw	zero,0(r16)
  802438:	08027280 	call	802728 <write>
  80243c:	00ffffc4 	movi	r3,-1
  802440:	10c0031e 	bne	r2,r3,802450 <_write_r+0x44>
  802444:	80c00017 	ldw	r3,0(r16)
  802448:	18000126 	beq	r3,zero,802450 <_write_r+0x44>
  80244c:	88c00015 	stw	r3,0(r17)
  802450:	dfc00217 	ldw	ra,8(sp)
  802454:	dc400117 	ldw	r17,4(sp)
  802458:	dc000017 	ldw	r16,0(sp)
  80245c:	dec00304 	addi	sp,sp,12
  802460:	f800283a 	ret

00802464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  802464:	deffff04 	addi	sp,sp,-4
  802468:	01002034 	movhi	r4,128
  80246c:	01402034 	movhi	r5,128
  802470:	dfc00015 	stw	ra,0(sp)
  802474:	210d0304 	addi	r4,r4,13324
  802478:	294ecc04 	addi	r5,r5,15152

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80247c:	2140061e 	bne	r4,r5,802498 <alt_load+0x34>
  802480:	01002034 	movhi	r4,128
  802484:	01402034 	movhi	r5,128
  802488:	21000804 	addi	r4,r4,32
  80248c:	29400804 	addi	r5,r5,32
  802490:	2140121e 	bne	r4,r5,8024dc <alt_load+0x78>
  802494:	00000b06 	br	8024c4 <alt_load+0x60>
  802498:	00c02034 	movhi	r3,128
  80249c:	18cecc04 	addi	r3,r3,15152
  8024a0:	1907c83a 	sub	r3,r3,r4
  8024a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8024a8:	10fff526 	beq	r2,r3,802480 <__alt_data_end+0xff802480>
    {
      *to++ = *from++;
  8024ac:	114f883a 	add	r7,r2,r5
  8024b0:	39c00017 	ldw	r7,0(r7)
  8024b4:	110d883a 	add	r6,r2,r4
  8024b8:	10800104 	addi	r2,r2,4
  8024bc:	31c00015 	stw	r7,0(r6)
  8024c0:	003ff906 	br	8024a8 <__alt_data_end+0xff8024a8>
  8024c4:	01002034 	movhi	r4,128
  8024c8:	01402034 	movhi	r5,128
  8024cc:	210cd104 	addi	r4,r4,13124
  8024d0:	294cd104 	addi	r5,r5,13124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8024d4:	2140101e 	bne	r4,r5,802518 <alt_load+0xb4>
  8024d8:	00000b06 	br	802508 <alt_load+0xa4>
  8024dc:	00c02034 	movhi	r3,128
  8024e0:	18c06004 	addi	r3,r3,384
  8024e4:	1907c83a 	sub	r3,r3,r4
  8024e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8024ec:	10fff526 	beq	r2,r3,8024c4 <__alt_data_end+0xff8024c4>
    {
      *to++ = *from++;
  8024f0:	114f883a 	add	r7,r2,r5
  8024f4:	39c00017 	ldw	r7,0(r7)
  8024f8:	110d883a 	add	r6,r2,r4
  8024fc:	10800104 	addi	r2,r2,4
  802500:	31c00015 	stw	r7,0(r6)
  802504:	003ff906 	br	8024ec <__alt_data_end+0xff8024ec>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  802508:	0802c500 	call	802c50 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80250c:	dfc00017 	ldw	ra,0(sp)
  802510:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  802514:	0802d481 	jmpi	802d48 <alt_icache_flush_all>
  802518:	00c02034 	movhi	r3,128
  80251c:	18cd0304 	addi	r3,r3,13324
  802520:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  802524:	0005883a 	mov	r2,zero
  {
    while( to != end )
  802528:	18bff726 	beq	r3,r2,802508 <__alt_data_end+0xff802508>
    {
      *to++ = *from++;
  80252c:	114f883a 	add	r7,r2,r5
  802530:	39c00017 	ldw	r7,0(r7)
  802534:	110d883a 	add	r6,r2,r4
  802538:	10800104 	addi	r2,r2,4
  80253c:	31c00015 	stw	r7,0(r6)
  802540:	003ff906 	br	802528 <__alt_data_end+0xff802528>

00802544 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  802544:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802548:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80254c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802550:	08027fc0 	call	8027fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  802554:	080281c0 	call	80281c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  802558:	01802034 	movhi	r6,128
  80255c:	318cf204 	addi	r6,r6,13256
  802560:	300b883a 	mov	r5,r6
  802564:	3009883a 	mov	r4,r6
  802568:	0802ed80 	call	802ed8 <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  80256c:	d1a1dd17 	ldw	r6,-30860(gp)
  802570:	d161de17 	ldw	r5,-30856(gp)
  802574:	d121df17 	ldw	r4,-30852(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  802578:	dfc00017 	ldw	ra,0(sp)
  80257c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  802580:	08001bc1 	jmpi	8001bc <main>

00802584 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  802584:	defff204 	addi	sp,sp,-56
  802588:	2005883a 	mov	r2,r4
  80258c:	dfc00a15 	stw	ra,40(sp)
  802590:	df000915 	stw	fp,36(sp)
  802594:	ddc00815 	stw	r23,32(sp)
  802598:	dd800715 	stw	r22,28(sp)
  80259c:	dd400615 	stw	r21,24(sp)
  8025a0:	dd000515 	stw	r20,20(sp)
  8025a4:	dcc00415 	stw	r19,16(sp)
  8025a8:	dc800315 	stw	r18,12(sp)
  8025ac:	dc400215 	stw	r17,8(sp)
  8025b0:	dc000115 	stw	r16,4(sp)
  8025b4:	d9400b15 	stw	r5,44(sp)
  8025b8:	d9800c15 	stw	r6,48(sp)
  8025bc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8025c0:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  8025c4:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  8025c8:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  8025cc:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8025d0:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8025d4:	11000007 	ldb	r4,0(r2)
  8025d8:	20003a26 	beq	r4,zero,8026c4 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8025dc:	24000226 	beq	r4,r16,8025e8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8025e0:	14400044 	addi	r17,r2,1
  8025e4:	00001406 	br	802638 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  8025e8:	14400084 	addi	r17,r2,2
  8025ec:	10800047 	ldb	r2,1(r2)
  8025f0:	10003426 	beq	r2,zero,8026c4 <alt_printf+0x140>
            {
                if (c == '%')
  8025f4:	1400021e 	bne	r2,r16,802600 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  8025f8:	8009883a 	mov	r4,r16
  8025fc:	00000e06 	br	802638 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  802600:	1480051e 	bne	r2,r18,802618 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  802604:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  802608:	ad800104 	addi	r22,r21,4
  80260c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  802610:	08026f40 	call	8026f4 <alt_putchar>
  802614:	00002906 	br	8026bc <alt_printf+0x138>
                }
                else if (c == 'x')
  802618:	14c0201e 	bne	r2,r19,80269c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80261c:	adc00017 	ldw	r23,0(r21)
  802620:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  802624:	b8000326 	beq	r23,zero,802634 <alt_printf+0xb0>
  802628:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80262c:	00c003c4 	movi	r3,15
  802630:	00000306 	br	802640 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  802634:	01000c04 	movi	r4,48
  802638:	08026f40 	call	8026f4 <alt_putchar>
                        continue;
  80263c:	00001f06 	br	8026bc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  802640:	1d84983a 	sll	r2,r3,r22
  802644:	15c4703a 	and	r2,r2,r23
  802648:	1000021e 	bne	r2,zero,802654 <alt_printf+0xd0>
                        digit_shift -= 4;
  80264c:	b5bfff04 	addi	r22,r22,-4
  802650:	003ffb06 	br	802640 <__alt_data_end+0xff802640>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  802654:	070003c4 	movi	fp,15
                        if (digit <= 9)
  802658:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80265c:	b0001716 	blt	r22,zero,8026bc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  802660:	e588983a 	sll	r4,fp,r22
  802664:	25c8703a 	and	r4,r4,r23
  802668:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  80266c:	19000236 	bltu	r3,r4,802678 <alt_printf+0xf4>
                            c = '0' + digit;
  802670:	21000c04 	addi	r4,r4,48
  802674:	00000106 	br	80267c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  802678:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  80267c:	21003fcc 	andi	r4,r4,255
  802680:	2100201c 	xori	r4,r4,128
  802684:	213fe004 	addi	r4,r4,-128
  802688:	d8c00015 	stw	r3,0(sp)
  80268c:	08026f40 	call	8026f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  802690:	b5bfff04 	addi	r22,r22,-4
  802694:	d8c00017 	ldw	r3,0(sp)
  802698:	003ff006 	br	80265c <__alt_data_end+0xff80265c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80269c:	1500071e 	bne	r2,r20,8026bc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8026a0:	ad800017 	ldw	r22,0(r21)
  8026a4:	ad400104 	addi	r21,r21,4

                    while(*s)
  8026a8:	b1000007 	ldb	r4,0(r22)
  8026ac:	20000326 	beq	r4,zero,8026bc <alt_printf+0x138>
                      alt_putchar(*s++);
  8026b0:	b5800044 	addi	r22,r22,1
  8026b4:	08026f40 	call	8026f4 <alt_putchar>
  8026b8:	003ffb06 	br	8026a8 <__alt_data_end+0xff8026a8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  8026bc:	8805883a 	mov	r2,r17
  8026c0:	003fc406 	br	8025d4 <__alt_data_end+0xff8025d4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8026c4:	dfc00a17 	ldw	ra,40(sp)
  8026c8:	df000917 	ldw	fp,36(sp)
  8026cc:	ddc00817 	ldw	r23,32(sp)
  8026d0:	dd800717 	ldw	r22,28(sp)
  8026d4:	dd400617 	ldw	r21,24(sp)
  8026d8:	dd000517 	ldw	r20,20(sp)
  8026dc:	dcc00417 	ldw	r19,16(sp)
  8026e0:	dc800317 	ldw	r18,12(sp)
  8026e4:	dc400217 	ldw	r17,8(sp)
  8026e8:	dc000117 	ldw	r16,4(sp)
  8026ec:	dec00e04 	addi	sp,sp,56
  8026f0:	f800283a 	ret

008026f4 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  8026f4:	00802034 	movhi	r2,128
  8026f8:	108ec204 	addi	r2,r2,15112
  8026fc:	10800017 	ldw	r2,0(r2)
  802700:	11400217 	ldw	r5,8(r2)
  802704:	080228c1 	jmpi	80228c <putc>

00802708 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  802708:	00802034 	movhi	r2,128
  80270c:	108eca04 	addi	r2,r2,15144
  802710:	10800017 	ldw	r2,0(r2)
  802714:	10000126 	beq	r2,zero,80271c <alt_get_errno+0x14>
  802718:	1000683a 	jmp	r2
}
  80271c:	00802034 	movhi	r2,128
  802720:	10909b04 	addi	r2,r2,17004
  802724:	f800283a 	ret

00802728 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  802728:	defffa04 	addi	sp,sp,-24
  80272c:	dfc00515 	stw	ra,20(sp)
  802730:	dd000415 	stw	r20,16(sp)
  802734:	dcc00315 	stw	r19,12(sp)
  802738:	dc800215 	stw	r18,8(sp)
  80273c:	dc400115 	stw	r17,4(sp)
  802740:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802744:	20002016 	blt	r4,zero,8027c8 <write+0xa0>
  802748:	2827883a 	mov	r19,r5
  80274c:	04002034 	movhi	r16,128
  802750:	01400304 	movi	r5,12
  802754:	2025883a 	mov	r18,r4
  802758:	3029883a 	mov	r20,r6
  80275c:	840e5504 	addi	r16,r16,14676
  802760:	080221c0 	call	80221c <__mulsi3>
  802764:	80a3883a 	add	r17,r16,r2
  
  if (fd)
  802768:	88001726 	beq	r17,zero,8027c8 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80276c:	88800217 	ldw	r2,8(r17)
  802770:	108000cc 	andi	r2,r2,3
  802774:	10001126 	beq	r2,zero,8027bc <write+0x94>
  802778:	01400304 	movi	r5,12
  80277c:	9009883a 	mov	r4,r18
  802780:	080221c0 	call	80221c <__mulsi3>
  802784:	8085883a 	add	r2,r16,r2
  802788:	10800017 	ldw	r2,0(r2)
  80278c:	10800617 	ldw	r2,24(r2)
  802790:	10000a26 	beq	r2,zero,8027bc <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  802794:	a00d883a 	mov	r6,r20
  802798:	980b883a 	mov	r5,r19
  80279c:	8809883a 	mov	r4,r17
  8027a0:	103ee83a 	callr	r2
  8027a4:	1021883a 	mov	r16,r2
  8027a8:	10000b0e 	bge	r2,zero,8027d8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
  8027ac:	08027080 	call	802708 <alt_get_errno>
  8027b0:	0421c83a 	sub	r16,zero,r16
  8027b4:	14000015 	stw	r16,0(r2)
  8027b8:	00000606 	br	8027d4 <write+0xac>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  8027bc:	08027080 	call	802708 <alt_get_errno>
  8027c0:	00c00344 	movi	r3,13
  8027c4:	00000206 	br	8027d0 <write+0xa8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8027c8:	08027080 	call	802708 <alt_get_errno>
  8027cc:	00c01444 	movi	r3,81
  8027d0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  8027d4:	043fffc4 	movi	r16,-1
}
  8027d8:	8005883a 	mov	r2,r16
  8027dc:	dfc00517 	ldw	ra,20(sp)
  8027e0:	dd000417 	ldw	r20,16(sp)
  8027e4:	dcc00317 	ldw	r19,12(sp)
  8027e8:	dc800217 	ldw	r18,8(sp)
  8027ec:	dc400117 	ldw	r17,4(sp)
  8027f0:	dc000017 	ldw	r16,0(sp)
  8027f4:	dec00604 	addi	sp,sp,24
  8027f8:	f800283a 	ret

008027fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8027fc:	deffff04 	addi	sp,sp,-4
  802800:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, Nios2_CPU);
  802804:	08031600 	call	803160 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  802808:	00800044 	movi	r2,1
  80280c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  802810:	dfc00017 	ldw	ra,0(sp)
  802814:	dec00104 	addi	sp,sp,4
  802818:	f800283a 	ret

0080281c <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80281c:	01402034 	movhi	r5,128
  802820:	01002034 	movhi	r4,128
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  802824:	deffff04 	addi	sp,sp,-4
  802828:	294ec604 	addi	r5,r5,15128
  80282c:	210e4a04 	addi	r4,r4,14632
  802830:	dfc00015 	stw	ra,0(sp)
  802834:	0802c5c0 	call	802c5c <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802838:	01bfffc4 	movi	r6,-1
  80283c:	01002034 	movhi	r4,128
  802840:	300b883a 	mov	r5,r6
  802844:	210e3b04 	addi	r4,r4,14572
}
  802848:	dfc00017 	ldw	ra,0(sp)
  80284c:	dec00104 	addi	sp,sp,4

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802850:	0802a241 	jmpi	802a24 <altera_modular_adc_init>

00802854 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  802854:	20800017 	ldw	r2,0(r4)
  802858:	21c00217 	ldw	r7,8(r4)
  80285c:	11000a04 	addi	r4,r2,40
  802860:	08028741 	jmpi	802874 <altera_avalon_jtag_uart_read>

00802864 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  802864:	20800017 	ldw	r2,0(r4)
  802868:	21c00217 	ldw	r7,8(r4)
  80286c:	11000a04 	addi	r4,r2,40
  802870:	08028d01 	jmpi	8028d0 <altera_avalon_jtag_uart_write>

00802874 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  802874:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  802878:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  80287c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  802880:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  802884:	11800b2e 	bgeu	r2,r6,8028b4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  802888:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  80288c:	1a60000c 	andi	r9,r3,32768
  802890:	48000326 	beq	r9,zero,8028a0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  802894:	10c00005 	stb	r3,0(r2)
  802898:	10800044 	addi	r2,r2,1
  80289c:	003ff906 	br	802884 <__alt_data_end+0xff802884>
    else if (ptr != buffer)
  8028a0:	11400226 	beq	r2,r5,8028ac <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  8028a4:	1145c83a 	sub	r2,r2,r5
  8028a8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  8028ac:	403ff526 	beq	r8,zero,802884 <__alt_data_end+0xff802884>
  8028b0:	00000106 	br	8028b8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  8028b4:	117ffb1e 	bne	r2,r5,8028a4 <__alt_data_end+0xff8028a4>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  8028b8:	39d0000c 	andi	r7,r7,16384
  8028bc:	3800021e 	bne	r7,zero,8028c8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  8028c0:	00bffec4 	movi	r2,-5
  8028c4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  8028c8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  8028cc:	f800283a 	ret

008028d0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  8028d0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8028d4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  8028d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8028dc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8028e0:	2980072e 	bgeu	r5,r6,802900 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8028e4:	38c00037 	ldwio	r3,0(r7)
  8028e8:	18ffffec 	andhi	r3,r3,65535
  8028ec:	183ffc26 	beq	r3,zero,8028e0 <__alt_data_end+0xff8028e0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8028f0:	28c00007 	ldb	r3,0(r5)
  8028f4:	20c00035 	stwio	r3,0(r4)
  8028f8:	29400044 	addi	r5,r5,1
  8028fc:	003ff806 	br	8028e0 <__alt_data_end+0xff8028e0>

  return count;
}
  802900:	f800283a 	ret

00802904 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  802904:	d8800017 	ldw	r2,0(sp)
  802908:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80290c:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  802910:	da400217 	ldw	r9,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802914:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  802918:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
  80291c:	409f883a 	add	r15,r8,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  802920:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  802924:	48c0008c 	andi	r3,r9,2
  802928:	1800021e 	bne	r3,zero,802934 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80292c:	00c10004 	movi	r3,1024
  802930:	20c00335 	stwio	r3,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  802934:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  802938:	00c00044 	movi	r3,1
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
  80293c:	1015883a 	mov	r10,r2
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802940:	22c00204 	addi	r11,r4,8
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  802944:	23000104 	addi	r12,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  802948:	59400037 	ldwio	r5,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  80294c:	2b40100c 	andi	r13,r5,64
  802950:	2940200c 	andi	r5,r5,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  802954:	68000126 	beq	r13,zero,80295c <alt_avalon_spi_command+0x58>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  802958:	1800031e 	bne	r3,zero,802968 <alt_avalon_spi_command+0x64>
  80295c:	283ffa26 	beq	r5,zero,802948 <__alt_data_end+0xff802948>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  802960:	68000e26 	beq	r13,zero,80299c <alt_avalon_spi_command+0x98>
  802964:	00001e06 	br	8029e0 <alt_avalon_spi_command+0xdc>
  802968:	00c00c0e 	bge	zero,r3,80299c <alt_avalon_spi_command+0x98>
    {
      credits--;
  80296c:	18ffffc4 	addi	r3,r3,-1

      if (write_data < write_end)
  802970:	3b80052e 	bgeu	r7,r14,802988 <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  802974:	3b400044 	addi	r13,r7,1
  802978:	39c00003 	ldbu	r7,0(r7)
  80297c:	61c00035 	stwio	r7,0(r12)
  802980:	680f883a 	mov	r7,r13
  802984:	00000506 	br	80299c <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
  802988:	50000326 	beq	r10,zero,802998 <alt_avalon_spi_command+0x94>
      {
        write_zeros--;
  80298c:	52bfffc4 	addi	r10,r10,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  802990:	60000035 	stwio	zero,0(r12)
  802994:	00000106 	br	80299c <alt_avalon_spi_command+0x98>
      }
      else
        credits = -1024;
  802998:	00ff0004 	movi	r3,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80299c:	283fea26 	beq	r5,zero,802948 <__alt_data_end+0xff802948>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  8029a0:	21400037 	ldwio	r5,0(r4)

      if (read_ignore > 0)
  8029a4:	30000226 	beq	r6,zero,8029b0 <alt_avalon_spi_command+0xac>
        read_ignore--;
  8029a8:	31bfffc4 	addi	r6,r6,-1
  8029ac:	00000206 	br	8029b8 <alt_avalon_spi_command+0xb4>
      else
        *read_data++ = (alt_u8)rxdata;
  8029b0:	41400005 	stb	r5,0(r8)
  8029b4:	42000044 	addi	r8,r8,1
      credits++;
  8029b8:	18c00044 	addi	r3,r3,1

      if (read_ignore == 0 && read_data == read_end)
  8029bc:	303fe21e 	bne	r6,zero,802948 <__alt_data_end+0xff802948>
  8029c0:	43ffe11e 	bne	r8,r15,802948 <__alt_data_end+0xff802948>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  8029c4:	58c00037 	ldwio	r3,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  8029c8:	18c0080c 	andi	r3,r3,32
  8029cc:	183ffd26 	beq	r3,zero,8029c4 <__alt_data_end+0xff8029c4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  8029d0:	4a40004c 	andi	r9,r9,1
  8029d4:	4800041e 	bne	r9,zero,8029e8 <alt_avalon_spi_command+0xe4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  8029d8:	20000335 	stwio	zero,12(r4)

  return read_length;
  8029dc:	f800283a 	ret
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  8029e0:	00ffef0e 	bge	zero,r3,8029a0 <__alt_data_end+0xff8029a0>
  8029e4:	003fe106 	br	80296c <__alt_data_end+0xff80296c>
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
  8029e8:	f800283a 	ret

008029ec <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
  8029ec:	28000b26 	beq	r5,zero,802a1c <alt_adc_word_read+0x30>
  8029f0:	0005883a 	mov	r2,zero
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  8029f4:	2149c83a 	sub	r4,r4,r5
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  8029f8:	11800626 	beq	r2,r6,802a14 <alt_adc_word_read+0x28>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  8029fc:	2907883a 	add	r3,r5,r4
  802a00:	18c00037 	ldwio	r3,0(r3)
  802a04:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  802a08:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
  802a0c:	29400104 	addi	r5,r5,4
  802a10:	003ff906 	br	8029f8 <__alt_data_end+0xff8029f8>
    }

    return 0;
  802a14:	0005883a 	mov	r2,zero
  802a18:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
  802a1c:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
  802a20:	f800283a 	ret

00802a24 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  802a24:	defffb04 	addi	sp,sp,-20
  802a28:	dc000115 	stw	r16,4(sp)
  802a2c:	2821883a 	mov	r16,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  802a30:	d1600404 	addi	r5,gp,-32752

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  802a34:	dc800315 	stw	r18,12(sp)
  802a38:	dc400215 	stw	r17,8(sp)
  802a3c:	dfc00415 	stw	ra,16(sp)
  802a40:	2025883a 	mov	r18,r4
  802a44:	3023883a 	mov	r17,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  802a48:	0802c5c0 	call	802c5c <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
  802a4c:	80000816 	blt	r16,zero,802a70 <altera_modular_adc_init+0x4c>
  802a50:	88000716 	blt	r17,zero,802a70 <altera_modular_adc_init+0x4c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
  802a54:	01802034 	movhi	r6,128
  802a58:	d8000015 	stw	zero,0(sp)
  802a5c:	900f883a 	mov	r7,r18
  802a60:	318ae004 	addi	r6,r6,11136
  802a64:	880b883a 	mov	r5,r17
  802a68:	8009883a 	mov	r4,r16
  802a6c:	0802d4c0 	call	802d4c <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
  802a70:	dfc00417 	ldw	ra,16(sp)
  802a74:	dc800317 	ldw	r18,12(sp)
  802a78:	dc400217 	ldw	r17,8(sp)
  802a7c:	dc000117 	ldw	r16,4(sp)
  802a80:	dec00504 	addi	sp,sp,20
  802a84:	f800283a 	ret

00802a88 <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
  802a88:	d1600404 	addi	r5,gp,-32752
  802a8c:	0802cd41 	jmpi	802cd4 <alt_find_dev>

00802a90 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
  802a90:	20c00037 	ldwio	r3,0(r4)
  802a94:	00bfff84 	movi	r2,-2
  802a98:	1884703a 	and	r2,r3,r2
  802a9c:	20800035 	stwio	r2,0(r4)
  802aa0:	20800037 	ldwio	r2,0(r4)
  802aa4:	1080004c 	andi	r2,r2,1
  802aa8:	103ffd1e 	bne	r2,zero,802aa0 <__alt_data_end+0xff802aa0>
}
  802aac:	f800283a 	ret

00802ab0 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
  802ab0:	20800037 	ldwio	r2,0(r4)
  802ab4:	10800054 	ori	r2,r2,1
  802ab8:	20800035 	stwio	r2,0(r4)
  802abc:	f800283a 	ret

00802ac0 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
  802ac0:	20c00037 	ldwio	r3,0(r4)
  802ac4:	00bffc44 	movi	r2,-15
  802ac8:	1884703a 	and	r2,r3,r2
  802acc:	10800094 	ori	r2,r2,2
  802ad0:	20800035 	stwio	r2,0(r4)
  802ad4:	f800283a 	ret

00802ad8 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
  802ad8:	20c00037 	ldwio	r3,0(r4)
  802adc:	00bffc44 	movi	r2,-15
  802ae0:	1884703a 	and	r2,r3,r2
  802ae4:	20800035 	stwio	r2,0(r4)
  802ae8:	f800283a 	ret

00802aec <adc_recalibrate>:
}

void adc_recalibrate(int sequencer_base)
{
  802aec:	defffd04 	addi	sp,sp,-12
  802af0:	dc000015 	stw	r16,0(sp)
  802af4:	2021883a 	mov	r16,r4
  802af8:	dfc00215 	stw	ra,8(sp)
  802afc:	dc400115 	stw	r17,4(sp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
  802b00:	24400037 	ldwio	r17,0(r4)
    adc_stop(sequencer_base);
  802b04:	0802a900 	call	802a90 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
  802b08:	80800037 	ldwio	r2,0(r16)
  802b0c:	10800394 	ori	r2,r2,14
  802b10:	80800035 	stwio	r2,0(r16)
    adc_start(sequencer_base);
  802b14:	8009883a 	mov	r4,r16
  802b18:	0802ab00 	call	802ab0 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  802b1c:	80800037 	ldwio	r2,0(r16)
  802b20:	1080004c 	andi	r2,r2,1
  802b24:	103ffd1e 	bne	r2,zero,802b1c <__alt_data_end+0xff802b1c>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
  802b28:	84400035 	stwio	r17,0(r16)
}
  802b2c:	dfc00217 	ldw	ra,8(sp)
  802b30:	dc400117 	ldw	r17,4(sp)
  802b34:	dc000017 	ldw	r16,0(sp)
  802b38:	dec00304 	addi	sp,sp,12
  802b3c:	f800283a 	ret

00802b40 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
  802b40:	21004004 	addi	r4,r4,256
  802b44:	20800037 	ldwio	r2,0(r4)
  802b48:	10800054 	ori	r2,r2,1
  802b4c:	20800035 	stwio	r2,0(r4)
  802b50:	f800283a 	ret

00802b54 <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
  802b54:	21004004 	addi	r4,r4,256
  802b58:	20c00037 	ldwio	r3,0(r4)
  802b5c:	00bfff84 	movi	r2,-2
  802b60:	1884703a 	and	r2,r3,r2
  802b64:	20800035 	stwio	r2,0(r4)
  802b68:	f800283a 	ret

00802b6c <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
  802b6c:	21004104 	addi	r4,r4,260
  802b70:	20800037 	ldwio	r2,0(r4)
  802b74:	10800054 	ori	r2,r2,1
  802b78:	20800035 	stwio	r2,0(r4)
  802b7c:	f800283a 	ret

00802b80 <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
  802b80:	20001426 	beq	r4,zero,802bd4 <alt_adc_irq+0x54>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
  802b84:	defffd04 	addi	sp,sp,-12
  802b88:	dc000015 	stw	r16,0(sp)
  802b8c:	2021883a 	mov	r16,r4
  802b90:	dfc00215 	stw	ra,8(sp)
  802b94:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802b98:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802b9c:	00bfff84 	movi	r2,-2
  802ba0:	8884703a 	and	r2,r17,r2
  802ba4:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
  802ba8:	20800a17 	ldw	r2,40(r4)
  802bac:	10000226 	beq	r2,zero,802bb8 <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
  802bb0:	21000b17 	ldw	r4,44(r4)
  802bb4:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
  802bb8:	81000c17 	ldw	r4,48(r16)
  802bbc:	0802b6c0 	call	802b6c <adc_clear_interrupt_status>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802bc0:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
  802bc4:	dfc00217 	ldw	ra,8(sp)
  802bc8:	dc400117 	ldw	r17,4(sp)
  802bcc:	dc000017 	ldw	r16,0(sp)
  802bd0:	dec00304 	addi	sp,sp,12
  802bd4:	f800283a 	ret

00802bd8 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  802bd8:	defffe04 	addi	sp,sp,-8
  802bdc:	dc000015 	stw	r16,0(sp)
  802be0:	dfc00115 	stw	ra,4(sp)
    dev->callback         = callback;
  802be4:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
  802be8:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
  802bec:	21c00c15 	stw	r7,48(r4)
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  802bf0:	3821883a 	mov	r16,r7
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
  802bf4:	3809883a 	mov	r4,r7
{
    dev->callback         = callback;
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
  802bf8:	28000626 	beq	r5,zero,802c14 <alt_adc_register_callback+0x3c>
	{
                adc_clear_interrupt_status(sample_store_base);
  802bfc:	0802b6c0 	call	802b6c <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
  802c00:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  802c04:	dfc00117 	ldw	ra,4(sp)
  802c08:	dc000017 	ldw	r16,0(sp)
  802c0c:	dec00204 	addi	sp,sp,8
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
  802c10:	0802b401 	jmpi	802b40 <adc_interrupt_enable>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
  802c14:	0802b540 	call	802b54 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
  802c18:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  802c1c:	dfc00117 	ldw	ra,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00204 	addi	sp,sp,8
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
                adc_clear_interrupt_status(sample_store_base);
  802c28:	0802b6c1 	jmpi	802b6c <adc_clear_interrupt_status>

00802c2c <adc_interrupt_asserted>:
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
  802c2c:	20804137 	ldwio	r2,260(r4)
  802c30:	1080004c 	andi	r2,r2,1
}
  802c34:	0085c83a 	sub	r2,zero,r2
  802c38:	f800283a 	ret

00802c3c <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
  802c3c:	21004104 	addi	r4,r4,260
  802c40:	20800037 	ldwio	r2,0(r4)
  802c44:	1080004c 	andi	r2,r2,1
  802c48:	103ffd26 	beq	r2,zero,802c40 <__alt_data_end+0xff802c40>
}
  802c4c:	f800283a 	ret

00802c50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802c50:	f800283a 	ret

00802c54 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  802c54:	3005883a 	mov	r2,r6
  802c58:	f800283a 	ret

00802c5c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802c5c:	20000226 	beq	r4,zero,802c68 <alt_dev_llist_insert+0xc>
  802c60:	20800217 	ldw	r2,8(r4)
  802c64:	1000131e 	bne	r2,zero,802cb4 <alt_dev_llist_insert+0x58>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  802c68:	00802034 	movhi	r2,128
  802c6c:	108eca04 	addi	r2,r2,15144
  802c70:	10800017 	ldw	r2,0(r2)
  802c74:	10000926 	beq	r2,zero,802c9c <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802c78:	deffff04 	addi	sp,sp,-4
  802c7c:	dfc00015 	stw	ra,0(sp)
  802c80:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  802c84:	00c00584 	movi	r3,22
  802c88:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  802c8c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  802c90:	dfc00017 	ldw	ra,0(sp)
  802c94:	dec00104 	addi	sp,sp,4
  802c98:	f800283a 	ret
  802c9c:	00802034 	movhi	r2,128
  802ca0:	10909b04 	addi	r2,r2,17004
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  802ca4:	00c00584 	movi	r3,22
  802ca8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  802cac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  802cb0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  802cb4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802cb8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  802cbc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  802cc0:	28800017 	ldw	r2,0(r5)
  802cc4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  802cc8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  802ccc:	0005883a 	mov	r2,zero
  802cd0:	f800283a 	ret

00802cd4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  802cd4:	defffb04 	addi	sp,sp,-20
  802cd8:	dcc00315 	stw	r19,12(sp)
  802cdc:	dc800215 	stw	r18,8(sp)
  802ce0:	dc400115 	stw	r17,4(sp)
  802ce4:	dc000015 	stw	r16,0(sp)
  802ce8:	dfc00415 	stw	ra,16(sp)
  802cec:	2027883a 	mov	r19,r4
  802cf0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  802cf4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  802cf8:	08023380 	call	802338 <strlen>
  802cfc:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  802d00:	84400726 	beq	r16,r17,802d20 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  802d04:	81000217 	ldw	r4,8(r16)
  802d08:	900d883a 	mov	r6,r18
  802d0c:	980b883a 	mov	r5,r19
  802d10:	08033140 	call	803314 <memcmp>
  802d14:	10000426 	beq	r2,zero,802d28 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  802d18:	84000017 	ldw	r16,0(r16)
  802d1c:	003ff806 	br	802d00 <__alt_data_end+0xff802d00>
  }
  
  /* No match found */
  
  return NULL;
  802d20:	0005883a 	mov	r2,zero
  802d24:	00000106 	br	802d2c <alt_find_dev+0x58>
  802d28:	8005883a 	mov	r2,r16
}
  802d2c:	dfc00417 	ldw	ra,16(sp)
  802d30:	dcc00317 	ldw	r19,12(sp)
  802d34:	dc800217 	ldw	r18,8(sp)
  802d38:	dc400117 	ldw	r17,4(sp)
  802d3c:	dc000017 	ldw	r16,0(sp)
  802d40:	dec00504 	addi	sp,sp,20
  802d44:	f800283a 	ret

00802d48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802d48:	f800283a 	ret

00802d4c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  802d4c:	0802de81 	jmpi	802de8 <alt_iic_isr_register>

00802d50 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d50:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d54:	00bfff84 	movi	r2,-2
  802d58:	3084703a 	and	r2,r6,r2
  802d5c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  802d60:	00802034 	movhi	r2,128
  802d64:	10909f04 	addi	r2,r2,17020
  802d68:	01000044 	movi	r4,1
  802d6c:	10c00017 	ldw	r3,0(r2)
  802d70:	214a983a 	sll	r5,r4,r5
  802d74:	28cab03a 	or	r5,r5,r3
  802d78:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802d7c:	10800017 	ldw	r2,0(r2)
  802d80:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802d84:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  802d88:	0005883a 	mov	r2,zero
  802d8c:	f800283a 	ret

00802d90 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d90:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d94:	00bfff84 	movi	r2,-2
  802d98:	3084703a 	and	r2,r6,r2
  802d9c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  802da0:	00802034 	movhi	r2,128
  802da4:	10909f04 	addi	r2,r2,17020
  802da8:	013fff84 	movi	r4,-2
  802dac:	10c00017 	ldw	r3,0(r2)
  802db0:	214a183a 	rol	r5,r4,r5
  802db4:	28ca703a 	and	r5,r5,r3
  802db8:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802dbc:	10800017 	ldw	r2,0(r2)
  802dc0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802dc4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  802dc8:	0005883a 	mov	r2,zero
  802dcc:	f800283a 	ret

00802dd0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  802dd0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  802dd4:	00800044 	movi	r2,1
  802dd8:	1144983a 	sll	r2,r2,r5
  802ddc:	10c4703a 	and	r2,r2,r3
}
  802de0:	1004c03a 	cmpne	r2,r2,zero
  802de4:	f800283a 	ret

00802de8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  802de8:	00c007c4 	movi	r3,31
  802dec:	19401616 	blt	r3,r5,802e48 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  802df0:	defffe04 	addi	sp,sp,-8
  802df4:	dfc00115 	stw	ra,4(sp)
  802df8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802dfc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e00:	00ffff84 	movi	r3,-2
  802e04:	80c6703a 	and	r3,r16,r3
  802e08:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  802e0c:	280490fa 	slli	r2,r5,3
  802e10:	00c02034 	movhi	r3,128
  802e14:	18d0a104 	addi	r3,r3,17028
  802e18:	1885883a 	add	r2,r3,r2
  802e1c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  802e20:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  802e24:	30000226 	beq	r6,zero,802e30 <alt_iic_isr_register+0x48>
  802e28:	0802d500 	call	802d50 <alt_ic_irq_enable>
  802e2c:	00000106 	br	802e34 <alt_iic_isr_register+0x4c>
  802e30:	0802d900 	call	802d90 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e34:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  802e38:	dfc00117 	ldw	ra,4(sp)
  802e3c:	dc000017 	ldw	r16,0(sp)
  802e40:	dec00204 	addi	sp,sp,8
  802e44:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  802e48:	00bffa84 	movi	r2,-22
  802e4c:	f800283a 	ret

00802e50 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  802e50:	defffd04 	addi	sp,sp,-12
  802e54:	dc400115 	stw	r17,4(sp)
  802e58:	2023883a 	mov	r17,r4
  802e5c:	2809883a 	mov	r4,r5
  802e60:	300b883a 	mov	r5,r6
{
  int old;

  old = open (name, flags, mode);
  802e64:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  802e68:	dfc00215 	stw	ra,8(sp)
  802e6c:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
  802e70:	0802f4c0 	call	802f4c <open>

  if (old >= 0)
  802e74:	10001316 	blt	r2,zero,802ec4 <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
  802e78:	01400304 	movi	r5,12
  802e7c:	1009883a 	mov	r4,r2
  802e80:	1021883a 	mov	r16,r2
  802e84:	080221c0 	call	80221c <__mulsi3>
  802e88:	00c02034 	movhi	r3,128
  802e8c:	18ce5504 	addi	r3,r3,14676
  802e90:	1885883a 	add	r2,r3,r2
  802e94:	10c00017 	ldw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  802e98:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  802e9c:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
  802ea0:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802ea4:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  802ea8:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802eac:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
  802eb0:	dfc00217 	ldw	ra,8(sp)
  802eb4:	dc400117 	ldw	r17,4(sp)
  802eb8:	dc000017 	ldw	r16,0(sp)
  802ebc:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  802ec0:	08031041 	jmpi	803104 <alt_release_fd>
  }
} 
  802ec4:	dfc00217 	ldw	ra,8(sp)
  802ec8:	dc400117 	ldw	r17,4(sp)
  802ecc:	dc000017 	ldw	r16,0(sp)
  802ed0:	dec00304 	addi	sp,sp,12
  802ed4:	f800283a 	ret

00802ed8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802ed8:	defffb04 	addi	sp,sp,-20
  802edc:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802ee0:	04002034 	movhi	r16,128
  802ee4:	840e5804 	addi	r16,r16,14688
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802ee8:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802eec:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802ef0:	dcc00315 	stw	r19,12(sp)
  802ef4:	dc800215 	stw	r18,8(sp)
  802ef8:	2827883a 	mov	r19,r5
  802efc:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802f00:	200b883a 	mov	r5,r4
  802f04:	880d883a 	mov	r6,r17
  802f08:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802f0c:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802f10:	0802e500 	call	802e50 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802f14:	980b883a 	mov	r5,r19
  802f18:	813ffd04 	addi	r4,r16,-12
  802f1c:	000d883a 	mov	r6,zero
  802f20:	0802e500 	call	802e50 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802f24:	880d883a 	mov	r6,r17
  802f28:	900b883a 	mov	r5,r18
  802f2c:	81000304 	addi	r4,r16,12
}  
  802f30:	dfc00417 	ldw	ra,16(sp)
  802f34:	dcc00317 	ldw	r19,12(sp)
  802f38:	dc800217 	ldw	r18,8(sp)
  802f3c:	dc400117 	ldw	r17,4(sp)
  802f40:	dc000017 	ldw	r16,0(sp)
  802f44:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802f48:	0802e501 	jmpi	802e50 <alt_open_fd.constprop.0>

00802f4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  802f4c:	defff504 	addi	sp,sp,-44
  802f50:	dd000515 	stw	r20,20(sp)
  802f54:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  802f58:	01402034 	movhi	r5,128
  802f5c:	294ec604 	addi	r5,r5,15128
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  802f60:	dd400615 	stw	r21,24(sp)
  802f64:	dcc00415 	stw	r19,16(sp)
  802f68:	dfc00a15 	stw	ra,40(sp)
  802f6c:	df000915 	stw	fp,36(sp)
  802f70:	ddc00815 	stw	r23,32(sp)
  802f74:	dd800715 	stw	r22,28(sp)
  802f78:	dc800315 	stw	r18,12(sp)
  802f7c:	dc400215 	stw	r17,8(sp)
  802f80:	dc000115 	stw	r16,4(sp)
  802f84:	2027883a 	mov	r19,r4
  802f88:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  802f8c:	0802cd40 	call	802cd4 <alt_find_dev>
  802f90:	1000061e 	bne	r2,zero,802fac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  802f94:	9809883a 	mov	r4,r19
  802f98:	08031680 	call	803168 <alt_find_file>
  802f9c:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  802fa0:	10004526 	beq	r2,zero,8030b8 <open+0x16c>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
  802fa4:	04800044 	movi	r18,1
  802fa8:	00000206 	br	802fb4 <open+0x68>
  802fac:	1023883a 	mov	r17,r2
  802fb0:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  802fb4:	8809883a 	mov	r4,r17
  802fb8:	08032140 	call	803214 <alt_get_fd>
  802fbc:	1021883a 	mov	r16,r2
  802fc0:	10004016 	blt	r2,zero,8030c4 <open+0x178>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  802fc4:	01400304 	movi	r5,12
  802fc8:	1009883a 	mov	r4,r2
  802fcc:	05802034 	movhi	r22,128
  802fd0:	080221c0 	call	80221c <__mulsi3>
  802fd4:	b58e5504 	addi	r22,r22,14676
  802fd8:	b0af883a 	add	r23,r22,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  802fdc:	00900034 	movhi	r2,16384
  802fe0:	10bfffc4 	addi	r2,r2,-1
  802fe4:	a084703a 	and	r2,r20,r2
  802fe8:	b8c00204 	addi	r3,r23,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  802fec:	90000526 	beq	r18,zero,803004 <open+0xb8>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  802ff0:	18800015 	stw	r2,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  802ff4:	88800317 	ldw	r2,12(r17)
  802ff8:	1000191e 	bne	r2,zero,803060 <open+0x114>
  802ffc:	8005883a 	mov	r2,r16
  803000:	00003406 	br	8030d4 <open+0x188>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803004:	10900034 	orhi	r2,r2,16384
  803008:	18800015 	stw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80300c:	00802034 	movhi	r2,128
  803010:	108ec504 	addi	r2,r2,15124
  803014:	10c00017 	ldw	r3,0(r2)
  803018:	b025883a 	mov	r18,r22
  80301c:	0039883a 	mov	fp,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803020:	8009883a 	mov	r4,r16
  803024:	01400304 	movi	r5,12
  803028:	d8c00015 	stw	r3,0(sp)
  80302c:	080221c0 	call	80221c <__mulsi3>
  803030:	b085883a 	add	r2,r22,r2
  803034:	91000017 	ldw	r4,0(r18)
  803038:	10800017 	ldw	r2,0(r2)
  80303c:	d8c00017 	ldw	r3,0(sp)
  803040:	2080031e 	bne	r4,r2,803050 <open+0x104>
  803044:	90800217 	ldw	r2,8(r18)
  803048:	1000010e 	bge	r2,zero,803050 <open+0x104>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80304c:	95c01f1e 	bne	r18,r23,8030cc <open+0x180>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803050:	e7000044 	addi	fp,fp,1
  803054:	94800304 	addi	r18,r18,12
  803058:	1f3ff12e 	bgeu	r3,fp,803020 <__alt_data_end+0xff803020>
  80305c:	003fe506 	br	802ff4 <__alt_data_end+0xff802ff4>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803060:	a80f883a 	mov	r7,r21
  803064:	a00d883a 	mov	r6,r20
  803068:	980b883a 	mov	r5,r19
  80306c:	b809883a 	mov	r4,r23
  803070:	103ee83a 	callr	r2
  803074:	1023883a 	mov	r17,r2
  803078:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80307c:	8800150e 	bge	r17,zero,8030d4 <open+0x188>
  {
    alt_release_fd (index);  
  803080:	8009883a 	mov	r4,r16
  803084:	08031040 	call	803104 <alt_release_fd>
  803088:	00802034 	movhi	r2,128
  80308c:	108eca04 	addi	r2,r2,15144
  803090:	10800017 	ldw	r2,0(r2)
  803094:	10000226 	beq	r2,zero,8030a0 <open+0x154>
  803098:	103ee83a 	callr	r2
  80309c:	00000206 	br	8030a8 <open+0x15c>
  8030a0:	00802034 	movhi	r2,128
  8030a4:	10909b04 	addi	r2,r2,17004
    ALT_ERRNO = -status;
  8030a8:	0463c83a 	sub	r17,zero,r17
  8030ac:	14400015 	stw	r17,0(r2)
    return -1;
  8030b0:	00bfffc4 	movi	r2,-1
  8030b4:	00000706 	br	8030d4 <open+0x188>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8030b8:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8030bc:	043fffc4 	movi	r16,-1
  8030c0:	003fef06 	br	803080 <__alt_data_end+0xff803080>
  8030c4:	1023883a 	mov	r17,r2
  8030c8:	003fed06 	br	803080 <__alt_data_end+0xff803080>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8030cc:	047ffcc4 	movi	r17,-13
  8030d0:	003feb06 	br	803080 <__alt_data_end+0xff803080>
  }
  
  /* return the reference upon success */

  return index;
}
  8030d4:	dfc00a17 	ldw	ra,40(sp)
  8030d8:	df000917 	ldw	fp,36(sp)
  8030dc:	ddc00817 	ldw	r23,32(sp)
  8030e0:	dd800717 	ldw	r22,28(sp)
  8030e4:	dd400617 	ldw	r21,24(sp)
  8030e8:	dd000517 	ldw	r20,20(sp)
  8030ec:	dcc00417 	ldw	r19,16(sp)
  8030f0:	dc800317 	ldw	r18,12(sp)
  8030f4:	dc400217 	ldw	r17,8(sp)
  8030f8:	dc000117 	ldw	r16,4(sp)
  8030fc:	dec00b04 	addi	sp,sp,44
  803100:	f800283a 	ret

00803104 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  803104:	00c00084 	movi	r3,2
  803108:	1900140e 	bge	r3,r4,80315c <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80310c:	defffd04 	addi	sp,sp,-12
  803110:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  803114:	01400304 	movi	r5,12
  803118:	04002034 	movhi	r16,128
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80311c:	dfc00215 	stw	ra,8(sp)
  803120:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  803124:	840e5504 	addi	r16,r16,14676
  803128:	2023883a 	mov	r17,r4
  80312c:	080221c0 	call	80221c <__mulsi3>
  803130:	8085883a 	add	r2,r16,r2
    alt_fd_list[fd].dev      = 0;
  803134:	01400304 	movi	r5,12
  803138:	8809883a 	mov	r4,r17

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80313c:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  803140:	080221c0 	call	80221c <__mulsi3>
  803144:	8085883a 	add	r2,r16,r2
  803148:	10000015 	stw	zero,0(r2)
  }
}
  80314c:	dfc00217 	ldw	ra,8(sp)
  803150:	dc400117 	ldw	r17,4(sp)
  803154:	dc000017 	ldw	r16,0(sp)
  803158:	dec00304 	addi	sp,sp,12
  80315c:	f800283a 	ret

00803160 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  803160:	000170fa 	wrctl	ienable,zero
  803164:	f800283a 	ret

00803168 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803168:	00802034 	movhi	r2,128
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80316c:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803170:	108ec804 	addi	r2,r2,15136
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803174:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803178:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80317c:	dd000415 	stw	r20,16(sp)
  803180:	dcc00315 	stw	r19,12(sp)
  803184:	dc800215 	stw	r18,8(sp)
  803188:	dfc00515 	stw	ra,20(sp)
  80318c:	dc400115 	stw	r17,4(sp)
  803190:	2027883a 	mov	r19,r4
  803194:	1025883a 	mov	r18,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  803198:	05000bc4 	movi	r20,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80319c:	84801226 	beq	r16,r18,8031e8 <alt_find_file+0x80>
  {
    len = strlen(next->name);
  8031a0:	84400217 	ldw	r17,8(r16)
  8031a4:	8809883a 	mov	r4,r17
  8031a8:	08023380 	call	802338 <strlen>
    
    if (next->name[len-1] == '/')
  8031ac:	8887883a 	add	r3,r17,r2
  8031b0:	18ffffc7 	ldb	r3,-1(r3)
  8031b4:	1d00011e 	bne	r3,r20,8031bc <alt_find_file+0x54>
    {
      len -= 1;
  8031b8:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8031bc:	9887883a 	add	r3,r19,r2
  8031c0:	18c00007 	ldb	r3,0(r3)
  8031c4:	1d000126 	beq	r3,r20,8031cc <alt_find_file+0x64>
  8031c8:	1800051e 	bne	r3,zero,8031e0 <alt_find_file+0x78>
        !memcmp (next->name, name, len))
  8031cc:	100d883a 	mov	r6,r2
  8031d0:	980b883a 	mov	r5,r19
  8031d4:	8809883a 	mov	r4,r17
  8031d8:	08033140 	call	803314 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8031dc:	10000426 	beq	r2,zero,8031f0 <alt_find_file+0x88>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8031e0:	84000017 	ldw	r16,0(r16)
  8031e4:	003fed06 	br	80319c <__alt_data_end+0xff80319c>
  }
  
  /* No match found */
  
  return NULL;     
  8031e8:	0005883a 	mov	r2,zero
  8031ec:	00000106 	br	8031f4 <alt_find_file+0x8c>
  8031f0:	8005883a 	mov	r2,r16
}
  8031f4:	dfc00517 	ldw	ra,20(sp)
  8031f8:	dd000417 	ldw	r20,16(sp)
  8031fc:	dcc00317 	ldw	r19,12(sp)
  803200:	dc800217 	ldw	r18,8(sp)
  803204:	dc400117 	ldw	r17,4(sp)
  803208:	dc000017 	ldw	r16,0(sp)
  80320c:	dec00604 	addi	sp,sp,24
  803210:	f800283a 	ret

00803214 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803214:	defffb04 	addi	sp,sp,-20
  803218:	dcc00315 	stw	r19,12(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
  80321c:	04c02034 	movhi	r19,128
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803220:	dc800215 	stw	r18,8(sp)
  803224:	dc400115 	stw	r17,4(sp)
  803228:	dc000015 	stw	r16,0(sp)
  80322c:	dfc00415 	stw	ra,16(sp)
  803230:	2025883a 	mov	r18,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803234:	0021883a 	mov	r16,zero
  {
    if (!alt_fd_list[i].dev)
  803238:	9cce5504 	addi	r19,r19,14676
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80323c:	04400804 	movi	r17,32
  {
    if (!alt_fd_list[i].dev)
  803240:	01400304 	movi	r5,12
  803244:	8009883a 	mov	r4,r16
  803248:	080221c0 	call	80221c <__mulsi3>
  80324c:	9885883a 	add	r2,r19,r2
  803250:	10c00017 	ldw	r3,0(r2)
  803254:	1800071e 	bne	r3,zero,803274 <alt_get_fd+0x60>
    {
      alt_fd_list[i].dev = dev;
  803258:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
  80325c:	00802034 	movhi	r2,128
  803260:	108ec504 	addi	r2,r2,15124
  803264:	10c00017 	ldw	r3,0(r2)
  803268:	1c00050e 	bge	r3,r16,803280 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80326c:	14000015 	stw	r16,0(r2)
  803270:	00000306 	br	803280 <alt_get_fd+0x6c>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803274:	84000044 	addi	r16,r16,1
  803278:	847ff11e 	bne	r16,r17,803240 <__alt_data_end+0xff803240>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
  80327c:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  803280:	8005883a 	mov	r2,r16
  803284:	dfc00417 	ldw	ra,16(sp)
  803288:	dcc00317 	ldw	r19,12(sp)
  80328c:	dc800217 	ldw	r18,8(sp)
  803290:	dc400117 	ldw	r17,4(sp)
  803294:	dc000017 	ldw	r16,0(sp)
  803298:	dec00504 	addi	sp,sp,20
  80329c:	f800283a 	ret

008032a0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  8032a0:	213ffe84 	addi	r4,r4,-6
  8032a4:	008003c4 	movi	r2,15
  8032a8:	11001636 	bltu	r2,r4,803304 <alt_exception_cause_generated_bad_addr+0x64>
  8032ac:	200890ba 	slli	r4,r4,2
  8032b0:	00802034 	movhi	r2,128
  8032b4:	108cb104 	addi	r2,r2,12996
  8032b8:	2089883a 	add	r4,r4,r2
  8032bc:	20800017 	ldw	r2,0(r4)
  8032c0:	1000683a 	jmp	r2
  8032c4:	0080330c 	andi	r2,zero,204
  8032c8:	0080330c 	andi	r2,zero,204
  8032cc:	00803304 	movi	r2,204
  8032d0:	00803304 	movi	r2,204
  8032d4:	00803304 	movi	r2,204
  8032d8:	0080330c 	andi	r2,zero,204
  8032dc:	00803304 	movi	r2,204
  8032e0:	00803304 	movi	r2,204
  8032e4:	0080330c 	andi	r2,zero,204
  8032e8:	0080330c 	andi	r2,zero,204
  8032ec:	00803304 	movi	r2,204
  8032f0:	0080330c 	andi	r2,zero,204
  8032f4:	00803304 	movi	r2,204
  8032f8:	00803304 	movi	r2,204
  8032fc:	00803304 	movi	r2,204
  803300:	0080330c 	andi	r2,zero,204
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803304:	0005883a 	mov	r2,zero
  803308:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80330c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  803310:	f800283a 	ret

00803314 <memcmp>:
  803314:	218d883a 	add	r6,r4,r6
  803318:	21800826 	beq	r4,r6,80333c <memcmp+0x28>
  80331c:	20800003 	ldbu	r2,0(r4)
  803320:	28c00003 	ldbu	r3,0(r5)
  803324:	10c00226 	beq	r2,r3,803330 <memcmp+0x1c>
  803328:	10c5c83a 	sub	r2,r2,r3
  80332c:	f800283a 	ret
  803330:	21000044 	addi	r4,r4,1
  803334:	29400044 	addi	r5,r5,1
  803338:	003ff706 	br	803318 <__alt_data_end+0xff803318>
  80333c:	0005883a 	mov	r2,zero
  803340:	f800283a 	ret
