
C_eng_job.elf:     file format elf32-littlenios2
C_eng_job.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800230

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004850 memsz 0x00004850 flags r-x
    LOAD off    0x00005870 vaddr 0x00804870 paddr 0x00804f98 align 2**12
         filesz 0x00000728 memsz 0x00000728 flags rw-
    LOAD off    0x000066c0 vaddr 0x008056c0 paddr 0x008056c0 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000045b8  00800230  00800230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  008047e8  008047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000728  00804870  00804f98  00005870  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  008056c0  008056c0  000066c0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller 00000000  008057ec  008057ec  00005f98  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000728  00000000  00000000  00005fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000bbd0  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003aca  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000042d3  00000000  00000000  00015d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001214  00000000  00000000  0001a058  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002535  00000000  00000000  0001b26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ae4  00000000  00000000  0001d7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001f288  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000378  00000000  00000000  0001f298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000216f1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  000216f4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000216fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000216fe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000216ff  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0002170a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00021715  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000017  00000000  00000000  00021720  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  00021737  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c6c2  00000000  00000000  0002177d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800230 l    d  .text	00000000 .text
008047e8 l    d  .rodata	00000000 .rodata
00804870 l    d  .rwdata	00000000 .rwdata
008056c0 l    d  .bss	00000000 .bss
008057ec l    d  .SDRAM_Controller	00000000 .SDRAM_Controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../C_eng_job_bsp//obj/HAL/src/crt0.o
00800268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00804c70 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802390 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
00802b00 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00804f70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00802d08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00802e58 l     F .text	00000038 alt_dev_reg
00804d50 l     O .rwdata	0000002c jtag_uart_0
00804d7c l     O .rwdata	0000003c modular_adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00803350 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_close.c
008038bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803a04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00803a30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00803ea4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00804004 l     F .text	00000050 alt_get_errno
00804054 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008056e8 g     O .bss	00000004 alt_instruction_exception_handler
00802308 g     F .text	0000001c putchar
008035f0 g     F .text	00000050 adc_stop
00802bec g     F .text	0000006c alt_main
008056ec g     O .bss	00000100 alt_irq
00804f98 g       *ABS*	00000000 __flash_rwdata_start
00800ee8 g     F .text	0000010c read_accelerometerY
008057ec g       *ABS*	00000000 __alt_heap_start
008022b4 g     F .text	0000004c printf
008056c4 g     O .bss	00000004 j
0080134c g     F .text	0000010c print_char
0080432c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000000c __reset
008037b4 g     F .text	00000048 adc_interrupt_disable
00800020 g       *ABS*	00000000 __flash_exceptions_start
008056d4 g     O .bss	00000004 errno
00800ddc g     F .text	0000010c read_accelerometerX
008034a4 g     F .text	00000074 altera_modular_adc_init
008056dc g     O .bss	00000004 alt_argv
0080cf60 g       *ABS*	00000000 _gp
00800b18 g     F .text	00000078 read_temp
00804de0 g     O .rwdata	00000180 alt_fd_list
00802300 g     F .text	00000008 _putchar_r
00803b24 g     F .text	00000090 alt_find_dev
00801f94 g     F .text	00000028 memcpy
00801458 g     F .text	000000a8 print_str
008036b8 g     F .text	0000003c adc_set_mode_run_continuously
00803f88 g     F .text	0000007c alt_io_redirect
00804538 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00802fd4 g     F .text	000000ec altera_avalon_jtag_uart_read
00801f6c g     F .text	00000014 malloc
00802278 g     F .text	0000003c _printf_r
00801e70 g     F .text	00000064 .hidden __udivsi3
00802324 g     F .text	00000050 _sbrk_r
008011ac g     F .text	000000d0 print_hline
00800c08 g     F .text	00000034 config_time_base
00804f74 g     O .rwdata	00000008 altera_modular_adc_list
00804f8c g     O .rwdata	00000004 alt_max_fd
00804870 g     O .rwdata	00000400 font8x8_basic
00804f62 g     O .rwdata	00000004 spi_command_rx
00804f68 g     O .rwdata	00000004 _global_impure_ptr
008057ec g       *ABS*	00000000 __bss_end
00803db4 g     F .text	000000f0 alt_iic_isr_register
00803880 g     F .text	0000003c adc_wait_for_interrupt
00801100 g     F .text	000000ac print_pix
00803d68 g     F .text	0000004c alt_ic_irq_enabled
008056e4 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
00804db8 g     O .rwdata	00000028 alt_dev_null
00803678 g     F .text	00000040 adc_set_mode_run_once
008039e4 g     F .text	00000020 alt_dcache_flush_all
00801f54 g     F .text	00000018 calloc
00804f98 g       *ABS*	00000000 __ram_rwdata_end
00804f84 g     O .rwdata	00000008 alt_dev_list
0080127c g     F .text	000000d0 print_vline
00802d58 g     F .text	00000100 write
00802a50 g     F .text	00000058 _putc_r
00804870 g       *ABS*	00000000 __ram_rodata_end
00803640 g     F .text	00000038 adc_start
00801ed4 g     F .text	00000058 .hidden __umodsi3
008057ec g       *ABS*	00000000 end
008056c0 g     O .bss	00000004 i
008001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
008030c0 g     F .text	00000094 altera_avalon_jtag_uart_write
008023fc g     F .text	0000052c ___vfprintf_internal_r
0080203c g     F .text	000000e4 _free_r
00800c3c g     F .text	00000124 init_measurement
00804624 g     F .text	00000190 __call_exitprocs
00800230 g     F .text	0000003c _start
00800d60 g     F .text	0000007c update_graph
00803154 g     F .text	000001fc alt_avalon_spi_command
00802ec8 g     F .text	0000004c alt_sys_init
00801f2c g     F .text	00000028 .hidden __mulsi3
00804870 g       *ABS*	00000000 __ram_rwdata_start
008047e8 g       *ABS*	00000000 __ram_rodata_start
00802f14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00804464 g     F .text	000000d4 alt_get_fd
008045f4 g     F .text	00000030 memcmp
008057ec g       *ABS*	00000000 __alt_stack_base
00801ac0 g     F .text	00000068 queue_dequeue
00803770 g     F .text	00000044 adc_interrupt_enable
00804350 g     F .text	00000114 alt_find_file
00803a80 g     F .text	000000a4 alt_dev_llist_insert
00802c58 g     F .text	000000b0 sbrk
00801fdc g     F .text	00000060 _calloc_r
00802944 g     F .text	000000b8 __sfvwrite_small_dev
008056c0 g       *ABS*	00000000 __bss_start
00801fbc g     F .text	00000020 memset
0080026c g     F .text	000008ac main
008056e0 g     O .bss	00000004 alt_envp
00802f74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008056c8 g     O .bss	00000003 accel_data
008033f8 g     F .text	000000ac alt_adc_word_read
01000000 g       *ABS*	00000000 __alt_heap_limit
00802120 g     F .text	00000158 _malloc_r
00804f90 g     O .rwdata	00000004 alt_errno
008029fc g     F .text	00000054 putc
00801d78 g     F .text	00000084 .hidden __divsi3
008047e8 g       *ABS*	00000000 __flash_rodata_start
008018ac g     F .text	00000064 read_pixel_ram_int
00802e90 g     F .text	00000038 alt_irq_init
008042a8 g     F .text	00000084 alt_release_fd
00802aa8 g     F .text	00000058 _write_r
00804f6c g     O .rwdata	00000004 _impure_ptr
008056d8 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller
00800020 g       .exceptions	00000000 alt_irq_entry
00804f7c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00803bd4 g     F .text	00000050 alt_ic_isr_register
00804f98 g       *ABS*	00000000 _edata
008057ec g       *ABS*	00000000 _end
00800b90 g     F .text	00000078 read_light
00803840 g     F .text	00000040 adc_interrupt_asserted
00801500 g     F .text	00000158 print_symmetry_dots_circle
00800230 g       *ABS*	00000000 __ram_exceptions_end
00803cc4 g     F .text	000000a4 alt_ic_irq_disable
008037fc g     F .text	00000044 adc_clear_interrupt_status
008045d4 g     F .text	00000020 exit
00801dfc g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800ff4 g     F .text	0000010c read_accelerometerZ
008035b0 g     F .text	00000040 altera_modular_adc_open
008047b4 g     F .text	00000034 _exit
00801bb0 g     F .text	000001c8 queue_print_screen
00802374 g     F .text	0000001c strlen
00804f60 g     O .rwdata	00000002 spi_command_tx
00804148 g     F .text	00000160 open
008056cc g     O .bss	00000004 __malloc_sbrk_start
008036f4 g     F .text	0000007c adc_recalibrate
00803bb4 g     F .text	00000020 alt_icache_flush_all
00804f94 g     O .rwdata	00000004 alt_priority_mask
008056d0 g     O .bss	00000004 __malloc_free_list
00803c24 g     F .text	000000a0 alt_ic_irq_enable
00801658 g     F .text	0000015c print_empty_circle
00802928 g     F .text	0000001c __vfprintf_internal
00801828 g     F .text	00000084 clear_screen
00801b28 g     F .text	00000088 queue_print
0080390c g     F .text	000000d8 close
00801910 g     F .text	00000054 queue_init
00801964 g     F .text	0000015c queue_enqueue
008017b4 g     F .text	00000074 print_circle
00802b68 g     F .text	00000084 alt_load
00803518 g     F .text	00000098 alt_adc_register_callback
00801f80 g     F .text	00000014 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08408c14 	ori	at,at,560
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802034 	movhi	r2,128
  800140:	1095bb04 	addi	r2,r2,22252
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	1095bb04 	addi	r2,r2,22252
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  8001e4:	00bfffc4 	movi	r2,-1
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  8001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f0:	d0a1e217 	ldw	r2,-30840(gp)
  8001f4:	10000726 	beq	r2,zero,800214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  8001f8:	d0a1e217 	ldw	r2,-30840(gp)
  8001fc:	e0fffd17 	ldw	r3,-12(fp)
  800200:	e1bffe17 	ldw	r6,-8(fp)
  800204:	e17fff17 	ldw	r5,-4(fp)
  800208:	1809883a 	mov	r4,r3
  80020c:	103ee83a 	callr	r2
  800210:	00000206 	br	80021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800218:	0005883a 	mov	r2,zero
}
  80021c:	e037883a 	mov	sp,fp
  800220:	dfc00117 	ldw	ra,4(sp)
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00204 	addi	sp,sp,8
  80022c:	f800283a 	ret

Disassembly of section .text:

00800230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800230:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800238:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80023c:	d6b3d814 	ori	gp,gp,53088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800240:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800244:	1095b014 	ori	r2,r2,22208

    movhi r3, %hi(__bss_end)
  800248:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80024c:	18d5fb14 	ori	r3,r3,22508

    beq r2, r3, 1f
  800250:	10c00326 	beq	r2,r3,800260 <_start+0x30>

0:
    stw zero, (r2)
  800254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80025c:	10fffd36 	bltu	r2,r3,800254 <__alt_data_end+0xff800254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800260:	0802b680 	call	802b68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800264:	0802bec0 	call	802bec <alt_main>

00800268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800268:	003fff06 	br	800268 <__alt_data_end+0xff800268>

0080026c <main>:


};*/

int main()
{
  80026c:	defb9704 	addi	sp,sp,-4516
  800270:	dfc46815 	stw	ra,4512(sp)
  800274:	df046715 	stw	fp,4508(sp)
  800278:	dc446615 	stw	r17,4504(sp)
  80027c:	dc046515 	stw	r16,4500(sp)
  800280:	df046704 	addi	fp,sp,4508
	enum sampling_state state = fast_sampling;
  800284:	e03b9915 	stw	zero,-4508(fp)
	QUEUE q1,q2,q3,q4,q5;
	QUEUE* q11 = &q1;
  800288:	e0bba304 	addi	r2,fp,-4468
  80028c:	e0bb9e15 	stw	r2,-4488(fp)
	QUEUE* q22 = &q2;
  800290:	e0bbd804 	addi	r2,fp,-4256
  800294:	e0bb9f15 	stw	r2,-4484(fp)
	QUEUE* q33 = &q3;
  800298:	e0bc0d04 	addi	r2,fp,-4044
  80029c:	e0bba015 	stw	r2,-4480(fp)
	QUEUE* q44 = &q4;
  8002a0:	e0bc4204 	addi	r2,fp,-3832
  8002a4:	e0bba115 	stw	r2,-4476(fp)
	QUEUE* q55 = &q5;
  8002a8:	e0bc7704 	addi	r2,fp,-3620
  8002ac:	e0bba215 	stw	r2,-4472(fp)

	SENSOR_OBJECT accelorometerX =
  8002b0:	009958f4 	movhi	r2,25955
  8002b4:	1098d044 	addi	r2,r2,25409
  8002b8:	e0bcac15 	stw	r2,-3408(fp)
  8002bc:	009bdcb4 	movhi	r2,28530
  8002c0:	10995b04 	addi	r2,r2,25964
  8002c4:	e0bcad15 	stw	r2,-3404(fp)
  8002c8:	009e0834 	movhi	r2,30752
  8002cc:	108b9b44 	addi	r2,r2,11885
  8002d0:	e0bcae15 	stw	r2,-3400(fp)
  8002d4:	e03caf15 	stw	zero,-3396(fp)
  8002d8:	e0bcb004 	addi	r2,fp,-3392
  8002dc:	00c01004 	movi	r3,64
  8002e0:	180d883a 	mov	r6,r3
  8002e4:	000b883a 	mov	r5,zero
  8002e8:	1009883a 	mov	r4,r2
  8002ec:	0801fbc0 	call	801fbc <memset>
  8002f0:	00800784 	movi	r2,30
  8002f4:	e0bcc015 	stw	r2,-3328(fp)
  8002f8:	00800c84 	movi	r2,50
  8002fc:	e0bcc115 	stw	r2,-3324(fp)
  800300:	00800044 	movi	r2,1
  800304:	e0bcc215 	stw	r2,-3320(fp)
  800308:	00800044 	movi	r2,1
  80030c:	e0bcc315 	stw	r2,-3316(fp)
  800310:	00800c84 	movi	r2,50
  800314:	e0bcc415 	stw	r2,-3312(fp)
  800318:	00800104 	movi	r2,4
  80031c:	e0bcc515 	stw	r2,-3308(fp)
  800320:	e0bcc604 	addi	r2,fp,-3304
  800324:	e0fba304 	addi	r3,fp,-4468
  800328:	01003504 	movi	r4,212
  80032c:	200d883a 	mov	r6,r4
  800330:	180b883a 	mov	r5,r3
  800334:	1009883a 	mov	r4,r2
  800338:	0801f940 	call	801f94 <memcpy>
  80033c:	e0bb9e17 	ldw	r2,-4488(fp)
  800340:	e0bcfb15 	stw	r2,-3092(fp)
  800344:	00802034 	movhi	r2,128
  800348:	10830204 	addi	r2,r2,3080
  80034c:	e0bcfc15 	stw	r2,-3088(fp)
  800350:	00802034 	movhi	r2,128
  800354:	10830f04 	addi	r2,r2,3132
  800358:	e0bcfd15 	stw	r2,-3084(fp)
  80035c:	00802034 	movhi	r2,128
  800360:	10837704 	addi	r2,r2,3548
  800364:	e0bcfe15 	stw	r2,-3080(fp)
  800368:	00802034 	movhi	r2,128
  80036c:	10835804 	addi	r2,r2,3424
  800370:	e0bcff15 	stw	r2,-3076(fp)
  800374:	e0bcac04 	addi	r2,fp,-3408
  800378:	e0bd0015 	stw	r2,-3072(fp)
			read_accelerometerX,
			update_graph,
			&accelorometerX
		};

	SENSOR_OBJECT accelorometerY =
  80037c:	009958f4 	movhi	r2,25955
  800380:	1098d044 	addi	r2,r2,25409
  800384:	e0bd0115 	stw	r2,-3068(fp)
  800388:	009bdcb4 	movhi	r2,28530
  80038c:	10995b04 	addi	r2,r2,25964
  800390:	e0bd0215 	stw	r2,-3064(fp)
  800394:	009e4834 	movhi	r2,31008
  800398:	108b9b44 	addi	r2,r2,11885
  80039c:	e0bd0315 	stw	r2,-3060(fp)
  8003a0:	e03d0415 	stw	zero,-3056(fp)
  8003a4:	e0bd0504 	addi	r2,fp,-3052
  8003a8:	00c01004 	movi	r3,64
  8003ac:	180d883a 	mov	r6,r3
  8003b0:	000b883a 	mov	r5,zero
  8003b4:	1009883a 	mov	r4,r2
  8003b8:	0801fbc0 	call	801fbc <memset>
  8003bc:	00802204 	movi	r2,136
  8003c0:	e0bd1515 	stw	r2,-2988(fp)
  8003c4:	00800c84 	movi	r2,50
  8003c8:	e0bd1615 	stw	r2,-2984(fp)
  8003cc:	00800044 	movi	r2,1
  8003d0:	e0bd1715 	stw	r2,-2980(fp)
  8003d4:	00800044 	movi	r2,1
  8003d8:	e0bd1815 	stw	r2,-2976(fp)
  8003dc:	00800504 	movi	r2,20
  8003e0:	e0bd1915 	stw	r2,-2972(fp)
  8003e4:	00800104 	movi	r2,4
  8003e8:	e0bd1a15 	stw	r2,-2968(fp)
  8003ec:	e0bd1b04 	addi	r2,fp,-2964
  8003f0:	e0fbd804 	addi	r3,fp,-4256
  8003f4:	01003504 	movi	r4,212
  8003f8:	200d883a 	mov	r6,r4
  8003fc:	180b883a 	mov	r5,r3
  800400:	1009883a 	mov	r4,r2
  800404:	0801f940 	call	801f94 <memcpy>
  800408:	e0bb9f17 	ldw	r2,-4484(fp)
  80040c:	e0bd5015 	stw	r2,-2752(fp)
  800410:	00802034 	movhi	r2,128
  800414:	10830204 	addi	r2,r2,3080
  800418:	e0bd5115 	stw	r2,-2748(fp)
  80041c:	00802034 	movhi	r2,128
  800420:	10830f04 	addi	r2,r2,3132
  800424:	e0bd5215 	stw	r2,-2744(fp)
  800428:	00802034 	movhi	r2,128
  80042c:	1083ba04 	addi	r2,r2,3816
  800430:	e0bd5315 	stw	r2,-2740(fp)
  800434:	00802034 	movhi	r2,128
  800438:	10835804 	addi	r2,r2,3424
  80043c:	e0bd5415 	stw	r2,-2736(fp)
  800440:	e0bd0104 	addi	r2,fp,-3068
  800444:	e0bd5515 	stw	r2,-2732(fp)
				read_accelerometerY,
				update_graph,
				&accelorometerY
			};

	SENSOR_OBJECT accelorometerZ =
  800448:	009958f4 	movhi	r2,25955
  80044c:	1098d044 	addi	r2,r2,25409
  800450:	e0bd5615 	stw	r2,-2728(fp)
  800454:	009bdcb4 	movhi	r2,28530
  800458:	10995b04 	addi	r2,r2,25964
  80045c:	e0bd5715 	stw	r2,-2724(fp)
  800460:	009e8834 	movhi	r2,31264
  800464:	108b9b44 	addi	r2,r2,11885
  800468:	e0bd5815 	stw	r2,-2720(fp)
  80046c:	e03d5915 	stw	zero,-2716(fp)
  800470:	e0bd5a04 	addi	r2,fp,-2712
  800474:	00c01004 	movi	r3,64
  800478:	180d883a 	mov	r6,r3
  80047c:	000b883a 	mov	r5,zero
  800480:	1009883a 	mov	r4,r2
  800484:	0801fbc0 	call	801fbc <memset>
  800488:	00803cc4 	movi	r2,243
  80048c:	e0bd6a15 	stw	r2,-2648(fp)
  800490:	00800c84 	movi	r2,50
  800494:	e0bd6b15 	stw	r2,-2644(fp)
  800498:	00800044 	movi	r2,1
  80049c:	e0bd6c15 	stw	r2,-2640(fp)
  8004a0:	00800044 	movi	r2,1
  8004a4:	e0bd6d15 	stw	r2,-2636(fp)
  8004a8:	00800f04 	movi	r2,60
  8004ac:	e0bd6e15 	stw	r2,-2632(fp)
  8004b0:	00800104 	movi	r2,4
  8004b4:	e0bd6f15 	stw	r2,-2628(fp)
  8004b8:	e0bd7004 	addi	r2,fp,-2624
  8004bc:	e0fc0d04 	addi	r3,fp,-4044
  8004c0:	01003504 	movi	r4,212
  8004c4:	200d883a 	mov	r6,r4
  8004c8:	180b883a 	mov	r5,r3
  8004cc:	1009883a 	mov	r4,r2
  8004d0:	0801f940 	call	801f94 <memcpy>
  8004d4:	e0bba017 	ldw	r2,-4480(fp)
  8004d8:	e0bda515 	stw	r2,-2412(fp)
  8004dc:	00802034 	movhi	r2,128
  8004e0:	10830204 	addi	r2,r2,3080
  8004e4:	e0bda615 	stw	r2,-2408(fp)
  8004e8:	00802034 	movhi	r2,128
  8004ec:	10830f04 	addi	r2,r2,3132
  8004f0:	e0bda715 	stw	r2,-2404(fp)
  8004f4:	00802034 	movhi	r2,128
  8004f8:	1083fd04 	addi	r2,r2,4084
  8004fc:	e0bda815 	stw	r2,-2400(fp)
  800500:	00802034 	movhi	r2,128
  800504:	10835804 	addi	r2,r2,3424
  800508:	e0bda915 	stw	r2,-2396(fp)
  80050c:	e0bd5604 	addi	r2,fp,-2728
  800510:	e0bdaa15 	stw	r2,-2392(fp)
					read_accelerometerZ,
					update_graph,
					&accelorometerZ
				};

	SENSOR_OBJECT temp_sensor =
  800514:	009c1b74 	movhi	r2,28781
  800518:	10995504 	addi	r2,r2,25940
  80051c:	e0bdab15 	stw	r2,-2388(fp)
  800520:	009d1874 	movhi	r2,29793
  800524:	109c9944 	addi	r2,r2,29285
  800528:	e0bdac15 	stw	r2,-2384(fp)
  80052c:	00801974 	movhi	r2,101
  800530:	109c9d44 	addi	r2,r2,29301
  800534:	e0bdad15 	stw	r2,-2380(fp)
  800538:	e0bdae04 	addi	r2,fp,-2376
  80053c:	00c01104 	movi	r3,68
  800540:	180d883a 	mov	r6,r3
  800544:	000b883a 	mov	r5,zero
  800548:	1009883a 	mov	r4,r2
  80054c:	0801fbc0 	call	801fbc <memset>
  800550:	00800784 	movi	r2,30
  800554:	e0bdbf15 	stw	r2,-2308(fp)
  800558:	00802a84 	movi	r2,170
  80055c:	e0bdc015 	stw	r2,-2304(fp)
  800560:	00800044 	movi	r2,1
  800564:	e0bdc115 	stw	r2,-2300(fp)
  800568:	00801904 	movi	r2,100
  80056c:	e0bdc215 	stw	r2,-2296(fp)
  800570:	00800284 	movi	r2,10
  800574:	e0bdc315 	stw	r2,-2292(fp)
  800578:	00800104 	movi	r2,4
  80057c:	e0bdc415 	stw	r2,-2288(fp)
  800580:	e0bdc504 	addi	r2,fp,-2284
  800584:	e0fc4204 	addi	r3,fp,-3832
  800588:	01003504 	movi	r4,212
  80058c:	200d883a 	mov	r6,r4
  800590:	180b883a 	mov	r5,r3
  800594:	1009883a 	mov	r4,r2
  800598:	0801f940 	call	801f94 <memcpy>
  80059c:	e0bba117 	ldw	r2,-4476(fp)
  8005a0:	e0bdfa15 	stw	r2,-2072(fp)
  8005a4:	00802034 	movhi	r2,128
  8005a8:	10830204 	addi	r2,r2,3080
  8005ac:	e0bdfb15 	stw	r2,-2068(fp)
  8005b0:	00802034 	movhi	r2,128
  8005b4:	10830f04 	addi	r2,r2,3132
  8005b8:	e0bdfc15 	stw	r2,-2064(fp)
  8005bc:	00802034 	movhi	r2,128
  8005c0:	1082c604 	addi	r2,r2,2840
  8005c4:	e0bdfd15 	stw	r2,-2060(fp)
  8005c8:	00802034 	movhi	r2,128
  8005cc:	10835804 	addi	r2,r2,3424
  8005d0:	e0bdfe15 	stw	r2,-2056(fp)
  8005d4:	e0bdab04 	addi	r2,fp,-2388
  8005d8:	e0bdff15 	stw	r2,-2052(fp)
						read_temp,
						update_graph,
						&temp_sensor
					};

	SENSOR_OBJECT light_sensor =
  8005dc:	009a19f4 	movhi	r2,26727
  8005e0:	109a5304 	addi	r2,r2,26956
  8005e4:	e0be0015 	stw	r2,-2048(fp)
  8005e8:	00801d04 	movi	r2,116
  8005ec:	e0be0115 	stw	r2,-2044(fp)
  8005f0:	e0be0204 	addi	r2,fp,-2040
  8005f4:	00c01204 	movi	r3,72
  8005f8:	180d883a 	mov	r6,r3
  8005fc:	000b883a 	mov	r5,zero
  800600:	1009883a 	mov	r4,r2
  800604:	0801fbc0 	call	801fbc <memset>
  800608:	00802204 	movi	r2,136
  80060c:	e0be1415 	stw	r2,-1968(fp)
  800610:	00802a84 	movi	r2,170
  800614:	e0be1515 	stw	r2,-1964(fp)
  800618:	00800044 	movi	r2,1
  80061c:	e0be1615 	stw	r2,-1960(fp)
  800620:	00801904 	movi	r2,100
  800624:	e0be1715 	stw	r2,-1956(fp)
  800628:	00800284 	movi	r2,10
  80062c:	e0be1815 	stw	r2,-1952(fp)
  800630:	00800104 	movi	r2,4
  800634:	e0be1915 	stw	r2,-1948(fp)
  800638:	e0be1a04 	addi	r2,fp,-1944
  80063c:	e0fc7704 	addi	r3,fp,-3620
  800640:	01003504 	movi	r4,212
  800644:	200d883a 	mov	r6,r4
  800648:	180b883a 	mov	r5,r3
  80064c:	1009883a 	mov	r4,r2
  800650:	0801f940 	call	801f94 <memcpy>
  800654:	e0bba217 	ldw	r2,-4472(fp)
  800658:	e0be4f15 	stw	r2,-1732(fp)
  80065c:	00802034 	movhi	r2,128
  800660:	10830204 	addi	r2,r2,3080
  800664:	e0be5015 	stw	r2,-1728(fp)
  800668:	00802034 	movhi	r2,128
  80066c:	10830f04 	addi	r2,r2,3132
  800670:	e0be5115 	stw	r2,-1724(fp)
  800674:	00802034 	movhi	r2,128
  800678:	1082e404 	addi	r2,r2,2960
  80067c:	e0be5215 	stw	r2,-1720(fp)
  800680:	00802034 	movhi	r2,128
  800684:	10835804 	addi	r2,r2,3424
  800688:	e0be5315 	stw	r2,-1716(fp)
  80068c:	e0be0004 	addi	r2,fp,-2048
  800690:	e0be5415 	stw	r2,-1712(fp)
							read_light,
							update_graph,
							&light_sensor
						};

SENSOR_OBJECT sensors[5]={accelorometerX,
  800694:	e0be5504 	addi	r2,fp,-1708
  800698:	e0fcac04 	addi	r3,fp,-3408
  80069c:	01005504 	movi	r4,340
  8006a0:	200d883a 	mov	r6,r4
  8006a4:	180b883a 	mov	r5,r3
  8006a8:	1009883a 	mov	r4,r2
  8006ac:	0801f940 	call	801f94 <memcpy>
  8006b0:	e0beaa04 	addi	r2,fp,-1368
  8006b4:	e0fd0104 	addi	r3,fp,-3068
  8006b8:	01005504 	movi	r4,340
  8006bc:	200d883a 	mov	r6,r4
  8006c0:	180b883a 	mov	r5,r3
  8006c4:	1009883a 	mov	r4,r2
  8006c8:	0801f940 	call	801f94 <memcpy>
  8006cc:	e0beff04 	addi	r2,fp,-1028
  8006d0:	e0fd5604 	addi	r3,fp,-2728
  8006d4:	01005504 	movi	r4,340
  8006d8:	200d883a 	mov	r6,r4
  8006dc:	180b883a 	mov	r5,r3
  8006e0:	1009883a 	mov	r4,r2
  8006e4:	0801f940 	call	801f94 <memcpy>
  8006e8:	e0bf5404 	addi	r2,fp,-688
  8006ec:	e0fdab04 	addi	r3,fp,-2388
  8006f0:	01005504 	movi	r4,340
  8006f4:	200d883a 	mov	r6,r4
  8006f8:	180b883a 	mov	r5,r3
  8006fc:	1009883a 	mov	r4,r2
  800700:	0801f940 	call	801f94 <memcpy>
  800704:	e0bfa904 	addi	r2,fp,-348
  800708:	e0fe0004 	addi	r3,fp,-2048
  80070c:	01005504 	movi	r4,340
  800710:	200d883a 	mov	r6,r4
  800714:	180b883a 	mov	r5,r3
  800718:	1009883a 	mov	r4,r2
  80071c:	0801f940 	call	801f94 <memcpy>
							temp_sensor,
							light_sensor};



		for(i = 0; i < 78600; i++)
  800720:	d021d815 	stw	zero,-30880(gp)
  800724:	00000b06 	br	800754 <main+0x4e8>
			set_address_pixel(i, 0);
  800728:	d0a1d817 	ldw	r2,-30880(gp)
  80072c:	1085883a 	add	r2,r2,r2
  800730:	1085883a 	add	r2,r2,r2
  800734:	1007883a 	mov	r3,r2
  800738:	00804034 	movhi	r2,256
  80073c:	1885883a 	add	r2,r3,r2
  800740:	0007883a 	mov	r3,zero
  800744:	10c00035 	stwio	r3,0(r2)
							temp_sensor,
							light_sensor};



		for(i = 0; i < 78600; i++)
  800748:	d0a1d817 	ldw	r2,-30880(gp)
  80074c:	10800044 	addi	r2,r2,1
  800750:	d0a1d815 	stw	r2,-30880(gp)
  800754:	d0e1d817 	ldw	r3,-30880(gp)
  800758:	00800074 	movhi	r2,1
  80075c:	108cc1c4 	addi	r2,r2,13063
  800760:	10fff12e 	bgeu	r2,r3,800728 <__alt_data_end+0xff800728>
			set_address_pixel(i, 0);

		print_hline(0,120,320,6);
  800764:	01c00184 	movi	r7,6
  800768:	01805004 	movi	r6,320
  80076c:	01401e04 	movi	r5,120
  800770:	0009883a 	mov	r4,zero
  800774:	08011ac0 	call	8011ac <print_hline>
		print_vline(320/3,0,240,6);
  800778:	01c00184 	movi	r7,6
  80077c:	01803c04 	movi	r6,240
  800780:	000b883a 	mov	r5,zero
  800784:	01001a84 	movi	r4,106
  800788:	080127c0 	call	80127c <print_vline>
		print_vline(2*320/3,0,240,6);
  80078c:	01c00184 	movi	r7,6
  800790:	01803c04 	movi	r6,240
  800794:	000b883a 	mov	r5,zero
  800798:	01003544 	movi	r4,213
  80079c:	080127c0 	call	80127c <print_vline>

		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
  8007a0:	01c02034 	movhi	r7,128
  8007a4:	39d1fa04 	addi	r7,r7,18408
  8007a8:	01800144 	movi	r6,5
  8007ac:	01402584 	movi	r5,150
  8007b0:	01003684 	movi	r4,218
  8007b4:	08014580 	call	801458 <print_str>
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
  8007b8:	01c02034 	movhi	r7,128
  8007bc:	39d1fd04 	addi	r7,r7,18420
  8007c0:	01800144 	movi	r6,5
  8007c4:	01402d04 	movi	r5,180
  8007c8:	01003684 	movi	r4,218
  8007cc:	08014580 	call	801458 <print_str>
		print_str(2*320/3 +5,210,5,"L.Karagiannis");
  8007d0:	01c02034 	movhi	r7,128
  8007d4:	39d20104 	addi	r7,r7,18436
  8007d8:	01800144 	movi	r6,5
  8007dc:	01403484 	movi	r5,210
  8007e0:	01003684 	movi	r4,218
  8007e4:	08014580 	call	801458 <print_str>

		for(int i = 0; i<5; i++)
  8007e8:	e03b9a15 	stw	zero,-4504(fp)
  8007ec:	00001206 	br	800838 <main+0x5cc>
			sensors[i].reset_samples_vector(&sensors[i]);
  8007f0:	e0bb9a17 	ldw	r2,-4504(fp)
  8007f4:	01405504 	movi	r5,340
  8007f8:	1009883a 	mov	r4,r2
  8007fc:	0801f2c0 	call	801f2c <__mulsi3>
  800800:	e0fb9904 	addi	r3,fp,-4508
  800804:	1885883a 	add	r2,r3,r2
  800808:	10830d04 	addi	r2,r2,3124
  80080c:	14000017 	ldw	r16,0(r2)
  800810:	e47e5504 	addi	r17,fp,-1708
  800814:	01405504 	movi	r5,340
  800818:	e13b9a17 	ldw	r4,-4504(fp)
  80081c:	0801f2c0 	call	801f2c <__mulsi3>
  800820:	8885883a 	add	r2,r17,r2
  800824:	1009883a 	mov	r4,r2
  800828:	803ee83a 	callr	r16

		print_str(2*320/3 +5,210-60,5,"1st btn 1Hz");
		print_str(2*320/3 +5,210-30,5,"2nd btn 10Hz");
		print_str(2*320/3 +5,210,5,"L.Karagiannis");

		for(int i = 0; i<5; i++)
  80082c:	e0bb9a17 	ldw	r2,-4504(fp)
  800830:	10800044 	addi	r2,r2,1
  800834:	e0bb9a15 	stw	r2,-4504(fp)
  800838:	e0bb9a17 	ldw	r2,-4504(fp)
  80083c:	10800150 	cmplti	r2,r2,5
  800840:	103feb1e 	bne	r2,zero,8007f0 <__alt_data_end+0xff8007f0>
			sensors[i].reset_samples_vector(&sensors[i]);

	while(1){


		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 6)//first button
  800844:	00804234 	movhi	r2,264
  800848:	10848804 	addi	r2,r2,4640
  80084c:	10800037 	ldwio	r2,0(r2)
  800850:	10800198 	cmpnei	r2,r2,6
  800854:	1000011e 	bne	r2,zero,80085c <main+0x5f0>
			state = fast_sampling;
  800858:	e03b9915 	stw	zero,-4508(fp)
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 5)//snd button
  80085c:	00804234 	movhi	r2,264
  800860:	10848804 	addi	r2,r2,4640
  800864:	10800037 	ldwio	r2,0(r2)
  800868:	10800158 	cmpnei	r2,r2,5
  80086c:	1000021e 	bne	r2,zero,800878 <main+0x60c>
			state = slow_sampling;
  800870:	00800044 	movi	r2,1
  800874:	e0bb9915 	stw	r2,-4508(fp)

		switch(state){
  800878:	e0bb9917 	ldw	r2,-4508(fp)
  80087c:	10000326 	beq	r2,zero,80088c <main+0x620>
  800880:	10800060 	cmpeqi	r2,r2,1
  800884:	10004a1e 	bne	r2,zero,8009b0 <main+0x744>
  800888:	0000a206 	br	800b14 <main+0x8a8>
		case fast_sampling:
#ifdef DEBUG
			printf("fast\n");
#endif
			TIMER_RESET;
  80088c:	00d00034 	movhi	r3,16384
  800890:	00804234 	movhi	r2,264
  800894:	10849904 	addi	r2,r2,4708
  800898:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  80089c:	00e00034 	movhi	r3,32768
  8008a0:	00804234 	movhi	r2,264
  8008a4:	10849904 	addi	r2,r2,4708
  8008a8:	10c00035 	stwio	r3,0(r2)
			while(TIMER_READ < 50000000);
  8008ac:	0001883a 	nop
  8008b0:	00804234 	movhi	r2,264
  8008b4:	10849804 	addi	r2,r2,4704
  8008b8:	10c00037 	ldwio	r3,0(r2)
  8008bc:	0080bef4 	movhi	r2,763
  8008c0:	10bc1fc4 	addi	r2,r2,-3969
  8008c4:	10fffa0e 	bge	r2,r3,8008b0 <__alt_data_end+0xff8008b0>
			for(int i = 0; i<5; i++){
  8008c8:	e03b9b15 	stw	zero,-4500(fp)
  8008cc:	00003406 	br	8009a0 <main+0x734>
				sensors[i].configure_time_base(1,&sensors[i]);
  8008d0:	e0bb9b17 	ldw	r2,-4500(fp)
  8008d4:	01405504 	movi	r5,340
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	0801f2c0 	call	801f2c <__mulsi3>
  8008e0:	e0fb9904 	addi	r3,fp,-4508
  8008e4:	1885883a 	add	r2,r3,r2
  8008e8:	10830c04 	addi	r2,r2,3120
  8008ec:	14000017 	ldw	r16,0(r2)
  8008f0:	e47e5504 	addi	r17,fp,-1708
  8008f4:	01405504 	movi	r5,340
  8008f8:	e13b9b17 	ldw	r4,-4500(fp)
  8008fc:	0801f2c0 	call	801f2c <__mulsi3>
  800900:	8885883a 	add	r2,r17,r2
  800904:	100b883a 	mov	r5,r2
  800908:	01000044 	movi	r4,1
  80090c:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  800910:	e0bb9b17 	ldw	r2,-4500(fp)
  800914:	01405504 	movi	r5,340
  800918:	1009883a 	mov	r4,r2
  80091c:	0801f2c0 	call	801f2c <__mulsi3>
  800920:	e0fb9904 	addi	r3,fp,-4508
  800924:	1885883a 	add	r2,r3,r2
  800928:	10830e04 	addi	r2,r2,3128
  80092c:	14000017 	ldw	r16,0(r2)
  800930:	e0bb9b17 	ldw	r2,-4500(fp)
  800934:	01405504 	movi	r5,340
  800938:	1009883a 	mov	r4,r2
  80093c:	0801f2c0 	call	801f2c <__mulsi3>
  800940:	e0fb9904 	addi	r3,fp,-4508
  800944:	1885883a 	add	r2,r3,r2
  800948:	10830b04 	addi	r2,r2,3116
  80094c:	10800017 	ldw	r2,0(r2)
  800950:	1009883a 	mov	r4,r2
  800954:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  800958:	e0bb9b17 	ldw	r2,-4500(fp)
  80095c:	01405504 	movi	r5,340
  800960:	1009883a 	mov	r4,r2
  800964:	0801f2c0 	call	801f2c <__mulsi3>
  800968:	e0fb9904 	addi	r3,fp,-4508
  80096c:	1885883a 	add	r2,r3,r2
  800970:	10830f04 	addi	r2,r2,3132
  800974:	14000017 	ldw	r16,0(r2)
  800978:	e47e5504 	addi	r17,fp,-1708
  80097c:	01405504 	movi	r5,340
  800980:	e13b9b17 	ldw	r4,-4500(fp)
  800984:	0801f2c0 	call	801f2c <__mulsi3>
  800988:	8885883a 	add	r2,r17,r2
  80098c:	1009883a 	mov	r4,r2
  800990:	803ee83a 	callr	r16
			printf("fast\n");
#endif
			TIMER_RESET;
			TIMER_START;
			while(TIMER_READ < 50000000);
			for(int i = 0; i<5; i++){
  800994:	e0bb9b17 	ldw	r2,-4500(fp)
  800998:	10800044 	addi	r2,r2,1
  80099c:	e0bb9b15 	stw	r2,-4500(fp)
  8009a0:	e0bb9b17 	ldw	r2,-4500(fp)
  8009a4:	10800150 	cmplti	r2,r2,5
  8009a8:	103fc91e 	bne	r2,zero,8008d0 <__alt_data_end+0xff8008d0>
				sensors[i].configure_time_base(1,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
			break;
  8009ac:	00005906 	br	800b14 <main+0x8a8>
		case slow_sampling:
#ifdef DEBUG
			printf("slow\n");
#endif
			TIMER_RESET;
  8009b0:	00d00034 	movhi	r3,16384
  8009b4:	00804234 	movhi	r2,264
  8009b8:	10849904 	addi	r2,r2,4708
  8009bc:	10c00035 	stwio	r3,0(r2)
			TIMER_START;
  8009c0:	00e00034 	movhi	r3,32768
  8009c4:	00804234 	movhi	r2,264
  8009c8:	10849904 	addi	r2,r2,4708
  8009cc:	10c00035 	stwio	r3,0(r2)
			for (int i = 0; i < 10;i++){
  8009d0:	e03b9c15 	stw	zero,-4496(fp)
  8009d4:	00001206 	br	800a20 <main+0x7b4>
				while(TIMER_READ < 50000000);
  8009d8:	0001883a 	nop
  8009dc:	00804234 	movhi	r2,264
  8009e0:	10849804 	addi	r2,r2,4704
  8009e4:	10c00037 	ldwio	r3,0(r2)
  8009e8:	0080bef4 	movhi	r2,763
  8009ec:	10bc1fc4 	addi	r2,r2,-3969
  8009f0:	10fffa0e 	bge	r2,r3,8009dc <__alt_data_end+0xff8009dc>
				TIMER_RESET;
  8009f4:	00d00034 	movhi	r3,16384
  8009f8:	00804234 	movhi	r2,264
  8009fc:	10849904 	addi	r2,r2,4708
  800a00:	10c00035 	stwio	r3,0(r2)
				TIMER_START;
  800a04:	00e00034 	movhi	r3,32768
  800a08:	00804234 	movhi	r2,264
  800a0c:	10849904 	addi	r2,r2,4708
  800a10:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG
			printf("slow\n");
#endif
			TIMER_RESET;
			TIMER_START;
			for (int i = 0; i < 10;i++){
  800a14:	e0bb9c17 	ldw	r2,-4496(fp)
  800a18:	10800044 	addi	r2,r2,1
  800a1c:	e0bb9c15 	stw	r2,-4496(fp)
  800a20:	e0bb9c17 	ldw	r2,-4496(fp)
  800a24:	10800290 	cmplti	r2,r2,10
  800a28:	103feb1e 	bne	r2,zero,8009d8 <__alt_data_end+0xff8009d8>
				while(TIMER_READ < 50000000);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 0; i<5; i++){
  800a2c:	e03b9d15 	stw	zero,-4492(fp)
  800a30:	00003406 	br	800b04 <main+0x898>
				sensors[i].configure_time_base(10,&sensors[i]);
  800a34:	e0bb9d17 	ldw	r2,-4492(fp)
  800a38:	01405504 	movi	r5,340
  800a3c:	1009883a 	mov	r4,r2
  800a40:	0801f2c0 	call	801f2c <__mulsi3>
  800a44:	e0fb9904 	addi	r3,fp,-4508
  800a48:	1885883a 	add	r2,r3,r2
  800a4c:	10830c04 	addi	r2,r2,3120
  800a50:	14000017 	ldw	r16,0(r2)
  800a54:	e47e5504 	addi	r17,fp,-1708
  800a58:	01405504 	movi	r5,340
  800a5c:	e13b9d17 	ldw	r4,-4492(fp)
  800a60:	0801f2c0 	call	801f2c <__mulsi3>
  800a64:	8885883a 	add	r2,r17,r2
  800a68:	100b883a 	mov	r5,r2
  800a6c:	01000284 	movi	r4,10
  800a70:	803ee83a 	callr	r16
				sensors[i].read_sensor(sensors[i].q);
  800a74:	e0bb9d17 	ldw	r2,-4492(fp)
  800a78:	01405504 	movi	r5,340
  800a7c:	1009883a 	mov	r4,r2
  800a80:	0801f2c0 	call	801f2c <__mulsi3>
  800a84:	e0fb9904 	addi	r3,fp,-4508
  800a88:	1885883a 	add	r2,r3,r2
  800a8c:	10830e04 	addi	r2,r2,3128
  800a90:	14000017 	ldw	r16,0(r2)
  800a94:	e0bb9d17 	ldw	r2,-4492(fp)
  800a98:	01405504 	movi	r5,340
  800a9c:	1009883a 	mov	r4,r2
  800aa0:	0801f2c0 	call	801f2c <__mulsi3>
  800aa4:	e0fb9904 	addi	r3,fp,-4508
  800aa8:	1885883a 	add	r2,r3,r2
  800aac:	10830b04 	addi	r2,r2,3116
  800ab0:	10800017 	ldw	r2,0(r2)
  800ab4:	1009883a 	mov	r4,r2
  800ab8:	803ee83a 	callr	r16
				sensors[i].update_graph(&sensors[i]);
  800abc:	e0bb9d17 	ldw	r2,-4492(fp)
  800ac0:	01405504 	movi	r5,340
  800ac4:	1009883a 	mov	r4,r2
  800ac8:	0801f2c0 	call	801f2c <__mulsi3>
  800acc:	e0fb9904 	addi	r3,fp,-4508
  800ad0:	1885883a 	add	r2,r3,r2
  800ad4:	10830f04 	addi	r2,r2,3132
  800ad8:	14000017 	ldw	r16,0(r2)
  800adc:	e47e5504 	addi	r17,fp,-1708
  800ae0:	01405504 	movi	r5,340
  800ae4:	e13b9d17 	ldw	r4,-4492(fp)
  800ae8:	0801f2c0 	call	801f2c <__mulsi3>
  800aec:	8885883a 	add	r2,r17,r2
  800af0:	1009883a 	mov	r4,r2
  800af4:	803ee83a 	callr	r16
			for (int i = 0; i < 10;i++){
				while(TIMER_READ < 50000000);
				TIMER_RESET;
				TIMER_START;
			}
			for(int i = 0; i<5; i++){
  800af8:	e0bb9d17 	ldw	r2,-4492(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bb9d15 	stw	r2,-4492(fp)
  800b04:	e0bb9d17 	ldw	r2,-4492(fp)
  800b08:	10800150 	cmplti	r2,r2,5
  800b0c:	103fc91e 	bne	r2,zero,800a34 <__alt_data_end+0xff800a34>
				sensors[i].configure_time_base(10,&sensors[i]);
				sensors[i].read_sensor(sensors[i].q);
				sensors[i].update_graph(&sensors[i]);
			}
           break;
  800b10:	0001883a 	nop
		}
	}
  800b14:	003f4b06 	br	800844 <__alt_data_end+0xff800844>

00800b18 <read_temp>:
#endif

	return 0;
}

void read_temp(QUEUE *q){
  800b18:	defffc04 	addi	sp,sp,-16
  800b1c:	dfc00315 	stw	ra,12(sp)
  800b20:	df000215 	stw	fp,8(sp)
  800b24:	df000204 	addi	fp,sp,8
  800b28:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  800b2c:	00c00044 	movi	r3,1
  800b30:	00804234 	movhi	r2,264
  800b34:	10849c04 	addi	r2,r2,4720
  800b38:	10c00035 	stwio	r3,0(r2)
		alt_u32 temp = ADC_READ_TEMP;
  800b3c:	00804234 	movhi	r2,264
  800b40:	10840104 	addi	r2,r2,4100
  800b44:	10800037 	ldwio	r2,0(r2)
  800b48:	e0bffe15 	stw	r2,-8(fp)
		if(queue_enqueue(q,temp))
  800b4c:	e0bffe17 	ldw	r2,-8(fp)
  800b50:	100b883a 	mov	r5,r2
  800b54:	e13fff17 	ldw	r4,-4(fp)
  800b58:	08019640 	call	801964 <queue_enqueue>
  800b5c:	1000061e 	bne	r2,zero,800b78 <read_temp+0x60>
								;
						else{
							queue_dequeue(q);
  800b60:	e13fff17 	ldw	r4,-4(fp)
  800b64:	0801ac00 	call	801ac0 <queue_dequeue>
							queue_enqueue(q,temp);
  800b68:	e0bffe17 	ldw	r2,-8(fp)
  800b6c:	100b883a 	mov	r5,r2
  800b70:	e13fff17 	ldw	r4,-4(fp)
  800b74:	08019640 	call	801964 <queue_enqueue>
						}
}
  800b78:	0001883a 	nop
  800b7c:	e037883a 	mov	sp,fp
  800b80:	dfc00117 	ldw	ra,4(sp)
  800b84:	df000017 	ldw	fp,0(sp)
  800b88:	dec00204 	addi	sp,sp,8
  800b8c:	f800283a 	ret

00800b90 <read_light>:
void read_light(QUEUE *q){
  800b90:	defffc04 	addi	sp,sp,-16
  800b94:	dfc00315 	stw	ra,12(sp)
  800b98:	df000215 	stw	fp,8(sp)
  800b9c:	df000204 	addi	fp,sp,8
  800ba0:	e13fff15 	stw	r4,-4(fp)
	ADC_INIT;
  800ba4:	00c00044 	movi	r3,1
  800ba8:	00804234 	movhi	r2,264
  800bac:	10849c04 	addi	r2,r2,4720
  800bb0:	10c00035 	stwio	r3,0(r2)
			alt_u32 light = ADC_READ_PHOTO;
  800bb4:	00804234 	movhi	r2,264
  800bb8:	10840004 	addi	r2,r2,4096
  800bbc:	10800037 	ldwio	r2,0(r2)
  800bc0:	e0bffe15 	stw	r2,-8(fp)
			if(queue_enqueue(q,light))
  800bc4:	e0bffe17 	ldw	r2,-8(fp)
  800bc8:	100b883a 	mov	r5,r2
  800bcc:	e13fff17 	ldw	r4,-4(fp)
  800bd0:	08019640 	call	801964 <queue_enqueue>
  800bd4:	1000061e 	bne	r2,zero,800bf0 <read_light+0x60>
									;
							else{
								queue_dequeue(q);
  800bd8:	e13fff17 	ldw	r4,-4(fp)
  800bdc:	0801ac00 	call	801ac0 <queue_dequeue>
								queue_enqueue(q,light);
  800be0:	e0bffe17 	ldw	r2,-8(fp)
  800be4:	100b883a 	mov	r5,r2
  800be8:	e13fff17 	ldw	r4,-4(fp)
  800bec:	08019640 	call	801964 <queue_enqueue>
							}
}
  800bf0:	0001883a 	nop
  800bf4:	e037883a 	mov	sp,fp
  800bf8:	dfc00117 	ldw	ra,4(sp)
  800bfc:	df000017 	ldw	fp,0(sp)
  800c00:	dec00204 	addi	sp,sp,8
  800c04:	f800283a 	ret

00800c08 <config_time_base>:
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj){
  800c08:	defffd04 	addi	sp,sp,-12
  800c0c:	df000215 	stw	fp,8(sp)
  800c10:	df000204 	addi	fp,sp,8
  800c14:	e13ffe15 	stw	r4,-8(fp)
  800c18:	e17fff15 	stw	r5,-4(fp)
	 sensor_obj->time_base = time_base;
  800c1c:	e0bfff17 	ldw	r2,-4(fp)
  800c20:	e0fffe17 	ldw	r3,-8(fp)
  800c24:	10c01615 	stw	r3,88(r2)
}
  800c28:	0001883a 	nop
  800c2c:	e037883a 	mov	sp,fp
  800c30:	df000017 	ldw	fp,0(sp)
  800c34:	dec00104 	addi	sp,sp,4
  800c38:	f800283a 	ret

00800c3c <init_measurement>:
void init_measurement(SENSOR_OBJECT* sensor_obj){
  800c3c:	defffc04 	addi	sp,sp,-16
  800c40:	dfc00315 	stw	ra,12(sp)
  800c44:	df000215 	stw	fp,8(sp)
  800c48:	df000204 	addi	fp,sp,8
  800c4c:	e13fff15 	stw	r4,-4(fp)
	queue_init(sensor_obj->q);
  800c50:	e0bfff17 	ldw	r2,-4(fp)
  800c54:	10804f17 	ldw	r2,316(r2)
  800c58:	1009883a 	mov	r4,r2
  800c5c:	08019100 	call	801910 <queue_init>
	print_char(sensor_obj->x_origo +55,sensor_obj->y_origo -3,7,0,'>');
  800c60:	e0bfff17 	ldw	r2,-4(fp)
  800c64:	10801417 	ldw	r2,80(r2)
  800c68:	10c00dc4 	addi	r3,r2,55
  800c6c:	e0bfff17 	ldw	r2,-4(fp)
  800c70:	10801517 	ldw	r2,84(r2)
  800c74:	113fff44 	addi	r4,r2,-3
  800c78:	00800f84 	movi	r2,62
  800c7c:	d8800015 	stw	r2,0(sp)
  800c80:	000f883a 	mov	r7,zero
  800c84:	018001c4 	movi	r6,7
  800c88:	200b883a 	mov	r5,r4
  800c8c:	1809883a 	mov	r4,r3
  800c90:	080134c0 	call	80134c <print_char>
	print_hline(sensor_obj->x_origo,sensor_obj->y_origo,60,7);
  800c94:	e0bfff17 	ldw	r2,-4(fp)
  800c98:	10c01417 	ldw	r3,80(r2)
  800c9c:	e0bfff17 	ldw	r2,-4(fp)
  800ca0:	10801517 	ldw	r2,84(r2)
  800ca4:	01c001c4 	movi	r7,7
  800ca8:	01800f04 	movi	r6,60
  800cac:	100b883a 	mov	r5,r2
  800cb0:	1809883a 	mov	r4,r3
  800cb4:	08011ac0 	call	8011ac <print_hline>

	print_char(sensor_obj->x_origo -4,sensor_obj->y_origo -45,7,0,'^');
  800cb8:	e0bfff17 	ldw	r2,-4(fp)
  800cbc:	10801417 	ldw	r2,80(r2)
  800cc0:	10ffff04 	addi	r3,r2,-4
  800cc4:	e0bfff17 	ldw	r2,-4(fp)
  800cc8:	10801517 	ldw	r2,84(r2)
  800ccc:	113ff4c4 	addi	r4,r2,-45
  800cd0:	00801784 	movi	r2,94
  800cd4:	d8800015 	stw	r2,0(sp)
  800cd8:	000f883a 	mov	r7,zero
  800cdc:	018001c4 	movi	r6,7
  800ce0:	200b883a 	mov	r5,r4
  800ce4:	1809883a 	mov	r4,r3
  800ce8:	080134c0 	call	80134c <print_char>
	print_vline(sensor_obj->x_origo-1,sensor_obj->y_origo -45,45,7);
  800cec:	e0bfff17 	ldw	r2,-4(fp)
  800cf0:	10801417 	ldw	r2,80(r2)
  800cf4:	10ffffc4 	addi	r3,r2,-1
  800cf8:	e0bfff17 	ldw	r2,-4(fp)
  800cfc:	10801517 	ldw	r2,84(r2)
  800d00:	10bff4c4 	addi	r2,r2,-45
  800d04:	01c001c4 	movi	r7,7
  800d08:	01800b44 	movi	r6,45
  800d0c:	100b883a 	mov	r5,r2
  800d10:	1809883a 	mov	r4,r3
  800d14:	080127c0 	call	80127c <print_vline>

	print_str(sensor_obj->x_origo -20, sensor_obj->y_origo +10,7,sensor_obj->description);
  800d18:	e0bfff17 	ldw	r2,-4(fp)
  800d1c:	10801417 	ldw	r2,80(r2)
  800d20:	10fffb04 	addi	r3,r2,-20
  800d24:	e0bfff17 	ldw	r2,-4(fp)
  800d28:	10801517 	ldw	r2,84(r2)
  800d2c:	10800284 	addi	r2,r2,10
  800d30:	e13fff17 	ldw	r4,-4(fp)
  800d34:	200f883a 	mov	r7,r4
  800d38:	018001c4 	movi	r6,7
  800d3c:	100b883a 	mov	r5,r2
  800d40:	1809883a 	mov	r4,r3
  800d44:	08014580 	call	801458 <print_str>
}
  800d48:	0001883a 	nop
  800d4c:	e037883a 	mov	sp,fp
  800d50:	dfc00117 	ldw	ra,4(sp)
  800d54:	df000017 	ldw	fp,0(sp)
  800d58:	dec00204 	addi	sp,sp,8
  800d5c:	f800283a 	ret

00800d60 <update_graph>:
void update_graph(SENSOR_OBJECT* sensor_obj){
  800d60:	defffb04 	addi	sp,sp,-20
  800d64:	dfc00415 	stw	ra,16(sp)
  800d68:	df000315 	stw	fp,12(sp)
  800d6c:	df000304 	addi	fp,sp,12
  800d70:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800d74:	e0bfff17 	ldw	r2,-4(fp)
  800d78:	10c04f17 	ldw	r3,316(r2)
			sensor_obj->x_origo,
  800d7c:	e0bfff17 	ldw	r2,-4(fp)
  800d80:	10801417 	ldw	r2,80(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800d84:	100b883a 	mov	r5,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
  800d88:	e0bfff17 	ldw	r2,-4(fp)
  800d8c:	10801517 	ldw	r2,84(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800d90:	100d883a 	mov	r6,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
  800d94:	e0bfff17 	ldw	r2,-4(fp)
  800d98:	10801717 	ldw	r2,92(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800d9c:	100f883a 	mov	r7,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
  800da0:	e0bfff17 	ldw	r2,-4(fp)
  800da4:	10801817 	ldw	r2,96(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800da8:	1009883a 	mov	r4,r2
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb);
  800dac:	e0bfff17 	ldw	r2,-4(fp)
  800db0:	10801917 	ldw	r2,100(r2)
}
void update_graph(SENSOR_OBJECT* sensor_obj){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj->q,
  800db4:	d8800115 	stw	r2,4(sp)
  800db8:	d9000015 	stw	r4,0(sp)
  800dbc:	1809883a 	mov	r4,r3
  800dc0:	0801bb00 	call	801bb0 <queue_print_screen>
			sensor_obj->x_origo,
			sensor_obj->y_origo,
			sensor_obj->normalization_factor,
			sensor_obj->offset,
			sensor_obj->rgb);
}
  800dc4:	0001883a 	nop
  800dc8:	e037883a 	mov	sp,fp
  800dcc:	dfc00117 	ldw	ra,4(sp)
  800dd0:	df000017 	ldw	fp,0(sp)
  800dd4:	dec00204 	addi	sp,sp,8
  800dd8:	f800283a 	ret

00800ddc <read_accelerometerX>:
void read_accelerometerX(QUEUE *q)
{
  800ddc:	defff604 	addi	sp,sp,-40
  800de0:	dfc00915 	stw	ra,36(sp)
  800de4:	df000815 	stw	fp,32(sp)
  800de8:	df000804 	addi	fp,sp,32
  800dec:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  800df0:	008002c4 	movi	r2,11
  800df4:	e0bffcc5 	stb	r2,-13(fp)
  800df8:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800dfc:	008002c4 	movi	r2,11
  800e00:	e0bffd45 	stb	r2,-11(fp)
  800e04:	e03ffd85 	stb	zero,-10(fp)
  800e08:	e03ffdc5 	stb	zero,-9(fp)
  800e0c:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800e10:	00800284 	movi	r2,10
  800e14:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  800e18:	00800b44 	movi	r2,45
  800e1c:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800e20:	00800084 	movi	r2,2
  800e24:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800e28:	e0fffcc4 	addi	r3,fp,-13
  800e2c:	d8000215 	stw	zero,8(sp)
  800e30:	e0bffd44 	addi	r2,fp,-11
  800e34:	d8800115 	stw	r2,4(sp)
  800e38:	d8000015 	stw	zero,0(sp)
  800e3c:	180f883a 	mov	r7,r3
  800e40:	018000c4 	movi	r6,3
  800e44:	000b883a 	mov	r5,zero
  800e48:	01004234 	movhi	r4,264
  800e4c:	21048004 	addi	r4,r4,4608
  800e50:	08031540 	call	803154 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800e54:	008002c4 	movi	r2,11
  800e58:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800e5c:	00800204 	movi	r2,8
  800e60:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800e64:	e0fffcc4 	addi	r3,fp,-13
  800e68:	d8000215 	stw	zero,8(sp)
  800e6c:	e0bffc04 	addi	r2,fp,-16
  800e70:	d8800115 	stw	r2,4(sp)
  800e74:	008000c4 	movi	r2,3
  800e78:	d8800015 	stw	r2,0(sp)
  800e7c:	180f883a 	mov	r7,r3
  800e80:	01800084 	movi	r6,2
  800e84:	000b883a 	mov	r5,zero
  800e88:	01004234 	movhi	r4,264
  800e8c:	21048004 	addi	r4,r4,4608
  800e90:	08031540 	call	803154 <alt_avalon_spi_command>
								  0);
#ifdef DEBUG
			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_x = 0;
  800e94:	e03ffb15 	stw	zero,-20(fp)
		accel_x = (alt_32)accel_data.x;
  800e98:	e0bffc03 	ldbu	r2,-16(fp)
  800e9c:	10803fcc 	andi	r2,r2,255
  800ea0:	1080201c 	xori	r2,r2,128
  800ea4:	10bfe004 	addi	r2,r2,-128
  800ea8:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_x))
  800eac:	e17ffb17 	ldw	r5,-20(fp)
  800eb0:	e13fff17 	ldw	r4,-4(fp)
  800eb4:	08019640 	call	801964 <queue_enqueue>
  800eb8:	1000051e 	bne	r2,zero,800ed0 <read_accelerometerX+0xf4>
						;
				else{
					queue_dequeue(q);
  800ebc:	e13fff17 	ldw	r4,-4(fp)
  800ec0:	0801ac00 	call	801ac0 <queue_dequeue>
					queue_enqueue(q,accel_x);
  800ec4:	e17ffb17 	ldw	r5,-20(fp)
  800ec8:	e13fff17 	ldw	r4,-4(fp)
  800ecc:	08019640 	call	801964 <queue_enqueue>
				}
}
  800ed0:	0001883a 	nop
  800ed4:	e037883a 	mov	sp,fp
  800ed8:	dfc00117 	ldw	ra,4(sp)
  800edc:	df000017 	ldw	fp,0(sp)
  800ee0:	dec00204 	addi	sp,sp,8
  800ee4:	f800283a 	ret

00800ee8 <read_accelerometerY>:
void read_accelerometerY(QUEUE *q)
{
  800ee8:	defff604 	addi	sp,sp,-40
  800eec:	dfc00915 	stw	ra,36(sp)
  800ef0:	df000815 	stw	fp,32(sp)
  800ef4:	df000804 	addi	fp,sp,32
  800ef8:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  800efc:	008002c4 	movi	r2,11
  800f00:	e0bffcc5 	stb	r2,-13(fp)
  800f04:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  800f08:	008002c4 	movi	r2,11
  800f0c:	e0bffd45 	stb	r2,-11(fp)
  800f10:	e03ffd85 	stb	zero,-10(fp)
  800f14:	e03ffdc5 	stb	zero,-9(fp)
  800f18:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  800f1c:	00800284 	movi	r2,10
  800f20:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  800f24:	00800b44 	movi	r2,45
  800f28:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  800f2c:	00800084 	movi	r2,2
  800f30:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800f34:	e0fffcc4 	addi	r3,fp,-13
  800f38:	d8000215 	stw	zero,8(sp)
  800f3c:	e0bffd44 	addi	r2,fp,-11
  800f40:	d8800115 	stw	r2,4(sp)
  800f44:	d8000015 	stw	zero,0(sp)
  800f48:	180f883a 	mov	r7,r3
  800f4c:	018000c4 	movi	r6,3
  800f50:	000b883a 	mov	r5,zero
  800f54:	01004234 	movhi	r4,264
  800f58:	21048004 	addi	r4,r4,4608
  800f5c:	08031540 	call	803154 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  800f60:	008002c4 	movi	r2,11
  800f64:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  800f68:	00800204 	movi	r2,8
  800f6c:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  800f70:	e0fffcc4 	addi	r3,fp,-13
  800f74:	d8000215 	stw	zero,8(sp)
  800f78:	e0bffc04 	addi	r2,fp,-16
  800f7c:	d8800115 	stw	r2,4(sp)
  800f80:	008000c4 	movi	r2,3
  800f84:	d8800015 	stw	r2,0(sp)
  800f88:	180f883a 	mov	r7,r3
  800f8c:	01800084 	movi	r6,2
  800f90:	000b883a 	mov	r5,zero
  800f94:	01004234 	movhi	r4,264
  800f98:	21048004 	addi	r4,r4,4608
  800f9c:	08031540 	call	803154 <alt_avalon_spi_command>
								  0);
#ifdef DEBUG
			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_y = 0;
  800fa0:	e03ffb15 	stw	zero,-20(fp)
		accel_y = (alt_32)accel_data.y;
  800fa4:	e0bffc43 	ldbu	r2,-15(fp)
  800fa8:	10803fcc 	andi	r2,r2,255
  800fac:	1080201c 	xori	r2,r2,128
  800fb0:	10bfe004 	addi	r2,r2,-128
  800fb4:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_y))
  800fb8:	e17ffb17 	ldw	r5,-20(fp)
  800fbc:	e13fff17 	ldw	r4,-4(fp)
  800fc0:	08019640 	call	801964 <queue_enqueue>
  800fc4:	1000051e 	bne	r2,zero,800fdc <read_accelerometerY+0xf4>
						;
				else{
					queue_dequeue(q);
  800fc8:	e13fff17 	ldw	r4,-4(fp)
  800fcc:	0801ac00 	call	801ac0 <queue_dequeue>
					queue_enqueue(q,accel_y);
  800fd0:	e17ffb17 	ldw	r5,-20(fp)
  800fd4:	e13fff17 	ldw	r4,-4(fp)
  800fd8:	08019640 	call	801964 <queue_enqueue>
				}
}
  800fdc:	0001883a 	nop
  800fe0:	e037883a 	mov	sp,fp
  800fe4:	dfc00117 	ldw	ra,4(sp)
  800fe8:	df000017 	ldw	fp,0(sp)
  800fec:	dec00204 	addi	sp,sp,8
  800ff0:	f800283a 	ret

00800ff4 <read_accelerometerZ>:

void read_accelerometerZ(QUEUE *q)
{
  800ff4:	defff604 	addi	sp,sp,-40
  800ff8:	dfc00915 	stw	ra,36(sp)
  800ffc:	df000815 	stw	fp,32(sp)
  801000:	df000804 	addi	fp,sp,32
  801004:	e13fff15 	stw	r4,-4(fp)
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
  801008:	008002c4 	movi	r2,11
  80100c:	e0bffcc5 	stb	r2,-13(fp)
  801010:	e03ffd05 	stb	zero,-12(fp)
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
  801014:	008002c4 	movi	r2,11
  801018:	e0bffd45 	stb	r2,-11(fp)
  80101c:	e03ffd85 	stb	zero,-10(fp)
  801020:	e03ffdc5 	stb	zero,-9(fp)
  801024:	e03ffe05 	stb	zero,-8(fp)
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
  801028:	00800284 	movi	r2,10
  80102c:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
  801030:	00800b44 	movi	r2,45
  801034:	e0bffd05 	stb	r2,-12(fp)
		spi_command_tx[2] = 0x02; // go bit value
  801038:	00800084 	movi	r2,2
  80103c:	e0bffd45 	stb	r2,-11(fp)

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  801040:	e0fffcc4 	addi	r3,fp,-13
  801044:	d8000215 	stw	zero,8(sp)
  801048:	e0bffd44 	addi	r2,fp,-11
  80104c:	d8800115 	stw	r2,4(sp)
  801050:	d8000015 	stw	zero,0(sp)
  801054:	180f883a 	mov	r7,r3
  801058:	018000c4 	movi	r6,3
  80105c:	000b883a 	mov	r5,zero
  801060:	01004234 	movhi	r4,264
  801064:	21048004 	addi	r4,r4,4608
  801068:	08031540 	call	803154 <alt_avalon_spi_command>
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
  80106c:	008002c4 	movi	r2,11
  801070:	e0bffcc5 	stb	r2,-13(fp)
		spi_command_tx[1] = 0x08; // Address of the data registers
  801074:	00800204 	movi	r2,8
  801078:	e0bffd05 	stb	r2,-12(fp)


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
  80107c:	e0fffcc4 	addi	r3,fp,-13
  801080:	d8000215 	stw	zero,8(sp)
  801084:	e0bffc04 	addi	r2,fp,-16
  801088:	d8800115 	stw	r2,4(sp)
  80108c:	008000c4 	movi	r2,3
  801090:	d8800015 	stw	r2,0(sp)
  801094:	180f883a 	mov	r7,r3
  801098:	01800084 	movi	r6,2
  80109c:	000b883a 	mov	r5,zero
  8010a0:	01004234 	movhi	r4,264
  8010a4:	21048004 	addi	r4,r4,4608
  8010a8:	08031540 	call	803154 <alt_avalon_spi_command>
								  0);
#ifdef DEBUG
			printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_z = 0;
  8010ac:	e03ffb15 	stw	zero,-20(fp)
		accel_z = (alt_32)accel_data.z;
  8010b0:	e0bffc83 	ldbu	r2,-14(fp)
  8010b4:	10803fcc 	andi	r2,r2,255
  8010b8:	1080201c 	xori	r2,r2,128
  8010bc:	10bfe004 	addi	r2,r2,-128
  8010c0:	e0bffb15 	stw	r2,-20(fp)

		if(queue_enqueue(q,accel_z))
  8010c4:	e17ffb17 	ldw	r5,-20(fp)
  8010c8:	e13fff17 	ldw	r4,-4(fp)
  8010cc:	08019640 	call	801964 <queue_enqueue>
  8010d0:	1000051e 	bne	r2,zero,8010e8 <read_accelerometerZ+0xf4>
						;
				else{
					queue_dequeue(q);
  8010d4:	e13fff17 	ldw	r4,-4(fp)
  8010d8:	0801ac00 	call	801ac0 <queue_dequeue>
					queue_enqueue(q,accel_z);
  8010dc:	e17ffb17 	ldw	r5,-20(fp)
  8010e0:	e13fff17 	ldw	r4,-4(fp)
  8010e4:	08019640 	call	801964 <queue_enqueue>
				}
}
  8010e8:	0001883a 	nop
  8010ec:	e037883a 	mov	sp,fp
  8010f0:	dfc00117 	ldw	ra,4(sp)
  8010f4:	df000017 	ldw	fp,0(sp)
  8010f8:	dec00204 	addi	sp,sp,8
  8010fc:	f800283a 	ret

00801100 <print_pix>:


/*************************************************/

void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
  801100:	defffb04 	addi	sp,sp,-20
  801104:	dfc00415 	stw	ra,16(sp)
  801108:	df000315 	stw	fp,12(sp)
  80110c:	df000304 	addi	fp,sp,12
  801110:	e13ffd15 	stw	r4,-12(fp)
  801114:	e17ffe15 	stw	r5,-8(fp)
  801118:	e1bfff15 	stw	r6,-4(fp)
	if(rgb <= 7 && rgb >= 0)
  80111c:	e0bfff17 	ldw	r2,-4(fp)
  801120:	10800228 	cmpgeui	r2,r2,8
  801124:	10000e1e 	bne	r2,zero,801160 <print_pix+0x60>
		set_pixel(x,y,rgb);
  801128:	01405004 	movi	r5,320
  80112c:	e13ffe17 	ldw	r4,-8(fp)
  801130:	0801f2c0 	call	801f2c <__mulsi3>
  801134:	1007883a 	mov	r3,r2
  801138:	e0bffd17 	ldw	r2,-12(fp)
  80113c:	1885883a 	add	r2,r3,r2
  801140:	1085883a 	add	r2,r2,r2
  801144:	1085883a 	add	r2,r2,r2
  801148:	1007883a 	mov	r3,r2
  80114c:	00804034 	movhi	r2,256
  801150:	1885883a 	add	r2,r3,r2
  801154:	e0ffff17 	ldw	r3,-4(fp)
  801158:	10c00035 	stwio	r3,0(r2)
	else
		set_pixel(x,y,0);
}
  80115c:	00000d06 	br	801194 <print_pix+0x94>
void print_pix(alt_u32 x,alt_u32 y,alt_u32 rgb)
{
	if(rgb <= 7 && rgb >= 0)
		set_pixel(x,y,rgb);
	else
		set_pixel(x,y,0);
  801160:	01405004 	movi	r5,320
  801164:	e13ffe17 	ldw	r4,-8(fp)
  801168:	0801f2c0 	call	801f2c <__mulsi3>
  80116c:	1007883a 	mov	r3,r2
  801170:	e0bffd17 	ldw	r2,-12(fp)
  801174:	1885883a 	add	r2,r3,r2
  801178:	1085883a 	add	r2,r2,r2
  80117c:	1085883a 	add	r2,r2,r2
  801180:	1007883a 	mov	r3,r2
  801184:	00804034 	movhi	r2,256
  801188:	1885883a 	add	r2,r3,r2
  80118c:	0007883a 	mov	r3,zero
  801190:	10c00035 	stwio	r3,0(r2)
}
  801194:	0001883a 	nop
  801198:	e037883a 	mov	sp,fp
  80119c:	dfc00117 	ldw	ra,4(sp)
  8011a0:	df000017 	ldw	fp,0(sp)
  8011a4:	dec00204 	addi	sp,sp,8
  8011a8:	f800283a 	ret

008011ac <print_hline>:
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){
  8011ac:	defff804 	addi	sp,sp,-32
  8011b0:	dfc00715 	stw	ra,28(sp)
  8011b4:	df000615 	stw	fp,24(sp)
  8011b8:	df000604 	addi	fp,sp,24
  8011bc:	e13ffc15 	stw	r4,-16(fp)
  8011c0:	e17ffd15 	stw	r5,-12(fp)
  8011c4:	e1bffe15 	stw	r6,-8(fp)
  8011c8:	e1ffff15 	stw	r7,-4(fp)



	if(x_start + len <= 320){
  8011cc:	e0fffc17 	ldw	r3,-16(fp)
  8011d0:	e0bffe17 	ldw	r2,-8(fp)
  8011d4:	1885883a 	add	r2,r3,r2
  8011d8:	10805068 	cmpgeui	r2,r2,321
  8011dc:	1000101e 	bne	r2,zero,801220 <print_hline+0x74>
		for(int i = 0; i < len; i++){
  8011e0:	e03ffa15 	stw	zero,-24(fp)
  8011e4:	00000a06 	br	801210 <print_hline+0x64>
			print_pix(x_start + i,y_start, RGB);
  8011e8:	e0fffa17 	ldw	r3,-24(fp)
  8011ec:	e0bffc17 	ldw	r2,-16(fp)
  8011f0:	1885883a 	add	r2,r3,r2
  8011f4:	e1bfff17 	ldw	r6,-4(fp)
  8011f8:	e17ffd17 	ldw	r5,-12(fp)
  8011fc:	1009883a 	mov	r4,r2
  801200:	08011000 	call	801100 <print_pix>
void print_hline(alt_u32 x_start,alt_u32 y_start, alt_u32 len,alt_u32 RGB){



	if(x_start + len <= 320){
		for(int i = 0; i < len; i++){
  801204:	e0bffa17 	ldw	r2,-24(fp)
  801208:	10800044 	addi	r2,r2,1
  80120c:	e0bffa15 	stw	r2,-24(fp)
  801210:	e0fffa17 	ldw	r3,-24(fp)
  801214:	e0bffe17 	ldw	r2,-8(fp)
  801218:	18bff336 	bltu	r3,r2,8011e8 <__alt_data_end+0xff8011e8>
		for(int i = 0; i < (320-x_start); i++){
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  80121c:	00001106 	br	801264 <print_hline+0xb8>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  801220:	e03ffb15 	stw	zero,-20(fp)
  801224:	00000a06 	br	801250 <print_hline+0xa4>
					print_pix(x_start + i,y_start, RGB);
  801228:	e0fffb17 	ldw	r3,-20(fp)
  80122c:	e0bffc17 	ldw	r2,-16(fp)
  801230:	1885883a 	add	r2,r3,r2
  801234:	e1bfff17 	ldw	r6,-4(fp)
  801238:	e17ffd17 	ldw	r5,-12(fp)
  80123c:	1009883a 	mov	r4,r2
  801240:	08011000 	call	801100 <print_pix>
			print_pix(x_start + i,y_start, RGB);
		}
	}
	else{

		for(int i = 0; i < (320-x_start); i++){
  801244:	e0bffb17 	ldw	r2,-20(fp)
  801248:	10800044 	addi	r2,r2,1
  80124c:	e0bffb15 	stw	r2,-20(fp)
  801250:	00c05004 	movi	r3,320
  801254:	e0bffc17 	ldw	r2,-16(fp)
  801258:	1885c83a 	sub	r2,r3,r2
  80125c:	e0fffb17 	ldw	r3,-20(fp)
  801260:	18bff136 	bltu	r3,r2,801228 <__alt_data_end+0xff801228>
					print_pix(x_start + i,y_start, RGB);
		}
	}

}
  801264:	0001883a 	nop
  801268:	e037883a 	mov	sp,fp
  80126c:	dfc00117 	ldw	ra,4(sp)
  801270:	df000017 	ldw	fp,0(sp)
  801274:	dec00204 	addi	sp,sp,8
  801278:	f800283a 	ret

0080127c <print_vline>:
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
  80127c:	defff804 	addi	sp,sp,-32
  801280:	dfc00715 	stw	ra,28(sp)
  801284:	df000615 	stw	fp,24(sp)
  801288:	df000604 	addi	fp,sp,24
  80128c:	e13ffc15 	stw	r4,-16(fp)
  801290:	e17ffd15 	stw	r5,-12(fp)
  801294:	e1bffe15 	stw	r6,-8(fp)
  801298:	e1ffff15 	stw	r7,-4(fp)
	if(y_start + len <= 240){
  80129c:	e0fffd17 	ldw	r3,-12(fp)
  8012a0:	e0bffe17 	ldw	r2,-8(fp)
  8012a4:	1885883a 	add	r2,r3,r2
  8012a8:	10803c68 	cmpgeui	r2,r2,241
  8012ac:	1000101e 	bne	r2,zero,8012f0 <print_vline+0x74>
			for(int i = 0; i < len; i++){
  8012b0:	e03ffa15 	stw	zero,-24(fp)
  8012b4:	00000a06 	br	8012e0 <print_vline+0x64>
				print_pix(x_start,y_start + i, RGB);
  8012b8:	e0fffa17 	ldw	r3,-24(fp)
  8012bc:	e0bffd17 	ldw	r2,-12(fp)
  8012c0:	1885883a 	add	r2,r3,r2
  8012c4:	e1bfff17 	ldw	r6,-4(fp)
  8012c8:	100b883a 	mov	r5,r2
  8012cc:	e13ffc17 	ldw	r4,-16(fp)
  8012d0:	08011000 	call	801100 <print_pix>

}
void print_vline(alt_u32 x_start,alt_u32 y_start, alt_u32 len, alt_u32 RGB)
{
	if(y_start + len <= 240){
			for(int i = 0; i < len; i++){
  8012d4:	e0bffa17 	ldw	r2,-24(fp)
  8012d8:	10800044 	addi	r2,r2,1
  8012dc:	e0bffa15 	stw	r2,-24(fp)
  8012e0:	e0fffa17 	ldw	r3,-24(fp)
  8012e4:	e0bffe17 	ldw	r2,-8(fp)
  8012e8:	18bff336 	bltu	r3,r2,8012b8 <__alt_data_end+0xff8012b8>

			for(int i = 0; i < (240-y_start); i++){
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  8012ec:	00001106 	br	801334 <print_vline+0xb8>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  8012f0:	e03ffb15 	stw	zero,-20(fp)
  8012f4:	00000a06 	br	801320 <print_vline+0xa4>
						print_pix(x_start,y_start +i , RGB);
  8012f8:	e0fffb17 	ldw	r3,-20(fp)
  8012fc:	e0bffd17 	ldw	r2,-12(fp)
  801300:	1885883a 	add	r2,r3,r2
  801304:	e1bfff17 	ldw	r6,-4(fp)
  801308:	100b883a 	mov	r5,r2
  80130c:	e13ffc17 	ldw	r4,-16(fp)
  801310:	08011000 	call	801100 <print_pix>
				print_pix(x_start,y_start + i, RGB);
			}
		}
		else{

			for(int i = 0; i < (240-y_start); i++){
  801314:	e0bffb17 	ldw	r2,-20(fp)
  801318:	10800044 	addi	r2,r2,1
  80131c:	e0bffb15 	stw	r2,-20(fp)
  801320:	00c03c04 	movi	r3,240
  801324:	e0bffd17 	ldw	r2,-12(fp)
  801328:	1885c83a 	sub	r2,r3,r2
  80132c:	e0fffb17 	ldw	r3,-20(fp)
  801330:	18bff136 	bltu	r3,r2,8012f8 <__alt_data_end+0xff8012f8>
						print_pix(x_start,y_start +i , RGB);
			}
		}
}
  801334:	0001883a 	nop
  801338:	e037883a 	mov	sp,fp
  80133c:	dfc00117 	ldw	ra,4(sp)
  801340:	df000017 	ldw	fp,0(sp)
  801344:	dec00204 	addi	sp,sp,8
  801348:	f800283a 	ret

0080134c <print_char>:

void  print_char(alt_u32 x,alt_u32 y,alt_u32 rgb,alt_u32 BG_RGB,char Character)
{
  80134c:	defff604 	addi	sp,sp,-40
  801350:	dfc00915 	stw	ra,36(sp)
  801354:	df000815 	stw	fp,32(sp)
  801358:	df000804 	addi	fp,sp,32
  80135c:	e13ffb15 	stw	r4,-20(fp)
  801360:	e17ffc15 	stw	r5,-16(fp)
  801364:	e1bffd15 	stw	r6,-12(fp)
  801368:	e1fffe15 	stw	r7,-8(fp)
  80136c:	e0800217 	ldw	r2,8(fp)
  801370:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
  801374:	e0bfff03 	ldbu	r2,-4(fp)
  801378:	e0bffa05 	stb	r2,-24(fp)
	for (row = 0; row <8; row++)
  80137c:	e03ff815 	stw	zero,-32(fp)
  801380:	00002c06 	br	801434 <print_char+0xe8>
	{
			temp =  (alt_8)font8x8_basic[token][row];
  801384:	e0fffa03 	ldbu	r3,-24(fp)
  801388:	00802034 	movhi	r2,128
  80138c:	10921c04 	addi	r2,r2,18544
  801390:	180690fa 	slli	r3,r3,3
  801394:	10c7883a 	add	r3,r2,r3
  801398:	e0bff817 	ldw	r2,-32(fp)
  80139c:	1885883a 	add	r2,r3,r2
  8013a0:	10800003 	ldbu	r2,0(r2)
  8013a4:	e0bffa45 	stb	r2,-23(fp)

			for (int pos = 0 ; pos != 8 ; pos++) {
  8013a8:	e03ff915 	stw	zero,-28(fp)
  8013ac:	00001b06 	br	80141c <print_char+0xd0>
			    if (temp & (1 << pos)) {
  8013b0:	e0fffa43 	ldbu	r3,-23(fp)
  8013b4:	e0bff917 	ldw	r2,-28(fp)
  8013b8:	1885d83a 	sra	r2,r3,r2
  8013bc:	1080004c 	andi	r2,r2,1
  8013c0:	10000a26 	beq	r2,zero,8013ec <print_char+0xa0>
			        // Current bit is set to 1
			    	print_pix(x+pos,y+row,rgb);
  8013c4:	e0fff917 	ldw	r3,-28(fp)
  8013c8:	e0bffb17 	ldw	r2,-20(fp)
  8013cc:	1889883a 	add	r4,r3,r2
  8013d0:	e0fff817 	ldw	r3,-32(fp)
  8013d4:	e0bffc17 	ldw	r2,-16(fp)
  8013d8:	1885883a 	add	r2,r3,r2
  8013dc:	e1bffd17 	ldw	r6,-12(fp)
  8013e0:	100b883a 	mov	r5,r2
  8013e4:	08011000 	call	801100 <print_pix>
  8013e8:	00000906 	br	801410 <print_char+0xc4>
			    } else {
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
  8013ec:	e0fff917 	ldw	r3,-28(fp)
  8013f0:	e0bffb17 	ldw	r2,-20(fp)
  8013f4:	1889883a 	add	r4,r3,r2
  8013f8:	e0fff817 	ldw	r3,-32(fp)
  8013fc:	e0bffc17 	ldw	r2,-16(fp)
  801400:	1885883a 	add	r2,r3,r2
  801404:	e1bffe17 	ldw	r6,-8(fp)
  801408:	100b883a 	mov	r5,r2
  80140c:	08011000 	call	801100 <print_pix>
	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
	{
			temp =  (alt_8)font8x8_basic[token][row];

			for (int pos = 0 ; pos != 8 ; pos++) {
  801410:	e0bff917 	ldw	r2,-28(fp)
  801414:	10800044 	addi	r2,r2,1
  801418:	e0bff915 	stw	r2,-28(fp)
  80141c:	e0bff917 	ldw	r2,-28(fp)
  801420:	10800218 	cmpnei	r2,r2,8
  801424:	103fe21e 	bne	r2,zero,8013b0 <__alt_data_end+0xff8013b0>
{
	alt_u8 temp;
	int row;

	alt_u8  token = (alt_8)Character;
	for (row = 0; row <8; row++)
  801428:	e0bff817 	ldw	r2,-32(fp)
  80142c:	10800044 	addi	r2,r2,1
  801430:	e0bff815 	stw	r2,-32(fp)
  801434:	e0bff817 	ldw	r2,-32(fp)
  801438:	10800210 	cmplti	r2,r2,8
  80143c:	103fd11e 	bne	r2,zero,801384 <__alt_data_end+0xff801384>
			        // Current bit is set to 0
			    	print_pix(x+pos,y+row,BG_RGB);
			    }
			}
	}
}
  801440:	0001883a 	nop
  801444:	e037883a 	mov	sp,fp
  801448:	dfc00117 	ldw	ra,4(sp)
  80144c:	df000017 	ldw	fp,0(sp)
  801450:	dec00204 	addi	sp,sp,8
  801454:	f800283a 	ret

00801458 <print_str>:
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
  801458:	defff804 	addi	sp,sp,-32
  80145c:	dfc00715 	stw	ra,28(sp)
  801460:	df000615 	stw	fp,24(sp)
  801464:	df000604 	addi	fp,sp,24
  801468:	e13ffc15 	stw	r4,-16(fp)
  80146c:	e17ffd15 	stw	r5,-12(fp)
  801470:	e1bffe15 	stw	r6,-8(fp)
  801474:	e1ffff15 	stw	r7,-4(fp)
	alt_u16 len = (alt_u16) strlen(str);
  801478:	e13fff17 	ldw	r4,-4(fp)
  80147c:	08023740 	call	802374 <strlen>
  801480:	e0bffb8d 	sth	r2,-18(fp)
	alt_u16 i;
	for(i=0; i< len; i++){
  801484:	e03ffb0d 	sth	zero,-20(fp)
  801488:	00001406 	br	8014dc <print_str+0x84>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
  80148c:	e0bffb0b 	ldhu	r2,-20(fp)
  801490:	100490fa 	slli	r2,r2,3
  801494:	1007883a 	mov	r3,r2
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	1889883a 	add	r4,r3,r2
  8014a0:	e0bffb0b 	ldhu	r2,-20(fp)
  8014a4:	e0ffff17 	ldw	r3,-4(fp)
  8014a8:	1885883a 	add	r2,r3,r2
  8014ac:	10800003 	ldbu	r2,0(r2)
  8014b0:	10803fcc 	andi	r2,r2,255
  8014b4:	1080201c 	xori	r2,r2,128
  8014b8:	10bfe004 	addi	r2,r2,-128
  8014bc:	d8800015 	stw	r2,0(sp)
  8014c0:	000f883a 	mov	r7,zero
  8014c4:	e1bffe17 	ldw	r6,-8(fp)
  8014c8:	e17ffd17 	ldw	r5,-12(fp)
  8014cc:	080134c0 	call	80134c <print_char>
}
void print_str(alt_u32 x_start, alt_u32 y_start,alt_u32 rgb,char *str)
{
	alt_u16 len = (alt_u16) strlen(str);
	alt_u16 i;
	for(i=0; i< len; i++){
  8014d0:	e0bffb0b 	ldhu	r2,-20(fp)
  8014d4:	10800044 	addi	r2,r2,1
  8014d8:	e0bffb0d 	sth	r2,-20(fp)
  8014dc:	e0fffb0b 	ldhu	r3,-20(fp)
  8014e0:	e0bffb8b 	ldhu	r2,-18(fp)
  8014e4:	18bfe936 	bltu	r3,r2,80148c <__alt_data_end+0xff80148c>
		print_char(x_start + i*8,y_start,rgb,0,str[i]);
	}
}
  8014e8:	0001883a 	nop
  8014ec:	e037883a 	mov	sp,fp
  8014f0:	dfc00117 	ldw	ra,4(sp)
  8014f4:	df000017 	ldw	fp,0(sp)
  8014f8:	dec00204 	addi	sp,sp,8
  8014fc:	f800283a 	ret

00801500 <print_symmetry_dots_circle>:

void print_symmetry_dots_circle(alt_u32 x, alt_u32 y, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  801500:	defffa04 	addi	sp,sp,-24
  801504:	dfc00515 	stw	ra,20(sp)
  801508:	df000415 	stw	fp,16(sp)
  80150c:	df000404 	addi	fp,sp,16
  801510:	e13ffc15 	stw	r4,-16(fp)
  801514:	e17ffd15 	stw	r5,-12(fp)
  801518:	e1bffe15 	stw	r6,-8(fp)
  80151c:	e1ffff15 	stw	r7,-4(fp)
		print_pix(x+x_centrum,y + y_centrum,rgb);
  801520:	e0fffc17 	ldw	r3,-16(fp)
  801524:	e0bffe17 	ldw	r2,-8(fp)
  801528:	1889883a 	add	r4,r3,r2
  80152c:	e0fffd17 	ldw	r3,-12(fp)
  801530:	e0bfff17 	ldw	r2,-4(fp)
  801534:	1885883a 	add	r2,r3,r2
  801538:	e1800217 	ldw	r6,8(fp)
  80153c:	100b883a 	mov	r5,r2
  801540:	08011000 	call	801100 <print_pix>
		print_pix(x+x_centrum,-y + y_centrum,rgb);
  801544:	e0fffc17 	ldw	r3,-16(fp)
  801548:	e0bffe17 	ldw	r2,-8(fp)
  80154c:	1889883a 	add	r4,r3,r2
  801550:	e0ffff17 	ldw	r3,-4(fp)
  801554:	e0bffd17 	ldw	r2,-12(fp)
  801558:	1885c83a 	sub	r2,r3,r2
  80155c:	e1800217 	ldw	r6,8(fp)
  801560:	100b883a 	mov	r5,r2
  801564:	08011000 	call	801100 <print_pix>
		print_pix(-x+x_centrum,y + y_centrum,rgb);
  801568:	e0fffe17 	ldw	r3,-8(fp)
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	1889c83a 	sub	r4,r3,r2
  801574:	e0fffd17 	ldw	r3,-12(fp)
  801578:	e0bfff17 	ldw	r2,-4(fp)
  80157c:	1885883a 	add	r2,r3,r2
  801580:	e1800217 	ldw	r6,8(fp)
  801584:	100b883a 	mov	r5,r2
  801588:	08011000 	call	801100 <print_pix>
		print_pix(-x+x_centrum,-y + y_centrum,rgb);
  80158c:	e0fffe17 	ldw	r3,-8(fp)
  801590:	e0bffc17 	ldw	r2,-16(fp)
  801594:	1889c83a 	sub	r4,r3,r2
  801598:	e0ffff17 	ldw	r3,-4(fp)
  80159c:	e0bffd17 	ldw	r2,-12(fp)
  8015a0:	1885c83a 	sub	r2,r3,r2
  8015a4:	e1800217 	ldw	r6,8(fp)
  8015a8:	100b883a 	mov	r5,r2
  8015ac:	08011000 	call	801100 <print_pix>

		print_pix(y + y_centrum,x+x_centrum,rgb);
  8015b0:	e0fffd17 	ldw	r3,-12(fp)
  8015b4:	e0bfff17 	ldw	r2,-4(fp)
  8015b8:	1889883a 	add	r4,r3,r2
  8015bc:	e0fffc17 	ldw	r3,-16(fp)
  8015c0:	e0bffe17 	ldw	r2,-8(fp)
  8015c4:	1885883a 	add	r2,r3,r2
  8015c8:	e1800217 	ldw	r6,8(fp)
  8015cc:	100b883a 	mov	r5,r2
  8015d0:	08011000 	call	801100 <print_pix>
		print_pix(-y + y_centrum,x+x_centrum,rgb);
  8015d4:	e0ffff17 	ldw	r3,-4(fp)
  8015d8:	e0bffd17 	ldw	r2,-12(fp)
  8015dc:	1889c83a 	sub	r4,r3,r2
  8015e0:	e0fffc17 	ldw	r3,-16(fp)
  8015e4:	e0bffe17 	ldw	r2,-8(fp)
  8015e8:	1885883a 	add	r2,r3,r2
  8015ec:	e1800217 	ldw	r6,8(fp)
  8015f0:	100b883a 	mov	r5,r2
  8015f4:	08011000 	call	801100 <print_pix>
		print_pix(y + y_centrum,-x+x_centrum,rgb);
  8015f8:	e0fffd17 	ldw	r3,-12(fp)
  8015fc:	e0bfff17 	ldw	r2,-4(fp)
  801600:	1889883a 	add	r4,r3,r2
  801604:	e0fffe17 	ldw	r3,-8(fp)
  801608:	e0bffc17 	ldw	r2,-16(fp)
  80160c:	1885c83a 	sub	r2,r3,r2
  801610:	e1800217 	ldw	r6,8(fp)
  801614:	100b883a 	mov	r5,r2
  801618:	08011000 	call	801100 <print_pix>
		print_pix(-y + y_centrum,-x+x_centrum,rgb);
  80161c:	e0ffff17 	ldw	r3,-4(fp)
  801620:	e0bffd17 	ldw	r2,-12(fp)
  801624:	1889c83a 	sub	r4,r3,r2
  801628:	e0fffe17 	ldw	r3,-8(fp)
  80162c:	e0bffc17 	ldw	r2,-16(fp)
  801630:	1885c83a 	sub	r2,r3,r2
  801634:	e1800217 	ldw	r6,8(fp)
  801638:	100b883a 	mov	r5,r2
  80163c:	08011000 	call	801100 <print_pix>

}
  801640:	0001883a 	nop
  801644:	e037883a 	mov	sp,fp
  801648:	dfc00117 	ldw	ra,4(sp)
  80164c:	df000017 	ldw	fp,0(sp)
  801650:	dec00204 	addi	sp,sp,8
  801654:	f800283a 	ret

00801658 <print_empty_circle>:
void print_empty_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  801658:	defff504 	addi	sp,sp,-44
  80165c:	dfc00a15 	stw	ra,40(sp)
  801660:	df000915 	stw	fp,36(sp)
  801664:	df000904 	addi	fp,sp,36
  801668:	e13ffc15 	stw	r4,-16(fp)
  80166c:	e17ffd15 	stw	r5,-12(fp)
  801670:	e1bffe15 	stw	r6,-8(fp)
  801674:	e1ffff15 	stw	r7,-4(fp)
		unsigned int value;
		unsigned int radius = radie;
  801678:	e0bffc17 	ldw	r2,-16(fp)
  80167c:	e0bffb15 	stw	r2,-20(fp)
		int x = 0;
  801680:	e03ff815 	stw	zero,-32(fp)
		int y = radie;
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	e0bff915 	stw	r2,-28(fp)

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
  80168c:	e0fff817 	ldw	r3,-32(fp)
  801690:	e13ff917 	ldw	r4,-28(fp)
  801694:	e0bfff17 	ldw	r2,-4(fp)
  801698:	d8800015 	stw	r2,0(sp)
  80169c:	e1fffe17 	ldw	r7,-8(fp)
  8016a0:	e1bffd17 	ldw	r6,-12(fp)
  8016a4:	200b883a 	mov	r5,r4
  8016a8:	1809883a 	mov	r4,r3
  8016ac:	08015000 	call	801500 <print_symmetry_dots_circle>
		int h = 1- radie;
  8016b0:	00c00044 	movi	r3,1
  8016b4:	e0bffc17 	ldw	r2,-16(fp)
  8016b8:	1885c83a 	sub	r2,r3,r2
  8016bc:	e0bffa15 	stw	r2,-24(fp)
		while(y > x){
  8016c0:	00003306 	br	801790 <print_empty_circle+0x138>
			if (h < 0){//east point
  8016c4:	e0bffa17 	ldw	r2,-24(fp)
  8016c8:	1000150e 	bge	r2,zero,801720 <print_empty_circle+0xc8>

				print_symmetry_dots_circle(x+1,y,x_centrum,y_centrum,rgb);
  8016cc:	e0bff817 	ldw	r2,-32(fp)
  8016d0:	10800044 	addi	r2,r2,1
  8016d4:	1009883a 	mov	r4,r2
  8016d8:	e0fff917 	ldw	r3,-28(fp)
  8016dc:	e0bfff17 	ldw	r2,-4(fp)
  8016e0:	d8800015 	stw	r2,0(sp)
  8016e4:	e1fffe17 	ldw	r7,-8(fp)
  8016e8:	e1bffd17 	ldw	r6,-12(fp)
  8016ec:	180b883a 	mov	r5,r3
  8016f0:	08015000 	call	801500 <print_symmetry_dots_circle>
				h = h +2*x +3;
  8016f4:	e0bff817 	ldw	r2,-32(fp)
  8016f8:	1085883a 	add	r2,r2,r2
  8016fc:	1007883a 	mov	r3,r2
  801700:	e0bffa17 	ldw	r2,-24(fp)
  801704:	1885883a 	add	r2,r3,r2
  801708:	108000c4 	addi	r2,r2,3
  80170c:	e0bffa15 	stw	r2,-24(fp)
				x= x+1;
  801710:	e0bff817 	ldw	r2,-32(fp)
  801714:	10800044 	addi	r2,r2,1
  801718:	e0bff815 	stw	r2,-32(fp)
  80171c:	00001c06 	br	801790 <print_empty_circle+0x138>

			}
			else{
				print_symmetry_dots_circle(x+1,y-1,x_centrum,y_centrum,rgb);
  801720:	e0bff817 	ldw	r2,-32(fp)
  801724:	10800044 	addi	r2,r2,1
  801728:	1007883a 	mov	r3,r2
  80172c:	e0bff917 	ldw	r2,-28(fp)
  801730:	10bfffc4 	addi	r2,r2,-1
  801734:	1009883a 	mov	r4,r2
  801738:	e0bfff17 	ldw	r2,-4(fp)
  80173c:	d8800015 	stw	r2,0(sp)
  801740:	e1fffe17 	ldw	r7,-8(fp)
  801744:	e1bffd17 	ldw	r6,-12(fp)
  801748:	200b883a 	mov	r5,r4
  80174c:	1809883a 	mov	r4,r3
  801750:	08015000 	call	801500 <print_symmetry_dots_circle>
				h= h+2*(x-y)+5;
  801754:	e0fff817 	ldw	r3,-32(fp)
  801758:	e0bff917 	ldw	r2,-28(fp)
  80175c:	1885c83a 	sub	r2,r3,r2
  801760:	1085883a 	add	r2,r2,r2
  801764:	1007883a 	mov	r3,r2
  801768:	e0bffa17 	ldw	r2,-24(fp)
  80176c:	1885883a 	add	r2,r3,r2
  801770:	10800144 	addi	r2,r2,5
  801774:	e0bffa15 	stw	r2,-24(fp)
				y=y-1;
  801778:	e0bff917 	ldw	r2,-28(fp)
  80177c:	10bfffc4 	addi	r2,r2,-1
  801780:	e0bff915 	stw	r2,-28(fp)
				x=x+1;
  801784:	e0bff817 	ldw	r2,-32(fp)
  801788:	10800044 	addi	r2,r2,1
  80178c:	e0bff815 	stw	r2,-32(fp)
		int x = 0;
		int y = radie;

		print_symmetry_dots_circle(x,y,x_centrum,y_centrum,rgb);
		int h = 1- radie;
		while(y > x){
  801790:	e0bff917 	ldw	r2,-28(fp)
  801794:	e0fff817 	ldw	r3,-32(fp)
  801798:	18bfca16 	blt	r3,r2,8016c4 <__alt_data_end+0xff8016c4>
				y=y-1;
				x=x+1;
			}

		}
}
  80179c:	0001883a 	nop
  8017a0:	e037883a 	mov	sp,fp
  8017a4:	dfc00117 	ldw	ra,4(sp)
  8017a8:	df000017 	ldw	fp,0(sp)
  8017ac:	dec00204 	addi	sp,sp,8
  8017b0:	f800283a 	ret

008017b4 <print_circle>:
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
  8017b4:	defff904 	addi	sp,sp,-28
  8017b8:	dfc00615 	stw	ra,24(sp)
  8017bc:	df000515 	stw	fp,20(sp)
  8017c0:	df000504 	addi	fp,sp,20
  8017c4:	e13ffc15 	stw	r4,-16(fp)
  8017c8:	e17ffd15 	stw	r5,-12(fp)
  8017cc:	e1bffe15 	stw	r6,-8(fp)
  8017d0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int radius = radie;
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	e0bffb15 	stw	r2,-20(fp)

	for(radius = radie; radius > 0; radius--)
  8017dc:	e0bffc17 	ldw	r2,-16(fp)
  8017e0:	e0bffb15 	stw	r2,-20(fp)
  8017e4:	00000806 	br	801808 <print_circle+0x54>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
  8017e8:	e1ffff17 	ldw	r7,-4(fp)
  8017ec:	e1bffe17 	ldw	r6,-8(fp)
  8017f0:	e17ffd17 	ldw	r5,-12(fp)
  8017f4:	e13ffb17 	ldw	r4,-20(fp)
  8017f8:	08016580 	call	801658 <print_empty_circle>
}
void print_circle(alt_u32 radie, alt_u32 x_centrum, alt_u32 y_centrum, alt_u32 rgb)
{
	unsigned int radius = radie;

	for(radius = radie; radius > 0; radius--)
  8017fc:	e0bffb17 	ldw	r2,-20(fp)
  801800:	10bfffc4 	addi	r2,r2,-1
  801804:	e0bffb15 	stw	r2,-20(fp)
  801808:	e0bffb17 	ldw	r2,-20(fp)
  80180c:	103ff61e 	bne	r2,zero,8017e8 <__alt_data_end+0xff8017e8>
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
  801810:	0001883a 	nop
  801814:	e037883a 	mov	sp,fp
  801818:	dfc00117 	ldw	ra,4(sp)
  80181c:	df000017 	ldw	fp,0(sp)
  801820:	dec00204 	addi	sp,sp,8
  801824:	f800283a 	ret

00801828 <clear_screen>:
void clear_screen(alt_u32 rgb){
  801828:	defffb04 	addi	sp,sp,-20
  80182c:	dfc00415 	stw	ra,16(sp)
  801830:	df000315 	stw	fp,12(sp)
  801834:	df000304 	addi	fp,sp,12
  801838:	e13fff15 	stw	r4,-4(fp)
	for(int y = 0 ;y <240;y++)
  80183c:	e03ffd15 	stw	zero,-12(fp)
  801840:	00001106 	br	801888 <clear_screen+0x60>
		for(int x = 0; x < 320; x++)
  801844:	e03ffe15 	stw	zero,-8(fp)
  801848:	00000906 	br	801870 <clear_screen+0x48>
			print_pix(x,y,rgb);
  80184c:	e0bffe17 	ldw	r2,-8(fp)
  801850:	e0fffd17 	ldw	r3,-12(fp)
  801854:	e1bfff17 	ldw	r6,-4(fp)
  801858:	180b883a 	mov	r5,r3
  80185c:	1009883a 	mov	r4,r2
  801860:	08011000 	call	801100 <print_pix>
	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
		for(int x = 0; x < 320; x++)
  801864:	e0bffe17 	ldw	r2,-8(fp)
  801868:	10800044 	addi	r2,r2,1
  80186c:	e0bffe15 	stw	r2,-8(fp)
  801870:	e0bffe17 	ldw	r2,-8(fp)
  801874:	10805010 	cmplti	r2,r2,320
  801878:	103ff41e 	bne	r2,zero,80184c <__alt_data_end+0xff80184c>

	for(radius = radie; radius > 0; radius--)
		print_empty_circle(radius,x_centrum, y_centrum, rgb);
}
void clear_screen(alt_u32 rgb){
	for(int y = 0 ;y <240;y++)
  80187c:	e0bffd17 	ldw	r2,-12(fp)
  801880:	10800044 	addi	r2,r2,1
  801884:	e0bffd15 	stw	r2,-12(fp)
  801888:	e0bffd17 	ldw	r2,-12(fp)
  80188c:	10803c10 	cmplti	r2,r2,240
  801890:	103fec1e 	bne	r2,zero,801844 <__alt_data_end+0xff801844>
		for(int x = 0; x < 320; x++)
			print_pix(x,y,rgb);
}
  801894:	0001883a 	nop
  801898:	e037883a 	mov	sp,fp
  80189c:	dfc00117 	ldw	ra,4(sp)
  8018a0:	df000017 	ldw	fp,0(sp)
  8018a4:	dec00204 	addi	sp,sp,8
  8018a8:	f800283a 	ret

008018ac <read_pixel_ram_int>:

pixel_data read_pixel_ram_int(alt_u32 x_start, alt_u32 y_start)
{
  8018ac:	defffb04 	addi	sp,sp,-20
  8018b0:	dfc00415 	stw	ra,16(sp)
  8018b4:	df000315 	stw	fp,12(sp)
  8018b8:	df000304 	addi	fp,sp,12
  8018bc:	e13ffe15 	stw	r4,-8(fp)
  8018c0:	e17fff15 	stw	r5,-4(fp)
	alt_u32 i = read_pixel(x_start, y_start);
  8018c4:	01405004 	movi	r5,320
  8018c8:	e13fff17 	ldw	r4,-4(fp)
  8018cc:	0801f2c0 	call	801f2c <__mulsi3>
  8018d0:	1007883a 	mov	r3,r2
  8018d4:	e0bffe17 	ldw	r2,-8(fp)
  8018d8:	1885883a 	add	r2,r3,r2
  8018dc:	1085883a 	add	r2,r2,r2
  8018e0:	1085883a 	add	r2,r2,r2
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	00804034 	movhi	r2,256
  8018ec:	1885883a 	add	r2,r3,r2
  8018f0:	10800037 	ldwio	r2,0(r2)
  8018f4:	e0bffd15 	stw	r2,-12(fp)
	return (alt_u8) i;
  8018f8:	e0bffd17 	ldw	r2,-12(fp)
}
  8018fc:	e037883a 	mov	sp,fp
  801900:	dfc00117 	ldw	ra,4(sp)
  801904:	df000017 	ldw	fp,0(sp)
  801908:	dec00204 	addi	sp,sp,8
  80190c:	f800283a 	ret

00801910 <queue_init>:

/***************************************************/

void queue_init(QUEUE *q)
{
  801910:	defffd04 	addi	sp,sp,-12
  801914:	dfc00215 	stw	ra,8(sp)
  801918:	df000115 	stw	fp,4(sp)
  80191c:	df000104 	addi	fp,sp,4
  801920:	e13fff15 	stw	r4,-4(fp)
    memset(q,0,sizeof(QUEUE));
  801924:	01803504 	movi	r6,212
  801928:	000b883a 	mov	r5,zero
  80192c:	e13fff17 	ldw	r4,-4(fp)
  801930:	0801fbc0 	call	801fbc <memset>
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
  801934:	e0bfff17 	ldw	r2,-4(fp)
  801938:	10003215 	stw	zero,200(r2)
    q->windex = 0;
  80193c:	e0bfff17 	ldw	r2,-4(fp)
  801940:	10003315 	stw	zero,204(r2)
    q->numitems = 0;
  801944:	e0bfff17 	ldw	r2,-4(fp)
  801948:	10003415 	stw	zero,208(r2)
}
  80194c:	0001883a 	nop
  801950:	e037883a 	mov	sp,fp
  801954:	dfc00117 	ldw	ra,4(sp)
  801958:	df000017 	ldw	fp,0(sp)
  80195c:	dec00204 	addi	sp,sp,8
  801960:	f800283a 	ret

00801964 <queue_enqueue>:

int queue_enqueue(QUEUE *q,int item)
{
  801964:	defff904 	addi	sp,sp,-28
  801968:	dfc00615 	stw	ra,24(sp)
  80196c:	df000515 	stw	fp,20(sp)
  801970:	df000504 	addi	fp,sp,20
  801974:	e13ffe15 	stw	r4,-8(fp)
  801978:	e17fff15 	stw	r5,-4(fp)
    int num_items = q->numitems;
  80197c:	e0bffe17 	ldw	r2,-8(fp)
  801980:	10803417 	ldw	r2,208(r2)
  801984:	e0bffc15 	stw	r2,-16(fp)
    int* temp_array;
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	10800c88 	cmpgei	r2,r2,50
  801990:	1000451e 	bne	r2,zero,801aa8 <queue_enqueue+0x144>
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
  801994:	e0bffc17 	ldw	r2,-16(fp)
  801998:	01400104 	movi	r5,4
  80199c:	1009883a 	mov	r4,r2
  8019a0:	0801f540 	call	801f54 <calloc>
  8019a4:	e0bffd15 	stw	r2,-12(fp)
        for(i = 0; i < num_items; i++)
  8019a8:	e03ffb15 	stw	zero,-20(fp)
  8019ac:	00001006 	br	8019f0 <queue_enqueue+0x8c>
            temp_array[i]= q->items[i];       //Copy the queue to temp array
  8019b0:	e0bffb17 	ldw	r2,-20(fp)
  8019b4:	1085883a 	add	r2,r2,r2
  8019b8:	1085883a 	add	r2,r2,r2
  8019bc:	1007883a 	mov	r3,r2
  8019c0:	e0bffd17 	ldw	r2,-12(fp)
  8019c4:	10c7883a 	add	r3,r2,r3
  8019c8:	e13ffe17 	ldw	r4,-8(fp)
  8019cc:	e0bffb17 	ldw	r2,-20(fp)
  8019d0:	1085883a 	add	r2,r2,r2
  8019d4:	1085883a 	add	r2,r2,r2
  8019d8:	2085883a 	add	r2,r4,r2
  8019dc:	10800017 	ldw	r2,0(r2)
  8019e0:	18800015 	stw	r2,0(r3)
    int i;

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
  8019e4:	e0bffb17 	ldw	r2,-20(fp)
  8019e8:	10800044 	addi	r2,r2,1
  8019ec:	e0bffb15 	stw	r2,-20(fp)
  8019f0:	e0fffb17 	ldw	r3,-20(fp)
  8019f4:	e0bffc17 	ldw	r2,-16(fp)
  8019f8:	18bfed16 	blt	r3,r2,8019b0 <__alt_data_end+0xff8019b0>
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0
  8019fc:	e0bffe17 	ldw	r2,-8(fp)
  801a00:	e0ffff17 	ldw	r3,-4(fp)
  801a04:	10c00015 	stw	r3,0(r2)

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  801a08:	00800044 	movi	r2,1
  801a0c:	e0bffb15 	stw	r2,-20(fp)
  801a10:	00001306 	br	801a60 <queue_enqueue+0xfc>
            q->items[i] = temp_array[i-1];
  801a14:	e0fffb17 	ldw	r3,-20(fp)
  801a18:	00900034 	movhi	r2,16384
  801a1c:	10bfffc4 	addi	r2,r2,-1
  801a20:	1885883a 	add	r2,r3,r2
  801a24:	1085883a 	add	r2,r2,r2
  801a28:	1085883a 	add	r2,r2,r2
  801a2c:	1007883a 	mov	r3,r2
  801a30:	e0bffd17 	ldw	r2,-12(fp)
  801a34:	10c5883a 	add	r2,r2,r3
  801a38:	10c00017 	ldw	r3,0(r2)
  801a3c:	e13ffe17 	ldw	r4,-8(fp)
  801a40:	e0bffb17 	ldw	r2,-20(fp)
  801a44:	1085883a 	add	r2,r2,r2
  801a48:	1085883a 	add	r2,r2,r2
  801a4c:	2085883a 	add	r2,r4,r2
  801a50:	10c00015 	stw	r3,0(r2)
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
  801a54:	e0bffb17 	ldw	r2,-20(fp)
  801a58:	10800044 	addi	r2,r2,1
  801a5c:	e0bffb15 	stw	r2,-20(fp)
  801a60:	e0bffc17 	ldw	r2,-16(fp)
  801a64:	10800044 	addi	r2,r2,1
  801a68:	e0fffb17 	ldw	r3,-20(fp)
  801a6c:	18bfe916 	blt	r3,r2,801a14 <__alt_data_end+0xff801a14>
            q->items[i] = temp_array[i-1];
        free(temp_array);                             //Dispose the temp array
  801a70:	e13ffd17 	ldw	r4,-12(fp)
  801a74:	0801f800 	call	801f80 <free>
        q->numitems++;                          //increment the number of items
  801a78:	e0bffe17 	ldw	r2,-8(fp)
  801a7c:	10803417 	ldw	r2,208(r2)
  801a80:	10c00044 	addi	r3,r2,1
  801a84:	e0bffe17 	ldw	r2,-8(fp)
  801a88:	10c03415 	stw	r3,208(r2)
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
  801a8c:	e0bffe17 	ldw	r2,-8(fp)
  801a90:	10803217 	ldw	r2,200(r2)
  801a94:	10c00044 	addi	r3,r2,1
  801a98:	e0bffe17 	ldw	r2,-8(fp)
  801a9c:	10c03215 	stw	r3,200(r2)
        return 1;                               //The enqueue succeeded
  801aa0:	00800044 	movi	r2,1
  801aa4:	00000106 	br	801aac <queue_enqueue+0x148>
    }
    else return 0;          //The queue is filled, cannot insert more
  801aa8:	0005883a 	mov	r2,zero

}
  801aac:	e037883a 	mov	sp,fp
  801ab0:	dfc00117 	ldw	ra,4(sp)
  801ab4:	df000017 	ldw	fp,0(sp)
  801ab8:	dec00204 	addi	sp,sp,8
  801abc:	f800283a 	ret

00801ac0 <queue_dequeue>:


}
*/
int queue_dequeue(QUEUE *q)
{
  801ac0:	defffd04 	addi	sp,sp,-12
  801ac4:	df000215 	stw	fp,8(sp)
  801ac8:	df000204 	addi	fp,sp,8
  801acc:	e13fff15 	stw	r4,-4(fp)
    int num_items = q->numitems;
  801ad0:	e0bfff17 	ldw	r2,-4(fp)
  801ad4:	10803417 	ldw	r2,208(r2)
  801ad8:	e0bffe15 	stw	r2,-8(fp)

    if (! num_items == 0)// The queue contains items
  801adc:	e0bffe17 	ldw	r2,-8(fp)
  801ae0:	10000c26 	beq	r2,zero,801b14 <queue_dequeue+0x54>
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
  801ae4:	e0bfff17 	ldw	r2,-4(fp)
  801ae8:	10803217 	ldw	r2,200(r2)
  801aec:	10ffffc4 	addi	r3,r2,-1
  801af0:	e0bfff17 	ldw	r2,-4(fp)
  801af4:	10c03215 	stw	r3,200(r2)
         q->numitems--;                 //Decrement the number of items in the queue
  801af8:	e0bfff17 	ldw	r2,-4(fp)
  801afc:	10803417 	ldw	r2,208(r2)
  801b00:	10ffffc4 	addi	r3,r2,-1
  801b04:	e0bfff17 	ldw	r2,-4(fp)
  801b08:	10c03415 	stw	r3,208(r2)
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
  801b0c:	00800044 	movi	r2,1
  801b10:	00000106 	br	801b18 <queue_dequeue+0x58>
    }
    else return 0;          //The queue is empty, nothing can be dequeued
  801b14:	0005883a 	mov	r2,zero


}
  801b18:	e037883a 	mov	sp,fp
  801b1c:	df000017 	ldw	fp,0(sp)
  801b20:	dec00104 	addi	sp,sp,4
  801b24:	f800283a 	ret

00801b28 <queue_print>:


void queue_print(QUEUE *q)
{
  801b28:	defffc04 	addi	sp,sp,-16
  801b2c:	dfc00315 	stw	ra,12(sp)
  801b30:	df000215 	stw	fp,8(sp)
  801b34:	df000204 	addi	fp,sp,8
  801b38:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
  801b3c:	e03ffe15 	stw	zero,-8(fp)
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801b40:	e0bfff17 	ldw	r2,-4(fp)
  801b44:	10803417 	ldw	r2,208(r2)
  801b48:	10bfffc4 	addi	r2,r2,-1
  801b4c:	e0bffe15 	stw	r2,-8(fp)
  801b50:	00000d06 	br	801b88 <queue_print+0x60>
        printf("%d", q->items[i] );
  801b54:	e0ffff17 	ldw	r3,-4(fp)
  801b58:	e0bffe17 	ldw	r2,-8(fp)
  801b5c:	1085883a 	add	r2,r2,r2
  801b60:	1085883a 	add	r2,r2,r2
  801b64:	1885883a 	add	r2,r3,r2
  801b68:	10800017 	ldw	r2,0(r2)
  801b6c:	100b883a 	mov	r5,r2
  801b70:	01002034 	movhi	r4,128
  801b74:	21120504 	addi	r4,r4,18452
  801b78:	08022b40 	call	8022b4 <printf>


void queue_print(QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801b7c:	e0bffe17 	ldw	r2,-8(fp)
  801b80:	10bfffc4 	addi	r2,r2,-1
  801b84:	e0bffe15 	stw	r2,-8(fp)
  801b88:	e0bffe17 	ldw	r2,-8(fp)
  801b8c:	103ff10e 	bge	r2,zero,801b54 <__alt_data_end+0xff801b54>
        printf("%d", q->items[i] );
    }
    printf("\n");
  801b90:	01000284 	movi	r4,10
  801b94:	08023080 	call	802308 <putchar>
}
  801b98:	0001883a 	nop
  801b9c:	e037883a 	mov	sp,fp
  801ba0:	dfc00117 	ldw	ra,4(sp)
  801ba4:	df000017 	ldw	fp,0(sp)
  801ba8:	dec00204 	addi	sp,sp,8
  801bac:	f800283a 	ret

00801bb0 <queue_print_screen>:
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb){
  801bb0:	defff604 	addi	sp,sp,-40
  801bb4:	dfc00915 	stw	ra,36(sp)
  801bb8:	df000815 	stw	fp,32(sp)
  801bbc:	df000804 	addi	fp,sp,32
  801bc0:	e13ffc15 	stw	r4,-16(fp)
  801bc4:	e17ffd15 	stw	r5,-12(fp)
  801bc8:	e1bffe15 	stw	r6,-8(fp)
  801bcc:	e1ffff15 	stw	r7,-4(fp)
	 int i = 0;
  801bd0:	e03ff815 	stw	zero,-32(fp)
	 int j;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801bd4:	e0bffc17 	ldw	r2,-16(fp)
  801bd8:	10803417 	ldw	r2,208(r2)
  801bdc:	10bfffc4 	addi	r2,r2,-1
  801be0:	e0bff815 	stw	r2,-32(fp)
  801be4:	00005c06 	br	801d58 <queue_print_screen+0x1a8>
#ifdef DEBUG
	        printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
#endif
	        j = q->numitems-1 -i;
  801be8:	e0bffc17 	ldw	r2,-16(fp)
  801bec:	10803417 	ldw	r2,208(r2)
  801bf0:	10ffffc4 	addi	r3,r2,-1
  801bf4:	e0bff817 	ldw	r2,-32(fp)
  801bf8:	1885c83a 	sub	r2,r3,r2
  801bfc:	e0bffb15 	stw	r2,-20(fp)
#ifdef DEBUG
	        printf("j%d\n",j);
#endif
	        for(int k = 1; k < 40;k++)
  801c00:	00800044 	movi	r2,1
  801c04:	e0bffa15 	stw	r2,-24(fp)
  801c08:	00000d06 	br	801c40 <queue_print_screen+0x90>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
  801c0c:	e0fffd17 	ldw	r3,-12(fp)
  801c10:	e0bffb17 	ldw	r2,-20(fp)
  801c14:	1885883a 	add	r2,r3,r2
  801c18:	1009883a 	mov	r4,r2
  801c1c:	e0fffe17 	ldw	r3,-8(fp)
  801c20:	e0bffa17 	ldw	r2,-24(fp)
  801c24:	1885c83a 	sub	r2,r3,r2
  801c28:	000d883a 	mov	r6,zero
  801c2c:	100b883a 	mov	r5,r2
  801c30:	08011000 	call	801100 <print_pix>
#endif
	        j = q->numitems-1 -i;
#ifdef DEBUG
	        printf("j%d\n",j);
#endif
	        for(int k = 1; k < 40;k++)
  801c34:	e0bffa17 	ldw	r2,-24(fp)
  801c38:	10800044 	addi	r2,r2,1
  801c3c:	e0bffa15 	stw	r2,-24(fp)
  801c40:	e0bffa17 	ldw	r2,-24(fp)
  801c44:	10800a10 	cmplti	r2,r2,40
  801c48:	103ff01e 	bne	r2,zero,801c0c <__alt_data_end+0xff801c0c>
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement
	        print_pix(x_origo + j, y_origo,7);//Fix ccordinate system line
  801c4c:	e0fffd17 	ldw	r3,-12(fp)
  801c50:	e0bffb17 	ldw	r2,-20(fp)
  801c54:	1885883a 	add	r2,r3,r2
  801c58:	1007883a 	mov	r3,r2
  801c5c:	e0bffe17 	ldw	r2,-8(fp)
  801c60:	018001c4 	movi	r6,7
  801c64:	100b883a 	mov	r5,r2
  801c68:	1809883a 	mov	r4,r3
  801c6c:	08011000 	call	801100 <print_pix>
	        value = offset + q->items[i]/normalization;
  801c70:	e0fffc17 	ldw	r3,-16(fp)
  801c74:	e0bff817 	ldw	r2,-32(fp)
  801c78:	1085883a 	add	r2,r2,r2
  801c7c:	1085883a 	add	r2,r2,r2
  801c80:	1885883a 	add	r2,r3,r2
  801c84:	10800017 	ldw	r2,0(r2)
  801c88:	e17fff17 	ldw	r5,-4(fp)
  801c8c:	1009883a 	mov	r4,r2
  801c90:	0801d780 	call	801d78 <__divsi3>
  801c94:	1007883a 	mov	r3,r2
  801c98:	e0800217 	ldw	r2,8(fp)
  801c9c:	1885883a 	add	r2,r3,r2
  801ca0:	e0bff915 	stw	r2,-28(fp)
	        if(offset + q->items[i]/normalization > 40)
  801ca4:	e0fffc17 	ldw	r3,-16(fp)
  801ca8:	e0bff817 	ldw	r2,-32(fp)
  801cac:	1085883a 	add	r2,r2,r2
  801cb0:	1085883a 	add	r2,r2,r2
  801cb4:	1885883a 	add	r2,r3,r2
  801cb8:	10800017 	ldw	r2,0(r2)
  801cbc:	e17fff17 	ldw	r5,-4(fp)
  801cc0:	1009883a 	mov	r4,r2
  801cc4:	0801d780 	call	801d78 <__divsi3>
  801cc8:	1007883a 	mov	r3,r2
  801ccc:	e0800217 	ldw	r2,8(fp)
  801cd0:	1885883a 	add	r2,r3,r2
  801cd4:	10800a50 	cmplti	r2,r2,41
  801cd8:	1000021e 	bne	r2,zero,801ce4 <queue_print_screen+0x134>
	        	value = 40;
  801cdc:	00800a04 	movi	r2,40
  801ce0:	e0bff915 	stw	r2,-28(fp)
	        if (offset + q->items[i]/normalization < 0)
  801ce4:	e0fffc17 	ldw	r3,-16(fp)
  801ce8:	e0bff817 	ldw	r2,-32(fp)
  801cec:	1085883a 	add	r2,r2,r2
  801cf0:	1085883a 	add	r2,r2,r2
  801cf4:	1885883a 	add	r2,r3,r2
  801cf8:	10800017 	ldw	r2,0(r2)
  801cfc:	e17fff17 	ldw	r5,-4(fp)
  801d00:	1009883a 	mov	r4,r2
  801d04:	0801d780 	call	801d78 <__divsi3>
  801d08:	1007883a 	mov	r3,r2
  801d0c:	e0800217 	ldw	r2,8(fp)
  801d10:	1885883a 	add	r2,r3,r2
  801d14:	1000010e 	bge	r2,zero,801d1c <queue_print_screen+0x16c>
	          value = 0;
  801d18:	e03ff915 	stw	zero,-28(fp)

	        print_pix(x_origo + j,y_origo-value,rgb);
  801d1c:	e0fffd17 	ldw	r3,-12(fp)
  801d20:	e0bffb17 	ldw	r2,-20(fp)
  801d24:	1885883a 	add	r2,r3,r2
  801d28:	1009883a 	mov	r4,r2
  801d2c:	e0fffe17 	ldw	r3,-8(fp)
  801d30:	e0bff917 	ldw	r2,-28(fp)
  801d34:	1885c83a 	sub	r2,r3,r2
  801d38:	1007883a 	mov	r3,r2
  801d3c:	e0800317 	ldw	r2,12(fp)
  801d40:	100d883a 	mov	r6,r2
  801d44:	180b883a 	mov	r5,r3
  801d48:	08011000 	call	801100 <print_pix>
}
void queue_print_screen(QUEUE *q, int x_origo, int y_origo, int normalization, int offset, int rgb){
	 int i = 0;
	 int j;
	 int value;
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
  801d4c:	e0bff817 	ldw	r2,-32(fp)
  801d50:	10bfffc4 	addi	r2,r2,-1
  801d54:	e0bff815 	stw	r2,-32(fp)
  801d58:	e0bff817 	ldw	r2,-32(fp)
  801d5c:	103fa20e 	bge	r2,zero,801be8 <__alt_data_end+0xff801be8>
	        if (offset + q->items[i]/normalization < 0)
	          value = 0;

	        print_pix(x_origo + j,y_origo-value,rgb);
	    }
}
  801d60:	0001883a 	nop
  801d64:	e037883a 	mov	sp,fp
  801d68:	dfc00117 	ldw	ra,4(sp)
  801d6c:	df000017 	ldw	fp,0(sp)
  801d70:	dec00204 	addi	sp,sp,8
  801d74:	f800283a 	ret

00801d78 <__divsi3>:
  801d78:	20001b16 	blt	r4,zero,801de8 <__divsi3+0x70>
  801d7c:	000f883a 	mov	r7,zero
  801d80:	28001616 	blt	r5,zero,801ddc <__divsi3+0x64>
  801d84:	200d883a 	mov	r6,r4
  801d88:	29001a2e 	bgeu	r5,r4,801df4 <__divsi3+0x7c>
  801d8c:	00800804 	movi	r2,32
  801d90:	00c00044 	movi	r3,1
  801d94:	00000106 	br	801d9c <__divsi3+0x24>
  801d98:	10000d26 	beq	r2,zero,801dd0 <__divsi3+0x58>
  801d9c:	294b883a 	add	r5,r5,r5
  801da0:	10bfffc4 	addi	r2,r2,-1
  801da4:	18c7883a 	add	r3,r3,r3
  801da8:	293ffb36 	bltu	r5,r4,801d98 <__alt_data_end+0xff801d98>
  801dac:	0005883a 	mov	r2,zero
  801db0:	18000726 	beq	r3,zero,801dd0 <__divsi3+0x58>
  801db4:	0005883a 	mov	r2,zero
  801db8:	31400236 	bltu	r6,r5,801dc4 <__divsi3+0x4c>
  801dbc:	314dc83a 	sub	r6,r6,r5
  801dc0:	10c4b03a 	or	r2,r2,r3
  801dc4:	1806d07a 	srli	r3,r3,1
  801dc8:	280ad07a 	srli	r5,r5,1
  801dcc:	183ffa1e 	bne	r3,zero,801db8 <__alt_data_end+0xff801db8>
  801dd0:	38000126 	beq	r7,zero,801dd8 <__divsi3+0x60>
  801dd4:	0085c83a 	sub	r2,zero,r2
  801dd8:	f800283a 	ret
  801ddc:	014bc83a 	sub	r5,zero,r5
  801de0:	39c0005c 	xori	r7,r7,1
  801de4:	003fe706 	br	801d84 <__alt_data_end+0xff801d84>
  801de8:	0109c83a 	sub	r4,zero,r4
  801dec:	01c00044 	movi	r7,1
  801df0:	003fe306 	br	801d80 <__alt_data_end+0xff801d80>
  801df4:	00c00044 	movi	r3,1
  801df8:	003fee06 	br	801db4 <__alt_data_end+0xff801db4>

00801dfc <__modsi3>:
  801dfc:	20001716 	blt	r4,zero,801e5c <__modsi3+0x60>
  801e00:	000f883a 	mov	r7,zero
  801e04:	2005883a 	mov	r2,r4
  801e08:	28001216 	blt	r5,zero,801e54 <__modsi3+0x58>
  801e0c:	2900162e 	bgeu	r5,r4,801e68 <__modsi3+0x6c>
  801e10:	01800804 	movi	r6,32
  801e14:	00c00044 	movi	r3,1
  801e18:	00000106 	br	801e20 <__modsi3+0x24>
  801e1c:	30000a26 	beq	r6,zero,801e48 <__modsi3+0x4c>
  801e20:	294b883a 	add	r5,r5,r5
  801e24:	31bfffc4 	addi	r6,r6,-1
  801e28:	18c7883a 	add	r3,r3,r3
  801e2c:	293ffb36 	bltu	r5,r4,801e1c <__alt_data_end+0xff801e1c>
  801e30:	18000526 	beq	r3,zero,801e48 <__modsi3+0x4c>
  801e34:	1806d07a 	srli	r3,r3,1
  801e38:	11400136 	bltu	r2,r5,801e40 <__modsi3+0x44>
  801e3c:	1145c83a 	sub	r2,r2,r5
  801e40:	280ad07a 	srli	r5,r5,1
  801e44:	183ffb1e 	bne	r3,zero,801e34 <__alt_data_end+0xff801e34>
  801e48:	38000126 	beq	r7,zero,801e50 <__modsi3+0x54>
  801e4c:	0085c83a 	sub	r2,zero,r2
  801e50:	f800283a 	ret
  801e54:	014bc83a 	sub	r5,zero,r5
  801e58:	003fec06 	br	801e0c <__alt_data_end+0xff801e0c>
  801e5c:	0109c83a 	sub	r4,zero,r4
  801e60:	01c00044 	movi	r7,1
  801e64:	003fe706 	br	801e04 <__alt_data_end+0xff801e04>
  801e68:	00c00044 	movi	r3,1
  801e6c:	003ff106 	br	801e34 <__alt_data_end+0xff801e34>

00801e70 <__udivsi3>:
  801e70:	200d883a 	mov	r6,r4
  801e74:	2900152e 	bgeu	r5,r4,801ecc <__udivsi3+0x5c>
  801e78:	28001416 	blt	r5,zero,801ecc <__udivsi3+0x5c>
  801e7c:	00800804 	movi	r2,32
  801e80:	00c00044 	movi	r3,1
  801e84:	00000206 	br	801e90 <__udivsi3+0x20>
  801e88:	10000e26 	beq	r2,zero,801ec4 <__udivsi3+0x54>
  801e8c:	28000516 	blt	r5,zero,801ea4 <__udivsi3+0x34>
  801e90:	294b883a 	add	r5,r5,r5
  801e94:	10bfffc4 	addi	r2,r2,-1
  801e98:	18c7883a 	add	r3,r3,r3
  801e9c:	293ffa36 	bltu	r5,r4,801e88 <__alt_data_end+0xff801e88>
  801ea0:	18000826 	beq	r3,zero,801ec4 <__udivsi3+0x54>
  801ea4:	0005883a 	mov	r2,zero
  801ea8:	31400236 	bltu	r6,r5,801eb4 <__udivsi3+0x44>
  801eac:	314dc83a 	sub	r6,r6,r5
  801eb0:	10c4b03a 	or	r2,r2,r3
  801eb4:	1806d07a 	srli	r3,r3,1
  801eb8:	280ad07a 	srli	r5,r5,1
  801ebc:	183ffa1e 	bne	r3,zero,801ea8 <__alt_data_end+0xff801ea8>
  801ec0:	f800283a 	ret
  801ec4:	0005883a 	mov	r2,zero
  801ec8:	f800283a 	ret
  801ecc:	00c00044 	movi	r3,1
  801ed0:	003ff406 	br	801ea4 <__alt_data_end+0xff801ea4>

00801ed4 <__umodsi3>:
  801ed4:	2005883a 	mov	r2,r4
  801ed8:	2900122e 	bgeu	r5,r4,801f24 <__umodsi3+0x50>
  801edc:	28001116 	blt	r5,zero,801f24 <__umodsi3+0x50>
  801ee0:	01800804 	movi	r6,32
  801ee4:	00c00044 	movi	r3,1
  801ee8:	00000206 	br	801ef4 <__umodsi3+0x20>
  801eec:	30000c26 	beq	r6,zero,801f20 <__umodsi3+0x4c>
  801ef0:	28000516 	blt	r5,zero,801f08 <__umodsi3+0x34>
  801ef4:	294b883a 	add	r5,r5,r5
  801ef8:	31bfffc4 	addi	r6,r6,-1
  801efc:	18c7883a 	add	r3,r3,r3
  801f00:	293ffa36 	bltu	r5,r4,801eec <__alt_data_end+0xff801eec>
  801f04:	18000626 	beq	r3,zero,801f20 <__umodsi3+0x4c>
  801f08:	1806d07a 	srli	r3,r3,1
  801f0c:	11400136 	bltu	r2,r5,801f14 <__umodsi3+0x40>
  801f10:	1145c83a 	sub	r2,r2,r5
  801f14:	280ad07a 	srli	r5,r5,1
  801f18:	183ffb1e 	bne	r3,zero,801f08 <__alt_data_end+0xff801f08>
  801f1c:	f800283a 	ret
  801f20:	f800283a 	ret
  801f24:	00c00044 	movi	r3,1
  801f28:	003ff706 	br	801f08 <__alt_data_end+0xff801f08>

00801f2c <__mulsi3>:
  801f2c:	0005883a 	mov	r2,zero
  801f30:	20000726 	beq	r4,zero,801f50 <__mulsi3+0x24>
  801f34:	20c0004c 	andi	r3,r4,1
  801f38:	2008d07a 	srli	r4,r4,1
  801f3c:	18000126 	beq	r3,zero,801f44 <__mulsi3+0x18>
  801f40:	1145883a 	add	r2,r2,r5
  801f44:	294b883a 	add	r5,r5,r5
  801f48:	203ffa1e 	bne	r4,zero,801f34 <__alt_data_end+0xff801f34>
  801f4c:	f800283a 	ret
  801f50:	f800283a 	ret

00801f54 <calloc>:
  801f54:	00802034 	movhi	r2,128
  801f58:	1093db04 	addi	r2,r2,20332
  801f5c:	280d883a 	mov	r6,r5
  801f60:	200b883a 	mov	r5,r4
  801f64:	11000017 	ldw	r4,0(r2)
  801f68:	0801fdc1 	jmpi	801fdc <_calloc_r>

00801f6c <malloc>:
  801f6c:	00802034 	movhi	r2,128
  801f70:	1093db04 	addi	r2,r2,20332
  801f74:	200b883a 	mov	r5,r4
  801f78:	11000017 	ldw	r4,0(r2)
  801f7c:	08021201 	jmpi	802120 <_malloc_r>

00801f80 <free>:
  801f80:	00802034 	movhi	r2,128
  801f84:	1093db04 	addi	r2,r2,20332
  801f88:	200b883a 	mov	r5,r4
  801f8c:	11000017 	ldw	r4,0(r2)
  801f90:	080203c1 	jmpi	80203c <_free_r>

00801f94 <memcpy>:
  801f94:	2005883a 	mov	r2,r4
  801f98:	2007883a 	mov	r3,r4
  801f9c:	218d883a 	add	r6,r4,r6
  801fa0:	19800526 	beq	r3,r6,801fb8 <memcpy+0x24>
  801fa4:	29000003 	ldbu	r4,0(r5)
  801fa8:	18c00044 	addi	r3,r3,1
  801fac:	29400044 	addi	r5,r5,1
  801fb0:	193fffc5 	stb	r4,-1(r3)
  801fb4:	003ffa06 	br	801fa0 <__alt_data_end+0xff801fa0>
  801fb8:	f800283a 	ret

00801fbc <memset>:
  801fbc:	2005883a 	mov	r2,r4
  801fc0:	2007883a 	mov	r3,r4
  801fc4:	218d883a 	add	r6,r4,r6
  801fc8:	19800326 	beq	r3,r6,801fd8 <memset+0x1c>
  801fcc:	19400005 	stb	r5,0(r3)
  801fd0:	18c00044 	addi	r3,r3,1
  801fd4:	003ffc06 	br	801fc8 <__alt_data_end+0xff801fc8>
  801fd8:	f800283a 	ret

00801fdc <_calloc_r>:
  801fdc:	defffd04 	addi	sp,sp,-12
  801fe0:	dc000015 	stw	r16,0(sp)
  801fe4:	2021883a 	mov	r16,r4
  801fe8:	2809883a 	mov	r4,r5
  801fec:	300b883a 	mov	r5,r6
  801ff0:	dfc00215 	stw	ra,8(sp)
  801ff4:	dc400115 	stw	r17,4(sp)
  801ff8:	0801f2c0 	call	801f2c <__mulsi3>
  801ffc:	8009883a 	mov	r4,r16
  802000:	100b883a 	mov	r5,r2
  802004:	1023883a 	mov	r17,r2
  802008:	08021200 	call	802120 <_malloc_r>
  80200c:	1021883a 	mov	r16,r2
  802010:	10000426 	beq	r2,zero,802024 <_calloc_r+0x48>
  802014:	880d883a 	mov	r6,r17
  802018:	000b883a 	mov	r5,zero
  80201c:	1009883a 	mov	r4,r2
  802020:	0801fbc0 	call	801fbc <memset>
  802024:	8005883a 	mov	r2,r16
  802028:	dfc00217 	ldw	ra,8(sp)
  80202c:	dc400117 	ldw	r17,4(sp)
  802030:	dc000017 	ldw	r16,0(sp)
  802034:	dec00304 	addi	sp,sp,12
  802038:	f800283a 	ret

0080203c <_free_r>:
  80203c:	28003726 	beq	r5,zero,80211c <_free_r+0xe0>
  802040:	28ffff17 	ldw	r3,-4(r5)
  802044:	28bfff04 	addi	r2,r5,-4
  802048:	1800010e 	bge	r3,zero,802050 <_free_r+0x14>
  80204c:	10c5883a 	add	r2,r2,r3
  802050:	01402034 	movhi	r5,128
  802054:	2955b404 	addi	r5,r5,22224
  802058:	28c00017 	ldw	r3,0(r5)
  80205c:	280d883a 	mov	r6,r5
  802060:	1800031e 	bne	r3,zero,802070 <_free_r+0x34>
  802064:	10000115 	stw	zero,4(r2)
  802068:	28800015 	stw	r2,0(r5)
  80206c:	f800283a 	ret
  802070:	10c00c2e 	bgeu	r2,r3,8020a4 <_free_r+0x68>
  802074:	11000017 	ldw	r4,0(r2)
  802078:	110b883a 	add	r5,r2,r4
  80207c:	1940041e 	bne	r3,r5,802090 <_free_r+0x54>
  802080:	19400017 	ldw	r5,0(r3)
  802084:	18c00117 	ldw	r3,4(r3)
  802088:	2909883a 	add	r4,r5,r4
  80208c:	11000015 	stw	r4,0(r2)
  802090:	10c00115 	stw	r3,4(r2)
  802094:	30800015 	stw	r2,0(r6)
  802098:	f800283a 	ret
  80209c:	11400336 	bltu	r2,r5,8020ac <_free_r+0x70>
  8020a0:	2807883a 	mov	r3,r5
  8020a4:	19400117 	ldw	r5,4(r3)
  8020a8:	283ffc1e 	bne	r5,zero,80209c <__alt_data_end+0xff80209c>
  8020ac:	19c00017 	ldw	r7,0(r3)
  8020b0:	19cd883a 	add	r6,r3,r7
  8020b4:	30800a1e 	bne	r6,r2,8020e0 <_free_r+0xa4>
  8020b8:	10800017 	ldw	r2,0(r2)
  8020bc:	3885883a 	add	r2,r7,r2
  8020c0:	18800015 	stw	r2,0(r3)
  8020c4:	1889883a 	add	r4,r3,r2
  8020c8:	2900141e 	bne	r5,r4,80211c <_free_r+0xe0>
  8020cc:	29000017 	ldw	r4,0(r5)
  8020d0:	2085883a 	add	r2,r4,r2
  8020d4:	18800015 	stw	r2,0(r3)
  8020d8:	28800117 	ldw	r2,4(r5)
  8020dc:	00000e06 	br	802118 <_free_r+0xdc>
  8020e0:	1180032e 	bgeu	r2,r6,8020f0 <_free_r+0xb4>
  8020e4:	00800304 	movi	r2,12
  8020e8:	20800015 	stw	r2,0(r4)
  8020ec:	f800283a 	ret
  8020f0:	11000017 	ldw	r4,0(r2)
  8020f4:	110d883a 	add	r6,r2,r4
  8020f8:	2980061e 	bne	r5,r6,802114 <_free_r+0xd8>
  8020fc:	29800017 	ldw	r6,0(r5)
  802100:	3109883a 	add	r4,r6,r4
  802104:	11000015 	stw	r4,0(r2)
  802108:	29000117 	ldw	r4,4(r5)
  80210c:	11000115 	stw	r4,4(r2)
  802110:	00000106 	br	802118 <_free_r+0xdc>
  802114:	11400115 	stw	r5,4(r2)
  802118:	18800115 	stw	r2,4(r3)
  80211c:	f800283a 	ret

00802120 <_malloc_r>:
  802120:	defffb04 	addi	sp,sp,-20
  802124:	00bfff04 	movi	r2,-4
  802128:	dc400115 	stw	r17,4(sp)
  80212c:	2c4000c4 	addi	r17,r5,3
  802130:	88a2703a 	and	r17,r17,r2
  802134:	dc800215 	stw	r18,8(sp)
  802138:	dfc00415 	stw	ra,16(sp)
  80213c:	dcc00315 	stw	r19,12(sp)
  802140:	dc000015 	stw	r16,0(sp)
  802144:	8c400204 	addi	r17,r17,8
  802148:	00800304 	movi	r2,12
  80214c:	2025883a 	mov	r18,r4
  802150:	8880022e 	bgeu	r17,r2,80215c <_malloc_r+0x3c>
  802154:	1023883a 	mov	r17,r2
  802158:	00000506 	br	802170 <_malloc_r+0x50>
  80215c:	8800040e 	bge	r17,zero,802170 <_malloc_r+0x50>
  802160:	00800304 	movi	r2,12
  802164:	90800015 	stw	r2,0(r18)
  802168:	0005883a 	mov	r2,zero
  80216c:	00003b06 	br	80225c <_malloc_r+0x13c>
  802170:	897ffb36 	bltu	r17,r5,802160 <__alt_data_end+0xff802160>
  802174:	00802034 	movhi	r2,128
  802178:	1095b404 	addi	r2,r2,22224
  80217c:	10c00017 	ldw	r3,0(r2)
  802180:	1009883a 	mov	r4,r2
  802184:	1821883a 	mov	r16,r3
  802188:	80000926 	beq	r16,zero,8021b0 <_malloc_r+0x90>
  80218c:	80800017 	ldw	r2,0(r16)
  802190:	1445c83a 	sub	r2,r2,r17
  802194:	10001516 	blt	r2,zero,8021ec <_malloc_r+0xcc>
  802198:	014002c4 	movi	r5,11
  80219c:	28800d2e 	bgeu	r5,r2,8021d4 <_malloc_r+0xb4>
  8021a0:	80800015 	stw	r2,0(r16)
  8021a4:	80a1883a 	add	r16,r16,r2
  8021a8:	84400015 	stw	r17,0(r16)
  8021ac:	8000221e 	bne	r16,zero,802238 <_malloc_r+0x118>
  8021b0:	04002034 	movhi	r16,128
  8021b4:	8415b304 	addi	r16,r16,22220
  8021b8:	80800017 	ldw	r2,0(r16)
  8021bc:	10000e1e 	bne	r2,zero,8021f8 <_malloc_r+0xd8>
  8021c0:	000b883a 	mov	r5,zero
  8021c4:	9009883a 	mov	r4,r18
  8021c8:	08023240 	call	802324 <_sbrk_r>
  8021cc:	80800015 	stw	r2,0(r16)
  8021d0:	00000906 	br	8021f8 <_malloc_r+0xd8>
  8021d4:	80800117 	ldw	r2,4(r16)
  8021d8:	1c00021e 	bne	r3,r16,8021e4 <_malloc_r+0xc4>
  8021dc:	20800015 	stw	r2,0(r4)
  8021e0:	00001506 	br	802238 <_malloc_r+0x118>
  8021e4:	18800115 	stw	r2,4(r3)
  8021e8:	00001306 	br	802238 <_malloc_r+0x118>
  8021ec:	8007883a 	mov	r3,r16
  8021f0:	84000117 	ldw	r16,4(r16)
  8021f4:	003fe406 	br	802188 <__alt_data_end+0xff802188>
  8021f8:	880b883a 	mov	r5,r17
  8021fc:	9009883a 	mov	r4,r18
  802200:	08023240 	call	802324 <_sbrk_r>
  802204:	04ffffc4 	movi	r19,-1
  802208:	14ffd526 	beq	r2,r19,802160 <__alt_data_end+0xff802160>
  80220c:	140000c4 	addi	r16,r2,3
  802210:	00ffff04 	movi	r3,-4
  802214:	80e0703a 	and	r16,r16,r3
  802218:	1400021e 	bne	r2,r16,802224 <_malloc_r+0x104>
  80221c:	84400015 	stw	r17,0(r16)
  802220:	00000506 	br	802238 <_malloc_r+0x118>
  802224:	808bc83a 	sub	r5,r16,r2
  802228:	9009883a 	mov	r4,r18
  80222c:	08023240 	call	802324 <_sbrk_r>
  802230:	14fffa1e 	bne	r2,r19,80221c <__alt_data_end+0xff80221c>
  802234:	003fca06 	br	802160 <__alt_data_end+0xff802160>
  802238:	810002c4 	addi	r4,r16,11
  80223c:	00bffe04 	movi	r2,-8
  802240:	80c00104 	addi	r3,r16,4
  802244:	2084703a 	and	r2,r4,r2
  802248:	10c7c83a 	sub	r3,r2,r3
  80224c:	18000326 	beq	r3,zero,80225c <_malloc_r+0x13c>
  802250:	80e1883a 	add	r16,r16,r3
  802254:	00c7c83a 	sub	r3,zero,r3
  802258:	80c00015 	stw	r3,0(r16)
  80225c:	dfc00417 	ldw	ra,16(sp)
  802260:	dcc00317 	ldw	r19,12(sp)
  802264:	dc800217 	ldw	r18,8(sp)
  802268:	dc400117 	ldw	r17,4(sp)
  80226c:	dc000017 	ldw	r16,0(sp)
  802270:	dec00504 	addi	sp,sp,20
  802274:	f800283a 	ret

00802278 <_printf_r>:
  802278:	defffd04 	addi	sp,sp,-12
  80227c:	dfc00015 	stw	ra,0(sp)
  802280:	d9800115 	stw	r6,4(sp)
  802284:	d9c00215 	stw	r7,8(sp)
  802288:	20c00217 	ldw	r3,8(r4)
  80228c:	01802034 	movhi	r6,128
  802290:	318a5104 	addi	r6,r6,10564
  802294:	19800115 	stw	r6,4(r3)
  802298:	280d883a 	mov	r6,r5
  80229c:	21400217 	ldw	r5,8(r4)
  8022a0:	d9c00104 	addi	r7,sp,4
  8022a4:	08023fc0 	call	8023fc <___vfprintf_internal_r>
  8022a8:	dfc00017 	ldw	ra,0(sp)
  8022ac:	dec00304 	addi	sp,sp,12
  8022b0:	f800283a 	ret

008022b4 <printf>:
  8022b4:	defffc04 	addi	sp,sp,-16
  8022b8:	dfc00015 	stw	ra,0(sp)
  8022bc:	d9400115 	stw	r5,4(sp)
  8022c0:	d9800215 	stw	r6,8(sp)
  8022c4:	d9c00315 	stw	r7,12(sp)
  8022c8:	00802034 	movhi	r2,128
  8022cc:	1093db04 	addi	r2,r2,20332
  8022d0:	10800017 	ldw	r2,0(r2)
  8022d4:	01402034 	movhi	r5,128
  8022d8:	294a5104 	addi	r5,r5,10564
  8022dc:	10c00217 	ldw	r3,8(r2)
  8022e0:	d9800104 	addi	r6,sp,4
  8022e4:	19400115 	stw	r5,4(r3)
  8022e8:	200b883a 	mov	r5,r4
  8022ec:	11000217 	ldw	r4,8(r2)
  8022f0:	08029280 	call	802928 <__vfprintf_internal>
  8022f4:	dfc00017 	ldw	ra,0(sp)
  8022f8:	dec00404 	addi	sp,sp,16
  8022fc:	f800283a 	ret

00802300 <_putchar_r>:
  802300:	21800217 	ldw	r6,8(r4)
  802304:	0802a501 	jmpi	802a50 <_putc_r>

00802308 <putchar>:
  802308:	00802034 	movhi	r2,128
  80230c:	1093db04 	addi	r2,r2,20332
  802310:	10800017 	ldw	r2,0(r2)
  802314:	200b883a 	mov	r5,r4
  802318:	11800217 	ldw	r6,8(r2)
  80231c:	1009883a 	mov	r4,r2
  802320:	0802a501 	jmpi	802a50 <_putc_r>

00802324 <_sbrk_r>:
  802324:	defffd04 	addi	sp,sp,-12
  802328:	dc000015 	stw	r16,0(sp)
  80232c:	04002034 	movhi	r16,128
  802330:	dc400115 	stw	r17,4(sp)
  802334:	8415b504 	addi	r16,r16,22228
  802338:	2023883a 	mov	r17,r4
  80233c:	2809883a 	mov	r4,r5
  802340:	dfc00215 	stw	ra,8(sp)
  802344:	80000015 	stw	zero,0(r16)
  802348:	0802c580 	call	802c58 <sbrk>
  80234c:	00ffffc4 	movi	r3,-1
  802350:	10c0031e 	bne	r2,r3,802360 <_sbrk_r+0x3c>
  802354:	80c00017 	ldw	r3,0(r16)
  802358:	18000126 	beq	r3,zero,802360 <_sbrk_r+0x3c>
  80235c:	88c00015 	stw	r3,0(r17)
  802360:	dfc00217 	ldw	ra,8(sp)
  802364:	dc400117 	ldw	r17,4(sp)
  802368:	dc000017 	ldw	r16,0(sp)
  80236c:	dec00304 	addi	sp,sp,12
  802370:	f800283a 	ret

00802374 <strlen>:
  802374:	2005883a 	mov	r2,r4
  802378:	10c00007 	ldb	r3,0(r2)
  80237c:	18000226 	beq	r3,zero,802388 <strlen+0x14>
  802380:	10800044 	addi	r2,r2,1
  802384:	003ffc06 	br	802378 <__alt_data_end+0xff802378>
  802388:	1105c83a 	sub	r2,r2,r4
  80238c:	f800283a 	ret

00802390 <print_repeat>:
  802390:	defffb04 	addi	sp,sp,-20
  802394:	dc800315 	stw	r18,12(sp)
  802398:	dc400215 	stw	r17,8(sp)
  80239c:	dc000115 	stw	r16,4(sp)
  8023a0:	dfc00415 	stw	ra,16(sp)
  8023a4:	2025883a 	mov	r18,r4
  8023a8:	2823883a 	mov	r17,r5
  8023ac:	d9800005 	stb	r6,0(sp)
  8023b0:	3821883a 	mov	r16,r7
  8023b4:	04000a0e 	bge	zero,r16,8023e0 <print_repeat+0x50>
  8023b8:	88800117 	ldw	r2,4(r17)
  8023bc:	01c00044 	movi	r7,1
  8023c0:	d80d883a 	mov	r6,sp
  8023c4:	880b883a 	mov	r5,r17
  8023c8:	9009883a 	mov	r4,r18
  8023cc:	103ee83a 	callr	r2
  8023d0:	843fffc4 	addi	r16,r16,-1
  8023d4:	103ff726 	beq	r2,zero,8023b4 <__alt_data_end+0xff8023b4>
  8023d8:	00bfffc4 	movi	r2,-1
  8023dc:	00000106 	br	8023e4 <print_repeat+0x54>
  8023e0:	0005883a 	mov	r2,zero
  8023e4:	dfc00417 	ldw	ra,16(sp)
  8023e8:	dc800317 	ldw	r18,12(sp)
  8023ec:	dc400217 	ldw	r17,8(sp)
  8023f0:	dc000117 	ldw	r16,4(sp)
  8023f4:	dec00504 	addi	sp,sp,20
  8023f8:	f800283a 	ret

008023fc <___vfprintf_internal_r>:
  8023fc:	deffe504 	addi	sp,sp,-108
  802400:	d8c00804 	addi	r3,sp,32
  802404:	ddc01815 	stw	r23,96(sp)
  802408:	dd801715 	stw	r22,92(sp)
  80240c:	dd401615 	stw	r21,88(sp)
  802410:	dd001515 	stw	r20,84(sp)
  802414:	dcc01415 	stw	r19,80(sp)
  802418:	dc801315 	stw	r18,76(sp)
  80241c:	dc401215 	stw	r17,72(sp)
  802420:	dc001115 	stw	r16,68(sp)
  802424:	dfc01a15 	stw	ra,104(sp)
  802428:	df001915 	stw	fp,100(sp)
  80242c:	2029883a 	mov	r20,r4
  802430:	2823883a 	mov	r17,r5
  802434:	382d883a 	mov	r22,r7
  802438:	d9800f15 	stw	r6,60(sp)
  80243c:	0021883a 	mov	r16,zero
  802440:	d8000e15 	stw	zero,56(sp)
  802444:	d8000a15 	stw	zero,40(sp)
  802448:	002b883a 	mov	r21,zero
  80244c:	0027883a 	mov	r19,zero
  802450:	0025883a 	mov	r18,zero
  802454:	d8000c15 	stw	zero,48(sp)
  802458:	d8000b15 	stw	zero,44(sp)
  80245c:	002f883a 	mov	r23,zero
  802460:	d8c00915 	stw	r3,36(sp)
  802464:	d8c00f17 	ldw	r3,60(sp)
  802468:	19000003 	ldbu	r4,0(r3)
  80246c:	20803fcc 	andi	r2,r4,255
  802470:	1080201c 	xori	r2,r2,128
  802474:	10bfe004 	addi	r2,r2,-128
  802478:	10011e26 	beq	r2,zero,8028f4 <___vfprintf_internal_r+0x4f8>
  80247c:	00c00044 	movi	r3,1
  802480:	b8c01426 	beq	r23,r3,8024d4 <___vfprintf_internal_r+0xd8>
  802484:	1dc00216 	blt	r3,r23,802490 <___vfprintf_internal_r+0x94>
  802488:	b8000626 	beq	r23,zero,8024a4 <___vfprintf_internal_r+0xa8>
  80248c:	00011506 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  802490:	01400084 	movi	r5,2
  802494:	b9401d26 	beq	r23,r5,80250c <___vfprintf_internal_r+0x110>
  802498:	014000c4 	movi	r5,3
  80249c:	b9402b26 	beq	r23,r5,80254c <___vfprintf_internal_r+0x150>
  8024a0:	00011006 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  8024a4:	01400944 	movi	r5,37
  8024a8:	1140fc26 	beq	r2,r5,80289c <___vfprintf_internal_r+0x4a0>
  8024ac:	88800117 	ldw	r2,4(r17)
  8024b0:	d9000005 	stb	r4,0(sp)
  8024b4:	01c00044 	movi	r7,1
  8024b8:	d80d883a 	mov	r6,sp
  8024bc:	880b883a 	mov	r5,r17
  8024c0:	a009883a 	mov	r4,r20
  8024c4:	103ee83a 	callr	r2
  8024c8:	1000d81e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  8024cc:	84000044 	addi	r16,r16,1
  8024d0:	00010406 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  8024d4:	01400c04 	movi	r5,48
  8024d8:	1140fa26 	beq	r2,r5,8028c4 <___vfprintf_internal_r+0x4c8>
  8024dc:	01400944 	movi	r5,37
  8024e0:	11400a1e 	bne	r2,r5,80250c <___vfprintf_internal_r+0x110>
  8024e4:	d8800005 	stb	r2,0(sp)
  8024e8:	88800117 	ldw	r2,4(r17)
  8024ec:	b80f883a 	mov	r7,r23
  8024f0:	d80d883a 	mov	r6,sp
  8024f4:	880b883a 	mov	r5,r17
  8024f8:	a009883a 	mov	r4,r20
  8024fc:	103ee83a 	callr	r2
  802500:	1000ca1e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802504:	84000044 	addi	r16,r16,1
  802508:	0000f506 	br	8028e0 <___vfprintf_internal_r+0x4e4>
  80250c:	25fff404 	addi	r23,r4,-48
  802510:	bdc03fcc 	andi	r23,r23,255
  802514:	00c00244 	movi	r3,9
  802518:	1dc00936 	bltu	r3,r23,802540 <___vfprintf_internal_r+0x144>
  80251c:	00bfffc4 	movi	r2,-1
  802520:	90800426 	beq	r18,r2,802534 <___vfprintf_internal_r+0x138>
  802524:	01400284 	movi	r5,10
  802528:	9009883a 	mov	r4,r18
  80252c:	0801f2c0 	call	801f2c <__mulsi3>
  802530:	00000106 	br	802538 <___vfprintf_internal_r+0x13c>
  802534:	0005883a 	mov	r2,zero
  802538:	b8a5883a 	add	r18,r23,r2
  80253c:	0000e206 	br	8028c8 <___vfprintf_internal_r+0x4cc>
  802540:	01400b84 	movi	r5,46
  802544:	1140e426 	beq	r2,r5,8028d8 <___vfprintf_internal_r+0x4dc>
  802548:	05c00084 	movi	r23,2
  80254c:	213ff404 	addi	r4,r4,-48
  802550:	27003fcc 	andi	fp,r4,255
  802554:	00c00244 	movi	r3,9
  802558:	1f000936 	bltu	r3,fp,802580 <___vfprintf_internal_r+0x184>
  80255c:	00bfffc4 	movi	r2,-1
  802560:	98800426 	beq	r19,r2,802574 <___vfprintf_internal_r+0x178>
  802564:	01400284 	movi	r5,10
  802568:	9809883a 	mov	r4,r19
  80256c:	0801f2c0 	call	801f2c <__mulsi3>
  802570:	00000106 	br	802578 <___vfprintf_internal_r+0x17c>
  802574:	0005883a 	mov	r2,zero
  802578:	e0a7883a 	add	r19,fp,r2
  80257c:	0000d906 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  802580:	00c01b04 	movi	r3,108
  802584:	10c0d226 	beq	r2,r3,8028d0 <___vfprintf_internal_r+0x4d4>
  802588:	013fffc4 	movi	r4,-1
  80258c:	99000226 	beq	r19,r4,802598 <___vfprintf_internal_r+0x19c>
  802590:	d8000b15 	stw	zero,44(sp)
  802594:	00000106 	br	80259c <___vfprintf_internal_r+0x1a0>
  802598:	04c00044 	movi	r19,1
  80259c:	01001a44 	movi	r4,105
  8025a0:	11001626 	beq	r2,r4,8025fc <___vfprintf_internal_r+0x200>
  8025a4:	20800916 	blt	r4,r2,8025cc <___vfprintf_internal_r+0x1d0>
  8025a8:	010018c4 	movi	r4,99
  8025ac:	11008826 	beq	r2,r4,8027d0 <___vfprintf_internal_r+0x3d4>
  8025b0:	01001904 	movi	r4,100
  8025b4:	11001126 	beq	r2,r4,8025fc <___vfprintf_internal_r+0x200>
  8025b8:	01001604 	movi	r4,88
  8025bc:	1100c81e 	bne	r2,r4,8028e0 <___vfprintf_internal_r+0x4e4>
  8025c0:	00c00044 	movi	r3,1
  8025c4:	d8c00e15 	stw	r3,56(sp)
  8025c8:	00001506 	br	802620 <___vfprintf_internal_r+0x224>
  8025cc:	01001cc4 	movi	r4,115
  8025d0:	11009826 	beq	r2,r4,802834 <___vfprintf_internal_r+0x438>
  8025d4:	20800416 	blt	r4,r2,8025e8 <___vfprintf_internal_r+0x1ec>
  8025d8:	01001bc4 	movi	r4,111
  8025dc:	1100c01e 	bne	r2,r4,8028e0 <___vfprintf_internal_r+0x4e4>
  8025e0:	05400204 	movi	r21,8
  8025e4:	00000f06 	br	802624 <___vfprintf_internal_r+0x228>
  8025e8:	01001d44 	movi	r4,117
  8025ec:	11000d26 	beq	r2,r4,802624 <___vfprintf_internal_r+0x228>
  8025f0:	01001e04 	movi	r4,120
  8025f4:	11000a26 	beq	r2,r4,802620 <___vfprintf_internal_r+0x224>
  8025f8:	0000b906 	br	8028e0 <___vfprintf_internal_r+0x4e4>
  8025fc:	d8c00a17 	ldw	r3,40(sp)
  802600:	b7000104 	addi	fp,r22,4
  802604:	18000726 	beq	r3,zero,802624 <___vfprintf_internal_r+0x228>
  802608:	df000d15 	stw	fp,52(sp)
  80260c:	b5c00017 	ldw	r23,0(r22)
  802610:	b800080e 	bge	r23,zero,802634 <___vfprintf_internal_r+0x238>
  802614:	05efc83a 	sub	r23,zero,r23
  802618:	02400044 	movi	r9,1
  80261c:	00000606 	br	802638 <___vfprintf_internal_r+0x23c>
  802620:	05400404 	movi	r21,16
  802624:	b0c00104 	addi	r3,r22,4
  802628:	d8c00d15 	stw	r3,52(sp)
  80262c:	b5c00017 	ldw	r23,0(r22)
  802630:	d8000a15 	stw	zero,40(sp)
  802634:	0013883a 	mov	r9,zero
  802638:	d839883a 	mov	fp,sp
  80263c:	b8001726 	beq	r23,zero,80269c <___vfprintf_internal_r+0x2a0>
  802640:	a80b883a 	mov	r5,r21
  802644:	b809883a 	mov	r4,r23
  802648:	da401015 	stw	r9,64(sp)
  80264c:	0801e700 	call	801e70 <__udivsi3>
  802650:	a80b883a 	mov	r5,r21
  802654:	1009883a 	mov	r4,r2
  802658:	102d883a 	mov	r22,r2
  80265c:	0801f2c0 	call	801f2c <__mulsi3>
  802660:	b885c83a 	sub	r2,r23,r2
  802664:	00c00244 	movi	r3,9
  802668:	da401017 	ldw	r9,64(sp)
  80266c:	18800216 	blt	r3,r2,802678 <___vfprintf_internal_r+0x27c>
  802670:	10800c04 	addi	r2,r2,48
  802674:	00000506 	br	80268c <___vfprintf_internal_r+0x290>
  802678:	d8c00e17 	ldw	r3,56(sp)
  80267c:	18000226 	beq	r3,zero,802688 <___vfprintf_internal_r+0x28c>
  802680:	10800dc4 	addi	r2,r2,55
  802684:	00000106 	br	80268c <___vfprintf_internal_r+0x290>
  802688:	108015c4 	addi	r2,r2,87
  80268c:	e0800005 	stb	r2,0(fp)
  802690:	b02f883a 	mov	r23,r22
  802694:	e7000044 	addi	fp,fp,1
  802698:	003fe806 	br	80263c <__alt_data_end+0xff80263c>
  80269c:	e6efc83a 	sub	r23,fp,sp
  8026a0:	9dc5c83a 	sub	r2,r19,r23
  8026a4:	0080090e 	bge	zero,r2,8026cc <___vfprintf_internal_r+0x2d0>
  8026a8:	e085883a 	add	r2,fp,r2
  8026ac:	01400c04 	movi	r5,48
  8026b0:	d8c00917 	ldw	r3,36(sp)
  8026b4:	e009883a 	mov	r4,fp
  8026b8:	e0c0032e 	bgeu	fp,r3,8026c8 <___vfprintf_internal_r+0x2cc>
  8026bc:	e7000044 	addi	fp,fp,1
  8026c0:	21400005 	stb	r5,0(r4)
  8026c4:	e0bffa1e 	bne	fp,r2,8026b0 <__alt_data_end+0xff8026b0>
  8026c8:	e6efc83a 	sub	r23,fp,sp
  8026cc:	d8c00b17 	ldw	r3,44(sp)
  8026d0:	4dd1883a 	add	r8,r9,r23
  8026d4:	922dc83a 	sub	r22,r18,r8
  8026d8:	18001626 	beq	r3,zero,802734 <___vfprintf_internal_r+0x338>
  8026dc:	48000a26 	beq	r9,zero,802708 <___vfprintf_internal_r+0x30c>
  8026e0:	00800b44 	movi	r2,45
  8026e4:	d8800805 	stb	r2,32(sp)
  8026e8:	88800117 	ldw	r2,4(r17)
  8026ec:	01c00044 	movi	r7,1
  8026f0:	d9800804 	addi	r6,sp,32
  8026f4:	880b883a 	mov	r5,r17
  8026f8:	a009883a 	mov	r4,r20
  8026fc:	103ee83a 	callr	r2
  802700:	10004a1e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802704:	84000044 	addi	r16,r16,1
  802708:	0580070e 	bge	zero,r22,802728 <___vfprintf_internal_r+0x32c>
  80270c:	b00f883a 	mov	r7,r22
  802710:	01800c04 	movi	r6,48
  802714:	880b883a 	mov	r5,r17
  802718:	a009883a 	mov	r4,r20
  80271c:	08023900 	call	802390 <print_repeat>
  802720:	1000421e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802724:	85a1883a 	add	r16,r16,r22
  802728:	e02d883a 	mov	r22,fp
  80272c:	bf2fc83a 	sub	r23,r23,fp
  802730:	00002006 	br	8027b4 <___vfprintf_internal_r+0x3b8>
  802734:	0580090e 	bge	zero,r22,80275c <___vfprintf_internal_r+0x360>
  802738:	b00f883a 	mov	r7,r22
  80273c:	01800804 	movi	r6,32
  802740:	880b883a 	mov	r5,r17
  802744:	a009883a 	mov	r4,r20
  802748:	da401015 	stw	r9,64(sp)
  80274c:	08023900 	call	802390 <print_repeat>
  802750:	da401017 	ldw	r9,64(sp)
  802754:	1000351e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802758:	85a1883a 	add	r16,r16,r22
  80275c:	483ff226 	beq	r9,zero,802728 <__alt_data_end+0xff802728>
  802760:	00800b44 	movi	r2,45
  802764:	d8800805 	stb	r2,32(sp)
  802768:	88800117 	ldw	r2,4(r17)
  80276c:	01c00044 	movi	r7,1
  802770:	d9800804 	addi	r6,sp,32
  802774:	880b883a 	mov	r5,r17
  802778:	a009883a 	mov	r4,r20
  80277c:	103ee83a 	callr	r2
  802780:	10002a1e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802784:	84000044 	addi	r16,r16,1
  802788:	003fe706 	br	802728 <__alt_data_end+0xff802728>
  80278c:	b5bfffc4 	addi	r22,r22,-1
  802790:	b0800003 	ldbu	r2,0(r22)
  802794:	01c00044 	movi	r7,1
  802798:	d9800804 	addi	r6,sp,32
  80279c:	d8800805 	stb	r2,32(sp)
  8027a0:	88800117 	ldw	r2,4(r17)
  8027a4:	880b883a 	mov	r5,r17
  8027a8:	a009883a 	mov	r4,r20
  8027ac:	103ee83a 	callr	r2
  8027b0:	10001e1e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  8027b4:	8585c83a 	sub	r2,r16,r22
  8027b8:	b5c9883a 	add	r4,r22,r23
  8027bc:	e085883a 	add	r2,fp,r2
  8027c0:	013ff216 	blt	zero,r4,80278c <__alt_data_end+0xff80278c>
  8027c4:	1021883a 	mov	r16,r2
  8027c8:	dd800d17 	ldw	r22,52(sp)
  8027cc:	00004406 	br	8028e0 <___vfprintf_internal_r+0x4e4>
  8027d0:	00800044 	movi	r2,1
  8027d4:	1480080e 	bge	r2,r18,8027f8 <___vfprintf_internal_r+0x3fc>
  8027d8:	95ffffc4 	addi	r23,r18,-1
  8027dc:	b80f883a 	mov	r7,r23
  8027e0:	01800804 	movi	r6,32
  8027e4:	880b883a 	mov	r5,r17
  8027e8:	a009883a 	mov	r4,r20
  8027ec:	08023900 	call	802390 <print_repeat>
  8027f0:	10000e1e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  8027f4:	85e1883a 	add	r16,r16,r23
  8027f8:	b0800017 	ldw	r2,0(r22)
  8027fc:	01c00044 	movi	r7,1
  802800:	d80d883a 	mov	r6,sp
  802804:	d8800005 	stb	r2,0(sp)
  802808:	88800117 	ldw	r2,4(r17)
  80280c:	880b883a 	mov	r5,r17
  802810:	a009883a 	mov	r4,r20
  802814:	b5c00104 	addi	r23,r22,4
  802818:	103ee83a 	callr	r2
  80281c:	1000031e 	bne	r2,zero,80282c <___vfprintf_internal_r+0x430>
  802820:	84000044 	addi	r16,r16,1
  802824:	b82d883a 	mov	r22,r23
  802828:	00002d06 	br	8028e0 <___vfprintf_internal_r+0x4e4>
  80282c:	00bfffc4 	movi	r2,-1
  802830:	00003106 	br	8028f8 <___vfprintf_internal_r+0x4fc>
  802834:	b5c00017 	ldw	r23,0(r22)
  802838:	b7000104 	addi	fp,r22,4
  80283c:	b809883a 	mov	r4,r23
  802840:	08023740 	call	802374 <strlen>
  802844:	9091c83a 	sub	r8,r18,r2
  802848:	102d883a 	mov	r22,r2
  80284c:	0200090e 	bge	zero,r8,802874 <___vfprintf_internal_r+0x478>
  802850:	400f883a 	mov	r7,r8
  802854:	01800804 	movi	r6,32
  802858:	880b883a 	mov	r5,r17
  80285c:	a009883a 	mov	r4,r20
  802860:	da001015 	stw	r8,64(sp)
  802864:	08023900 	call	802390 <print_repeat>
  802868:	da001017 	ldw	r8,64(sp)
  80286c:	103fef1e 	bne	r2,zero,80282c <__alt_data_end+0xff80282c>
  802870:	8221883a 	add	r16,r16,r8
  802874:	88800117 	ldw	r2,4(r17)
  802878:	b00f883a 	mov	r7,r22
  80287c:	b80d883a 	mov	r6,r23
  802880:	880b883a 	mov	r5,r17
  802884:	a009883a 	mov	r4,r20
  802888:	103ee83a 	callr	r2
  80288c:	103fe71e 	bne	r2,zero,80282c <__alt_data_end+0xff80282c>
  802890:	85a1883a 	add	r16,r16,r22
  802894:	e02d883a 	mov	r22,fp
  802898:	00001106 	br	8028e0 <___vfprintf_internal_r+0x4e4>
  80289c:	00c00044 	movi	r3,1
  8028a0:	04ffffc4 	movi	r19,-1
  8028a4:	d8000e15 	stw	zero,56(sp)
  8028a8:	d8c00a15 	stw	r3,40(sp)
  8028ac:	05400284 	movi	r21,10
  8028b0:	9825883a 	mov	r18,r19
  8028b4:	d8000c15 	stw	zero,48(sp)
  8028b8:	d8000b15 	stw	zero,44(sp)
  8028bc:	182f883a 	mov	r23,r3
  8028c0:	00000806 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  8028c4:	ddc00b15 	stw	r23,44(sp)
  8028c8:	05c00084 	movi	r23,2
  8028cc:	00000506 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  8028d0:	00c00044 	movi	r3,1
  8028d4:	d8c00c15 	stw	r3,48(sp)
  8028d8:	05c000c4 	movi	r23,3
  8028dc:	00000106 	br	8028e4 <___vfprintf_internal_r+0x4e8>
  8028e0:	002f883a 	mov	r23,zero
  8028e4:	d8c00f17 	ldw	r3,60(sp)
  8028e8:	18c00044 	addi	r3,r3,1
  8028ec:	d8c00f15 	stw	r3,60(sp)
  8028f0:	003edc06 	br	802464 <__alt_data_end+0xff802464>
  8028f4:	8005883a 	mov	r2,r16
  8028f8:	dfc01a17 	ldw	ra,104(sp)
  8028fc:	df001917 	ldw	fp,100(sp)
  802900:	ddc01817 	ldw	r23,96(sp)
  802904:	dd801717 	ldw	r22,92(sp)
  802908:	dd401617 	ldw	r21,88(sp)
  80290c:	dd001517 	ldw	r20,84(sp)
  802910:	dcc01417 	ldw	r19,80(sp)
  802914:	dc801317 	ldw	r18,76(sp)
  802918:	dc401217 	ldw	r17,72(sp)
  80291c:	dc001117 	ldw	r16,68(sp)
  802920:	dec01b04 	addi	sp,sp,108
  802924:	f800283a 	ret

00802928 <__vfprintf_internal>:
  802928:	00802034 	movhi	r2,128
  80292c:	1093db04 	addi	r2,r2,20332
  802930:	300f883a 	mov	r7,r6
  802934:	280d883a 	mov	r6,r5
  802938:	200b883a 	mov	r5,r4
  80293c:	11000017 	ldw	r4,0(r2)
  802940:	08023fc1 	jmpi	8023fc <___vfprintf_internal_r>

00802944 <__sfvwrite_small_dev>:
  802944:	2880000b 	ldhu	r2,0(r5)
  802948:	1080020c 	andi	r2,r2,8
  80294c:	10002126 	beq	r2,zero,8029d4 <__sfvwrite_small_dev+0x90>
  802950:	2880008f 	ldh	r2,2(r5)
  802954:	defffa04 	addi	sp,sp,-24
  802958:	dc000015 	stw	r16,0(sp)
  80295c:	dfc00515 	stw	ra,20(sp)
  802960:	dd000415 	stw	r20,16(sp)
  802964:	dcc00315 	stw	r19,12(sp)
  802968:	dc800215 	stw	r18,8(sp)
  80296c:	dc400115 	stw	r17,4(sp)
  802970:	2821883a 	mov	r16,r5
  802974:	10001216 	blt	r2,zero,8029c0 <__sfvwrite_small_dev+0x7c>
  802978:	2027883a 	mov	r19,r4
  80297c:	3025883a 	mov	r18,r6
  802980:	3823883a 	mov	r17,r7
  802984:	05010004 	movi	r20,1024
  802988:	04400b0e 	bge	zero,r17,8029b8 <__sfvwrite_small_dev+0x74>
  80298c:	880f883a 	mov	r7,r17
  802990:	a440010e 	bge	r20,r17,802998 <__sfvwrite_small_dev+0x54>
  802994:	01c10004 	movi	r7,1024
  802998:	8140008f 	ldh	r5,2(r16)
  80299c:	900d883a 	mov	r6,r18
  8029a0:	9809883a 	mov	r4,r19
  8029a4:	0802aa80 	call	802aa8 <_write_r>
  8029a8:	0080050e 	bge	zero,r2,8029c0 <__sfvwrite_small_dev+0x7c>
  8029ac:	88a3c83a 	sub	r17,r17,r2
  8029b0:	90a5883a 	add	r18,r18,r2
  8029b4:	003ff406 	br	802988 <__alt_data_end+0xff802988>
  8029b8:	0005883a 	mov	r2,zero
  8029bc:	00000706 	br	8029dc <__sfvwrite_small_dev+0x98>
  8029c0:	8080000b 	ldhu	r2,0(r16)
  8029c4:	10801014 	ori	r2,r2,64
  8029c8:	8080000d 	sth	r2,0(r16)
  8029cc:	00bfffc4 	movi	r2,-1
  8029d0:	00000206 	br	8029dc <__sfvwrite_small_dev+0x98>
  8029d4:	00bfffc4 	movi	r2,-1
  8029d8:	f800283a 	ret
  8029dc:	dfc00517 	ldw	ra,20(sp)
  8029e0:	dd000417 	ldw	r20,16(sp)
  8029e4:	dcc00317 	ldw	r19,12(sp)
  8029e8:	dc800217 	ldw	r18,8(sp)
  8029ec:	dc400117 	ldw	r17,4(sp)
  8029f0:	dc000017 	ldw	r16,0(sp)
  8029f4:	dec00604 	addi	sp,sp,24
  8029f8:	f800283a 	ret

008029fc <putc>:
  8029fc:	defffd04 	addi	sp,sp,-12
  802a00:	00802034 	movhi	r2,128
  802a04:	dc000115 	stw	r16,4(sp)
  802a08:	dfc00215 	stw	ra,8(sp)
  802a0c:	108a5104 	addi	r2,r2,10564
  802a10:	28800115 	stw	r2,4(r5)
  802a14:	00802034 	movhi	r2,128
  802a18:	1093db04 	addi	r2,r2,20332
  802a1c:	d9000005 	stb	r4,0(sp)
  802a20:	2021883a 	mov	r16,r4
  802a24:	11000017 	ldw	r4,0(r2)
  802a28:	01c00044 	movi	r7,1
  802a2c:	d80d883a 	mov	r6,sp
  802a30:	08029440 	call	802944 <__sfvwrite_small_dev>
  802a34:	00ffffc4 	movi	r3,-1
  802a38:	10c00126 	beq	r2,r3,802a40 <putc+0x44>
  802a3c:	8005883a 	mov	r2,r16
  802a40:	dfc00217 	ldw	ra,8(sp)
  802a44:	dc000117 	ldw	r16,4(sp)
  802a48:	dec00304 	addi	sp,sp,12
  802a4c:	f800283a 	ret

00802a50 <_putc_r>:
  802a50:	defffd04 	addi	sp,sp,-12
  802a54:	00802034 	movhi	r2,128
  802a58:	dc000115 	stw	r16,4(sp)
  802a5c:	dfc00215 	stw	ra,8(sp)
  802a60:	108a5104 	addi	r2,r2,10564
  802a64:	30800115 	stw	r2,4(r6)
  802a68:	00802034 	movhi	r2,128
  802a6c:	1093db04 	addi	r2,r2,20332
  802a70:	11000017 	ldw	r4,0(r2)
  802a74:	2821883a 	mov	r16,r5
  802a78:	01c00044 	movi	r7,1
  802a7c:	300b883a 	mov	r5,r6
  802a80:	d80d883a 	mov	r6,sp
  802a84:	dc000005 	stb	r16,0(sp)
  802a88:	08029440 	call	802944 <__sfvwrite_small_dev>
  802a8c:	00ffffc4 	movi	r3,-1
  802a90:	10c00126 	beq	r2,r3,802a98 <_putc_r+0x48>
  802a94:	8005883a 	mov	r2,r16
  802a98:	dfc00217 	ldw	ra,8(sp)
  802a9c:	dc000117 	ldw	r16,4(sp)
  802aa0:	dec00304 	addi	sp,sp,12
  802aa4:	f800283a 	ret

00802aa8 <_write_r>:
  802aa8:	defffd04 	addi	sp,sp,-12
  802aac:	dc000015 	stw	r16,0(sp)
  802ab0:	04002034 	movhi	r16,128
  802ab4:	dc400115 	stw	r17,4(sp)
  802ab8:	8415b504 	addi	r16,r16,22228
  802abc:	2023883a 	mov	r17,r4
  802ac0:	2809883a 	mov	r4,r5
  802ac4:	300b883a 	mov	r5,r6
  802ac8:	380d883a 	mov	r6,r7
  802acc:	dfc00215 	stw	ra,8(sp)
  802ad0:	80000015 	stw	zero,0(r16)
  802ad4:	0802d580 	call	802d58 <write>
  802ad8:	00ffffc4 	movi	r3,-1
  802adc:	10c0031e 	bne	r2,r3,802aec <_write_r+0x44>
  802ae0:	80c00017 	ldw	r3,0(r16)
  802ae4:	18000126 	beq	r3,zero,802aec <_write_r+0x44>
  802ae8:	88c00015 	stw	r3,0(r17)
  802aec:	dfc00217 	ldw	ra,8(sp)
  802af0:	dc400117 	ldw	r17,4(sp)
  802af4:	dc000017 	ldw	r16,0(sp)
  802af8:	dec00304 	addi	sp,sp,12
  802afc:	f800283a 	ret

00802b00 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  802b00:	defffc04 	addi	sp,sp,-16
  802b04:	df000315 	stw	fp,12(sp)
  802b08:	df000304 	addi	fp,sp,12
  802b0c:	e13ffd15 	stw	r4,-12(fp)
  802b10:	e17ffe15 	stw	r5,-8(fp)
  802b14:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  802b18:	e0fffe17 	ldw	r3,-8(fp)
  802b1c:	e0bffd17 	ldw	r2,-12(fp)
  802b20:	18800c26 	beq	r3,r2,802b54 <alt_load_section+0x54>
  {
    while( to != end )
  802b24:	00000806 	br	802b48 <alt_load_section+0x48>
    {
      *to++ = *from++;
  802b28:	e0bffe17 	ldw	r2,-8(fp)
  802b2c:	10c00104 	addi	r3,r2,4
  802b30:	e0fffe15 	stw	r3,-8(fp)
  802b34:	e0fffd17 	ldw	r3,-12(fp)
  802b38:	19000104 	addi	r4,r3,4
  802b3c:	e13ffd15 	stw	r4,-12(fp)
  802b40:	18c00017 	ldw	r3,0(r3)
  802b44:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  802b48:	e0fffe17 	ldw	r3,-8(fp)
  802b4c:	e0bfff17 	ldw	r2,-4(fp)
  802b50:	18bff51e 	bne	r3,r2,802b28 <__alt_data_end+0xff802b28>
    {
      *to++ = *from++;
    }
  }
}
  802b54:	0001883a 	nop
  802b58:	e037883a 	mov	sp,fp
  802b5c:	df000017 	ldw	fp,0(sp)
  802b60:	dec00104 	addi	sp,sp,4
  802b64:	f800283a 	ret

00802b68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  802b68:	defffe04 	addi	sp,sp,-8
  802b6c:	dfc00115 	stw	ra,4(sp)
  802b70:	df000015 	stw	fp,0(sp)
  802b74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  802b78:	01802034 	movhi	r6,128
  802b7c:	3193e604 	addi	r6,r6,20376
  802b80:	01402034 	movhi	r5,128
  802b84:	29521c04 	addi	r5,r5,18544
  802b88:	01002034 	movhi	r4,128
  802b8c:	2113e604 	addi	r4,r4,20376
  802b90:	0802b000 	call	802b00 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  802b94:	01802034 	movhi	r6,128
  802b98:	31808c04 	addi	r6,r6,560
  802b9c:	01402034 	movhi	r5,128
  802ba0:	29400804 	addi	r5,r5,32
  802ba4:	01002034 	movhi	r4,128
  802ba8:	21000804 	addi	r4,r4,32
  802bac:	0802b000 	call	802b00 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  802bb0:	01802034 	movhi	r6,128
  802bb4:	31921c04 	addi	r6,r6,18544
  802bb8:	01402034 	movhi	r5,128
  802bbc:	2951fa04 	addi	r5,r5,18408
  802bc0:	01002034 	movhi	r4,128
  802bc4:	2111fa04 	addi	r4,r4,18408
  802bc8:	0802b000 	call	802b00 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  802bcc:	08039e40 	call	8039e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  802bd0:	0803bb40 	call	803bb4 <alt_icache_flush_all>
}
  802bd4:	0001883a 	nop
  802bd8:	e037883a 	mov	sp,fp
  802bdc:	dfc00117 	ldw	ra,4(sp)
  802be0:	df000017 	ldw	fp,0(sp)
  802be4:	dec00204 	addi	sp,sp,8
  802be8:	f800283a 	ret

00802bec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  802bec:	defffd04 	addi	sp,sp,-12
  802bf0:	dfc00215 	stw	ra,8(sp)
  802bf4:	df000115 	stw	fp,4(sp)
  802bf8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802bfc:	0009883a 	mov	r4,zero
  802c00:	0802e900 	call	802e90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  802c04:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  802c08:	0802ec80 	call	802ec8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  802c0c:	01802034 	movhi	r6,128
  802c10:	31920604 	addi	r6,r6,18456
  802c14:	01402034 	movhi	r5,128
  802c18:	29520604 	addi	r5,r5,18456
  802c1c:	01002034 	movhi	r4,128
  802c20:	21120604 	addi	r4,r4,18456
  802c24:	0803f880 	call	803f88 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  802c28:	d0a1de17 	ldw	r2,-30856(gp)
  802c2c:	d0e1df17 	ldw	r3,-30852(gp)
  802c30:	d121e017 	ldw	r4,-30848(gp)
  802c34:	200d883a 	mov	r6,r4
  802c38:	180b883a 	mov	r5,r3
  802c3c:	1009883a 	mov	r4,r2
  802c40:	080026c0 	call	80026c <main>
  802c44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  802c48:	01000044 	movi	r4,1
  802c4c:	080390c0 	call	80390c <close>
  exit (result);
  802c50:	e13fff17 	ldw	r4,-4(fp)
  802c54:	08045d40 	call	8045d4 <exit>

00802c58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  802c58:	defff904 	addi	sp,sp,-28
  802c5c:	df000615 	stw	fp,24(sp)
  802c60:	df000604 	addi	fp,sp,24
  802c64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802c68:	0005303a 	rdctl	r2,status
  802c6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802c70:	e0fffe17 	ldw	r3,-8(fp)
  802c74:	00bfff84 	movi	r2,-2
  802c78:	1884703a 	and	r2,r3,r2
  802c7c:	1001703a 	wrctl	status,r2
  
  return context;
  802c80:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  802c84:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  802c88:	d0a00417 	ldw	r2,-32752(gp)
  802c8c:	10c000c4 	addi	r3,r2,3
  802c90:	00bfff04 	movi	r2,-4
  802c94:	1884703a 	and	r2,r3,r2
  802c98:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  802c9c:	d0e00417 	ldw	r3,-32752(gp)
  802ca0:	e0bfff17 	ldw	r2,-4(fp)
  802ca4:	1887883a 	add	r3,r3,r2
  802ca8:	00804034 	movhi	r2,256
  802cac:	10800004 	addi	r2,r2,0
  802cb0:	10c0062e 	bgeu	r2,r3,802ccc <sbrk+0x74>
  802cb4:	e0bffb17 	ldw	r2,-20(fp)
  802cb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802cbc:	e0bffa17 	ldw	r2,-24(fp)
  802cc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  802cc4:	00bfffc4 	movi	r2,-1
  802cc8:	00000b06 	br	802cf8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  802ccc:	d0a00417 	ldw	r2,-32752(gp)
  802cd0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  802cd4:	d0e00417 	ldw	r3,-32752(gp)
  802cd8:	e0bfff17 	ldw	r2,-4(fp)
  802cdc:	1885883a 	add	r2,r3,r2
  802ce0:	d0a00415 	stw	r2,-32752(gp)
  802ce4:	e0bffb17 	ldw	r2,-20(fp)
  802ce8:	e0bffc15 	stw	r2,-16(fp)
  802cec:	e0bffc17 	ldw	r2,-16(fp)
  802cf0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  802cf4:	e0bffd17 	ldw	r2,-12(fp)
} 
  802cf8:	e037883a 	mov	sp,fp
  802cfc:	df000017 	ldw	fp,0(sp)
  802d00:	dec00104 	addi	sp,sp,4
  802d04:	f800283a 	ret

00802d08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802d08:	defffe04 	addi	sp,sp,-8
  802d0c:	dfc00115 	stw	ra,4(sp)
  802d10:	df000015 	stw	fp,0(sp)
  802d14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802d18:	00802034 	movhi	r2,128
  802d1c:	1093e404 	addi	r2,r2,20368
  802d20:	10800017 	ldw	r2,0(r2)
  802d24:	10000526 	beq	r2,zero,802d3c <alt_get_errno+0x34>
  802d28:	00802034 	movhi	r2,128
  802d2c:	1093e404 	addi	r2,r2,20368
  802d30:	10800017 	ldw	r2,0(r2)
  802d34:	103ee83a 	callr	r2
  802d38:	00000206 	br	802d44 <alt_get_errno+0x3c>
  802d3c:	00802034 	movhi	r2,128
  802d40:	1095b504 	addi	r2,r2,22228
}
  802d44:	e037883a 	mov	sp,fp
  802d48:	dfc00117 	ldw	ra,4(sp)
  802d4c:	df000017 	ldw	fp,0(sp)
  802d50:	dec00204 	addi	sp,sp,8
  802d54:	f800283a 	ret

00802d58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  802d58:	defff904 	addi	sp,sp,-28
  802d5c:	dfc00615 	stw	ra,24(sp)
  802d60:	df000515 	stw	fp,20(sp)
  802d64:	df000504 	addi	fp,sp,20
  802d68:	e13ffd15 	stw	r4,-12(fp)
  802d6c:	e17ffe15 	stw	r5,-8(fp)
  802d70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  802d74:	e0bffd17 	ldw	r2,-12(fp)
  802d78:	10000816 	blt	r2,zero,802d9c <write+0x44>
  802d7c:	01400304 	movi	r5,12
  802d80:	e13ffd17 	ldw	r4,-12(fp)
  802d84:	0801f2c0 	call	801f2c <__mulsi3>
  802d88:	1007883a 	mov	r3,r2
  802d8c:	00802034 	movhi	r2,128
  802d90:	10937804 	addi	r2,r2,19936
  802d94:	1885883a 	add	r2,r3,r2
  802d98:	00000106 	br	802da0 <write+0x48>
  802d9c:	0005883a 	mov	r2,zero
  802da0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  802da4:	e0bffb17 	ldw	r2,-20(fp)
  802da8:	10002126 	beq	r2,zero,802e30 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  802dac:	e0bffb17 	ldw	r2,-20(fp)
  802db0:	10800217 	ldw	r2,8(r2)
  802db4:	108000cc 	andi	r2,r2,3
  802db8:	10001826 	beq	r2,zero,802e1c <write+0xc4>
  802dbc:	e0bffb17 	ldw	r2,-20(fp)
  802dc0:	10800017 	ldw	r2,0(r2)
  802dc4:	10800617 	ldw	r2,24(r2)
  802dc8:	10001426 	beq	r2,zero,802e1c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  802dcc:	e0bffb17 	ldw	r2,-20(fp)
  802dd0:	10800017 	ldw	r2,0(r2)
  802dd4:	10800617 	ldw	r2,24(r2)
  802dd8:	e0ffff17 	ldw	r3,-4(fp)
  802ddc:	180d883a 	mov	r6,r3
  802de0:	e17ffe17 	ldw	r5,-8(fp)
  802de4:	e13ffb17 	ldw	r4,-20(fp)
  802de8:	103ee83a 	callr	r2
  802dec:	e0bffc15 	stw	r2,-16(fp)
  802df0:	e0bffc17 	ldw	r2,-16(fp)
  802df4:	1000070e 	bge	r2,zero,802e14 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  802df8:	0802d080 	call	802d08 <alt_get_errno>
  802dfc:	1007883a 	mov	r3,r2
  802e00:	e0bffc17 	ldw	r2,-16(fp)
  802e04:	0085c83a 	sub	r2,zero,r2
  802e08:	18800015 	stw	r2,0(r3)
        return -1;
  802e0c:	00bfffc4 	movi	r2,-1
  802e10:	00000c06 	br	802e44 <write+0xec>
      }
      return rval;
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	00000a06 	br	802e44 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  802e1c:	0802d080 	call	802d08 <alt_get_errno>
  802e20:	1007883a 	mov	r3,r2
  802e24:	00800344 	movi	r2,13
  802e28:	18800015 	stw	r2,0(r3)
  802e2c:	00000406 	br	802e40 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  802e30:	0802d080 	call	802d08 <alt_get_errno>
  802e34:	1007883a 	mov	r3,r2
  802e38:	00801444 	movi	r2,81
  802e3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  802e40:	00bfffc4 	movi	r2,-1
}
  802e44:	e037883a 	mov	sp,fp
  802e48:	dfc00117 	ldw	ra,4(sp)
  802e4c:	df000017 	ldw	fp,0(sp)
  802e50:	dec00204 	addi	sp,sp,8
  802e54:	f800283a 	ret

00802e58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  802e58:	defffd04 	addi	sp,sp,-12
  802e5c:	dfc00215 	stw	ra,8(sp)
  802e60:	df000115 	stw	fp,4(sp)
  802e64:	df000104 	addi	fp,sp,4
  802e68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  802e6c:	01402034 	movhi	r5,128
  802e70:	2953e104 	addi	r5,r5,20356
  802e74:	e13fff17 	ldw	r4,-4(fp)
  802e78:	0803a800 	call	803a80 <alt_dev_llist_insert>
}
  802e7c:	e037883a 	mov	sp,fp
  802e80:	dfc00117 	ldw	ra,4(sp)
  802e84:	df000017 	ldw	fp,0(sp)
  802e88:	dec00204 	addi	sp,sp,8
  802e8c:	f800283a 	ret

00802e90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  802e90:	defffd04 	addi	sp,sp,-12
  802e94:	dfc00215 	stw	ra,8(sp)
  802e98:	df000115 	stw	fp,4(sp)
  802e9c:	df000104 	addi	fp,sp,4
  802ea0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, Nios2_CPU);
  802ea4:	080432c0 	call	80432c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  802ea8:	00800044 	movi	r2,1
  802eac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  802eb0:	0001883a 	nop
  802eb4:	e037883a 	mov	sp,fp
  802eb8:	dfc00117 	ldw	ra,4(sp)
  802ebc:	df000017 	ldw	fp,0(sp)
  802ec0:	dec00204 	addi	sp,sp,8
  802ec4:	f800283a 	ret

00802ec8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  802ec8:	defffe04 	addi	sp,sp,-8
  802ecc:	dfc00115 	stw	ra,4(sp)
  802ed0:	df000015 	stw	fp,0(sp)
  802ed4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  802ed8:	01002034 	movhi	r4,128
  802edc:	21135404 	addi	r4,r4,19792
  802ee0:	0802e580 	call	802e58 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
  802ee4:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
  802ee8:	01bfffc4 	movi	r6,-1
  802eec:	017fffc4 	movi	r5,-1
  802ef0:	01002034 	movhi	r4,128
  802ef4:	21135f04 	addi	r4,r4,19836
  802ef8:	08034a40 	call	8034a4 <altera_modular_adc_init>
}
  802efc:	0001883a 	nop
  802f00:	e037883a 	mov	sp,fp
  802f04:	dfc00117 	ldw	ra,4(sp)
  802f08:	df000017 	ldw	fp,0(sp)
  802f0c:	dec00204 	addi	sp,sp,8
  802f10:	f800283a 	ret

00802f14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802f14:	defffa04 	addi	sp,sp,-24
  802f18:	dfc00515 	stw	ra,20(sp)
  802f1c:	df000415 	stw	fp,16(sp)
  802f20:	df000404 	addi	fp,sp,16
  802f24:	e13ffd15 	stw	r4,-12(fp)
  802f28:	e17ffe15 	stw	r5,-8(fp)
  802f2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  802f30:	e0bffd17 	ldw	r2,-12(fp)
  802f34:	10800017 	ldw	r2,0(r2)
  802f38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  802f3c:	e0bffc17 	ldw	r2,-16(fp)
  802f40:	10c00a04 	addi	r3,r2,40
  802f44:	e0bffd17 	ldw	r2,-12(fp)
  802f48:	10800217 	ldw	r2,8(r2)
  802f4c:	100f883a 	mov	r7,r2
  802f50:	e1bfff17 	ldw	r6,-4(fp)
  802f54:	e17ffe17 	ldw	r5,-8(fp)
  802f58:	1809883a 	mov	r4,r3
  802f5c:	0802fd40 	call	802fd4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  802f60:	e037883a 	mov	sp,fp
  802f64:	dfc00117 	ldw	ra,4(sp)
  802f68:	df000017 	ldw	fp,0(sp)
  802f6c:	dec00204 	addi	sp,sp,8
  802f70:	f800283a 	ret

00802f74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  802f74:	defffa04 	addi	sp,sp,-24
  802f78:	dfc00515 	stw	ra,20(sp)
  802f7c:	df000415 	stw	fp,16(sp)
  802f80:	df000404 	addi	fp,sp,16
  802f84:	e13ffd15 	stw	r4,-12(fp)
  802f88:	e17ffe15 	stw	r5,-8(fp)
  802f8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  802f90:	e0bffd17 	ldw	r2,-12(fp)
  802f94:	10800017 	ldw	r2,0(r2)
  802f98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10c00a04 	addi	r3,r2,40
  802fa4:	e0bffd17 	ldw	r2,-12(fp)
  802fa8:	10800217 	ldw	r2,8(r2)
  802fac:	100f883a 	mov	r7,r2
  802fb0:	e1bfff17 	ldw	r6,-4(fp)
  802fb4:	e17ffe17 	ldw	r5,-8(fp)
  802fb8:	1809883a 	mov	r4,r3
  802fbc:	08030c00 	call	8030c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  802fc0:	e037883a 	mov	sp,fp
  802fc4:	dfc00117 	ldw	ra,4(sp)
  802fc8:	df000017 	ldw	fp,0(sp)
  802fcc:	dec00204 	addi	sp,sp,8
  802fd0:	f800283a 	ret

00802fd4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  802fd4:	defff704 	addi	sp,sp,-36
  802fd8:	df000815 	stw	fp,32(sp)
  802fdc:	df000804 	addi	fp,sp,32
  802fe0:	e13ffc15 	stw	r4,-16(fp)
  802fe4:	e17ffd15 	stw	r5,-12(fp)
  802fe8:	e1bffe15 	stw	r6,-8(fp)
  802fec:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  802ff0:	e0bffc17 	ldw	r2,-16(fp)
  802ff4:	10800017 	ldw	r2,0(r2)
  802ff8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  802ffc:	e0bffd17 	ldw	r2,-12(fp)
  803000:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  803004:	e0bffe17 	ldw	r2,-8(fp)
  803008:	e0fffd17 	ldw	r3,-12(fp)
  80300c:	1885883a 	add	r2,r3,r2
  803010:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  803014:	00001206 	br	803060 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803018:	e0bff917 	ldw	r2,-28(fp)
  80301c:	10800037 	ldwio	r2,0(r2)
  803020:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  803024:	e0bffb17 	ldw	r2,-20(fp)
  803028:	10a0000c 	andi	r2,r2,32768
  80302c:	10000626 	beq	r2,zero,803048 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803030:	e0bff817 	ldw	r2,-32(fp)
  803034:	10c00044 	addi	r3,r2,1
  803038:	e0fff815 	stw	r3,-32(fp)
  80303c:	e0fffb17 	ldw	r3,-20(fp)
  803040:	10c00005 	stb	r3,0(r2)
  803044:	00000606 	br	803060 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  803048:	e0fff817 	ldw	r3,-32(fp)
  80304c:	e0bffd17 	ldw	r2,-12(fp)
  803050:	1880071e 	bne	r3,r2,803070 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  803054:	e0bfff17 	ldw	r2,-4(fp)
  803058:	1090000c 	andi	r2,r2,16384
  80305c:	1000061e 	bne	r2,zero,803078 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  803060:	e0fff817 	ldw	r3,-32(fp)
  803064:	e0bffa17 	ldw	r2,-24(fp)
  803068:	18bfeb36 	bltu	r3,r2,803018 <__alt_data_end+0xff803018>
  80306c:	00000306 	br	80307c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  803070:	0001883a 	nop
  803074:	00000106 	br	80307c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  803078:	0001883a 	nop
    
  }

  if (ptr != buffer)
  80307c:	e0fff817 	ldw	r3,-32(fp)
  803080:	e0bffd17 	ldw	r2,-12(fp)
  803084:	18800426 	beq	r3,r2,803098 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  803088:	e0fff817 	ldw	r3,-32(fp)
  80308c:	e0bffd17 	ldw	r2,-12(fp)
  803090:	1885c83a 	sub	r2,r3,r2
  803094:	00000606 	br	8030b0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  803098:	e0bfff17 	ldw	r2,-4(fp)
  80309c:	1090000c 	andi	r2,r2,16384
  8030a0:	10000226 	beq	r2,zero,8030ac <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  8030a4:	00bffd44 	movi	r2,-11
  8030a8:	00000106 	br	8030b0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  8030ac:	00bffec4 	movi	r2,-5
}
  8030b0:	e037883a 	mov	sp,fp
  8030b4:	df000017 	ldw	fp,0(sp)
  8030b8:	dec00104 	addi	sp,sp,4
  8030bc:	f800283a 	ret

008030c0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8030c0:	defff904 	addi	sp,sp,-28
  8030c4:	df000615 	stw	fp,24(sp)
  8030c8:	df000604 	addi	fp,sp,24
  8030cc:	e13ffc15 	stw	r4,-16(fp)
  8030d0:	e17ffd15 	stw	r5,-12(fp)
  8030d4:	e1bffe15 	stw	r6,-8(fp)
  8030d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8030dc:	e0bffc17 	ldw	r2,-16(fp)
  8030e0:	10800017 	ldw	r2,0(r2)
  8030e4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  8030e8:	e0bffe17 	ldw	r2,-8(fp)
  8030ec:	e0fffd17 	ldw	r3,-12(fp)
  8030f0:	1885883a 	add	r2,r3,r2
  8030f4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  8030f8:	00000e06 	br	803134 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8030fc:	e0bffa17 	ldw	r2,-24(fp)
  803100:	10800104 	addi	r2,r2,4
  803104:	10800037 	ldwio	r2,0(r2)
  803108:	10bfffec 	andhi	r2,r2,65535
  80310c:	10000926 	beq	r2,zero,803134 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  803110:	e0fffa17 	ldw	r3,-24(fp)
  803114:	e0bffd17 	ldw	r2,-12(fp)
  803118:	11000044 	addi	r4,r2,1
  80311c:	e13ffd15 	stw	r4,-12(fp)
  803120:	10800003 	ldbu	r2,0(r2)
  803124:	10803fcc 	andi	r2,r2,255
  803128:	1080201c 	xori	r2,r2,128
  80312c:	10bfe004 	addi	r2,r2,-128
  803130:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  803134:	e0fffd17 	ldw	r3,-12(fp)
  803138:	e0bffb17 	ldw	r2,-20(fp)
  80313c:	18bfef36 	bltu	r3,r2,8030fc <__alt_data_end+0xff8030fc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  803140:	e0bffe17 	ldw	r2,-8(fp)
}
  803144:	e037883a 	mov	sp,fp
  803148:	df000017 	ldw	fp,0(sp)
  80314c:	dec00104 	addi	sp,sp,4
  803150:	f800283a 	ret

00803154 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  803154:	defff404 	addi	sp,sp,-48
  803158:	df000b15 	stw	fp,44(sp)
  80315c:	df000b04 	addi	fp,sp,44
  803160:	e13ffc15 	stw	r4,-16(fp)
  803164:	e17ffd15 	stw	r5,-12(fp)
  803168:	e1bffe15 	stw	r6,-8(fp)
  80316c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  803170:	e0ffff17 	ldw	r3,-4(fp)
  803174:	e0bffe17 	ldw	r2,-8(fp)
  803178:	1885883a 	add	r2,r3,r2
  80317c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  803180:	e0c00217 	ldw	r3,8(fp)
  803184:	e0800117 	ldw	r2,4(fp)
  803188:	1885883a 	add	r2,r3,r2
  80318c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  803190:	e0800117 	ldw	r2,4(fp)
  803194:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  803198:	e0bffe17 	ldw	r2,-8(fp)
  80319c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  8031a0:	00800044 	movi	r2,1
  8031a4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  8031a8:	e0bffc17 	ldw	r2,-16(fp)
  8031ac:	10800504 	addi	r2,r2,20
  8031b0:	1009883a 	mov	r4,r2
  8031b4:	00c00044 	movi	r3,1
  8031b8:	e0bffd17 	ldw	r2,-12(fp)
  8031bc:	1884983a 	sll	r2,r3,r2
  8031c0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  8031c4:	e0800317 	ldw	r2,12(fp)
  8031c8:	1080008c 	andi	r2,r2,2
  8031cc:	1000051e 	bne	r2,zero,8031e4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  8031d0:	e0bffc17 	ldw	r2,-16(fp)
  8031d4:	10800304 	addi	r2,r2,12
  8031d8:	1007883a 	mov	r3,r2
  8031dc:	00810004 	movi	r2,1024
  8031e0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  8031e4:	e0bffc17 	ldw	r2,-16(fp)
  8031e8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  8031ec:	e0bffc17 	ldw	r2,-16(fp)
  8031f0:	10800204 	addi	r2,r2,8
  8031f4:	10800037 	ldwio	r2,0(r2)
  8031f8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  8031fc:	e0bffa17 	ldw	r2,-24(fp)
  803200:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  803204:	10000226 	beq	r2,zero,803210 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  803208:	e0bff717 	ldw	r2,-36(fp)
  80320c:	1000031e 	bne	r2,zero,80321c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  803210:	e0bffa17 	ldw	r2,-24(fp)
  803214:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  803218:	103ff426 	beq	r2,zero,8031ec <__alt_data_end+0xff8031ec>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80321c:	e0bffa17 	ldw	r2,-24(fp)
  803220:	1080100c 	andi	r2,r2,64
  803224:	10001e26 	beq	r2,zero,8032a0 <alt_avalon_spi_command+0x14c>
  803228:	e0bff717 	ldw	r2,-36(fp)
  80322c:	00801c0e 	bge	zero,r2,8032a0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  803230:	e0bff717 	ldw	r2,-36(fp)
  803234:	10bfffc4 	addi	r2,r2,-1
  803238:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  80323c:	e0ffff17 	ldw	r3,-4(fp)
  803240:	e0bff817 	ldw	r2,-32(fp)
  803244:	18800a2e 	bgeu	r3,r2,803270 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  803248:	e0bffc17 	ldw	r2,-16(fp)
  80324c:	10800104 	addi	r2,r2,4
  803250:	1009883a 	mov	r4,r2
  803254:	e0bfff17 	ldw	r2,-4(fp)
  803258:	10c00044 	addi	r3,r2,1
  80325c:	e0ffff15 	stw	r3,-4(fp)
  803260:	10800003 	ldbu	r2,0(r2)
  803264:	10803fcc 	andi	r2,r2,255
  803268:	20800035 	stwio	r2,0(r4)
  80326c:	00000c06 	br	8032a0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  803270:	e0bff517 	ldw	r2,-44(fp)
  803274:	10000826 	beq	r2,zero,803298 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  803278:	e0bff517 	ldw	r2,-44(fp)
  80327c:	10bfffc4 	addi	r2,r2,-1
  803280:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  803284:	e0bffc17 	ldw	r2,-16(fp)
  803288:	10800104 	addi	r2,r2,4
  80328c:	0007883a 	mov	r3,zero
  803290:	10c00035 	stwio	r3,0(r2)
  803294:	00000206 	br	8032a0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  803298:	00bf0004 	movi	r2,-1024
  80329c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  8032a0:	e0bffa17 	ldw	r2,-24(fp)
  8032a4:	1080200c 	andi	r2,r2,128
  8032a8:	103fd026 	beq	r2,zero,8031ec <__alt_data_end+0xff8031ec>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  8032ac:	e0bffc17 	ldw	r2,-16(fp)
  8032b0:	10800037 	ldwio	r2,0(r2)
  8032b4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  8032b8:	e0bff617 	ldw	r2,-40(fp)
  8032bc:	10000426 	beq	r2,zero,8032d0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  8032c0:	e0bff617 	ldw	r2,-40(fp)
  8032c4:	10bfffc4 	addi	r2,r2,-1
  8032c8:	e0bff615 	stw	r2,-40(fp)
  8032cc:	00000506 	br	8032e4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  8032d0:	e0800217 	ldw	r2,8(fp)
  8032d4:	10c00044 	addi	r3,r2,1
  8032d8:	e0c00215 	stw	r3,8(fp)
  8032dc:	e0fffb17 	ldw	r3,-20(fp)
  8032e0:	10c00005 	stb	r3,0(r2)
      credits++;
  8032e4:	e0bff717 	ldw	r2,-36(fp)
  8032e8:	10800044 	addi	r2,r2,1
  8032ec:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  8032f0:	e0bff617 	ldw	r2,-40(fp)
  8032f4:	103fbd1e 	bne	r2,zero,8031ec <__alt_data_end+0xff8031ec>
  8032f8:	e0c00217 	ldw	r3,8(fp)
  8032fc:	e0bff917 	ldw	r2,-28(fp)
  803300:	18bfba1e 	bne	r3,r2,8031ec <__alt_data_end+0xff8031ec>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	10800204 	addi	r2,r2,8
  80330c:	10800037 	ldwio	r2,0(r2)
  803310:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  803314:	e0bffa17 	ldw	r2,-24(fp)
  803318:	1080080c 	andi	r2,r2,32
  80331c:	103ff926 	beq	r2,zero,803304 <__alt_data_end+0xff803304>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  803320:	e0800317 	ldw	r2,12(fp)
  803324:	1080004c 	andi	r2,r2,1
  803328:	1000041e 	bne	r2,zero,80333c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80332c:	e0bffc17 	ldw	r2,-16(fp)
  803330:	10800304 	addi	r2,r2,12
  803334:	0007883a 	mov	r3,zero
  803338:	10c00035 	stwio	r3,0(r2)

  return read_length;
  80333c:	e0800117 	ldw	r2,4(fp)
}
  803340:	e037883a 	mov	sp,fp
  803344:	df000017 	ldw	fp,0(sp)
  803348:	dec00104 	addi	sp,sp,4
  80334c:	f800283a 	ret

00803350 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
  803350:	defff904 	addi	sp,sp,-28
  803354:	dfc00615 	stw	ra,24(sp)
  803358:	df000515 	stw	fp,20(sp)
  80335c:	df000504 	addi	fp,sp,20
  803360:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
  803364:	e0bfff17 	ldw	r2,-4(fp)
  803368:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
  80336c:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
  803370:	e0bffb17 	ldw	r2,-20(fp)
  803374:	10001a26 	beq	r2,zero,8033e0 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803378:	0005303a 	rdctl	r2,status
  80337c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803380:	e0fffe17 	ldw	r3,-8(fp)
  803384:	00bfff84 	movi	r2,-2
  803388:	1884703a 	and	r2,r3,r2
  80338c:	1001703a 	wrctl	status,r2
  
  return context;
  803390:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
  803394:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
  803398:	e0bffb17 	ldw	r2,-20(fp)
  80339c:	10800a17 	ldw	r2,40(r2)
  8033a0:	10000626 	beq	r2,zero,8033bc <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
  8033a4:	e0bffb17 	ldw	r2,-20(fp)
  8033a8:	10800a17 	ldw	r2,40(r2)
  8033ac:	e0fffb17 	ldw	r3,-20(fp)
  8033b0:	18c00b17 	ldw	r3,44(r3)
  8033b4:	1809883a 	mov	r4,r3
  8033b8:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
  8033bc:	e0bffb17 	ldw	r2,-20(fp)
  8033c0:	10800c17 	ldw	r2,48(r2)
  8033c4:	1009883a 	mov	r4,r2
  8033c8:	08037fc0 	call	8037fc <adc_clear_interrupt_status>
  8033cc:	e0bffc17 	ldw	r2,-16(fp)
  8033d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8033d4:	e0bffd17 	ldw	r2,-12(fp)
  8033d8:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
  8033dc:	0001883a 	nop
  8033e0:	0001883a 	nop
}
  8033e4:	e037883a 	mov	sp,fp
  8033e8:	dfc00117 	ldw	ra,4(sp)
  8033ec:	df000017 	ldw	fp,0(sp)
  8033f0:	dec00204 	addi	sp,sp,8
  8033f4:	f800283a 	ret

008033f8 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
  8033f8:	defff804 	addi	sp,sp,-32
  8033fc:	df000715 	stw	fp,28(sp)
  803400:	df000704 	addi	fp,sp,28
  803404:	e13ffd15 	stw	r4,-12(fp)
  803408:	e17ffe15 	stw	r5,-8(fp)
  80340c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
  803410:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
  803414:	e0bfff17 	ldw	r2,-4(fp)
  803418:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
  80341c:	e0bffe17 	ldw	r2,-8(fp)
  803420:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
  803424:	e0bffd17 	ldw	r2,-12(fp)
  803428:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
  80342c:	e0bffa17 	ldw	r2,-24(fp)
  803430:	1000021e 	bne	r2,zero,80343c <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
  803434:	00bffa84 	movi	r2,-22
  803438:	00001606 	br	803494 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
  80343c:	e03ff915 	stw	zero,-28(fp)
  803440:	00001006 	br	803484 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  803444:	e0bff917 	ldw	r2,-28(fp)
  803448:	1085883a 	add	r2,r2,r2
  80344c:	1085883a 	add	r2,r2,r2
  803450:	1007883a 	mov	r3,r2
  803454:	e0bffc17 	ldw	r2,-16(fp)
  803458:	1885883a 	add	r2,r3,r2
  80345c:	10800037 	ldwio	r2,0(r2)
  803460:	1007883a 	mov	r3,r2
  803464:	e0bffa17 	ldw	r2,-24(fp)
  803468:	10c00015 	stw	r3,0(r2)

       dest_buf++;
  80346c:	e0bffa17 	ldw	r2,-24(fp)
  803470:	10800104 	addi	r2,r2,4
  803474:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  803478:	e0bff917 	ldw	r2,-28(fp)
  80347c:	10800044 	addi	r2,r2,1
  803480:	e0bff915 	stw	r2,-28(fp)
  803484:	e0fff917 	ldw	r3,-28(fp)
  803488:	e0bffb17 	ldw	r2,-20(fp)
  80348c:	18bfed36 	bltu	r3,r2,803444 <__alt_data_end+0xff803444>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
  803490:	0005883a 	mov	r2,zero

}
  803494:	e037883a 	mov	sp,fp
  803498:	df000017 	ldw	fp,0(sp)
  80349c:	dec00104 	addi	sp,sp,4
  8034a0:	f800283a 	ret

008034a4 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  8034a4:	defffa04 	addi	sp,sp,-24
  8034a8:	dfc00515 	stw	ra,20(sp)
  8034ac:	df000415 	stw	fp,16(sp)
  8034b0:	df000404 	addi	fp,sp,16
  8034b4:	e13ffd15 	stw	r4,-12(fp)
  8034b8:	e17ffe15 	stw	r5,-8(fp)
  8034bc:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  8034c0:	d1600504 	addi	r5,gp,-32748
  8034c4:	e13ffd17 	ldw	r4,-12(fp)
  8034c8:	0803a800 	call	803a80 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
  8034cc:	e0bffe17 	ldw	r2,-8(fp)
  8034d0:	10000b16 	blt	r2,zero,803500 <altera_modular_adc_init+0x5c>
  8034d4:	e0bfff17 	ldw	r2,-4(fp)
  8034d8:	10000916 	blt	r2,zero,803500 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
  8034dc:	e0bffe17 	ldw	r2,-8(fp)
  8034e0:	e0ffff17 	ldw	r3,-4(fp)
  8034e4:	d8000015 	stw	zero,0(sp)
  8034e8:	e1fffd17 	ldw	r7,-12(fp)
  8034ec:	01802034 	movhi	r6,128
  8034f0:	318cd404 	addi	r6,r6,13136
  8034f4:	180b883a 	mov	r5,r3
  8034f8:	1009883a 	mov	r4,r2
  8034fc:	0803bd40 	call	803bd4 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
  803500:	0001883a 	nop
  803504:	e037883a 	mov	sp,fp
  803508:	dfc00117 	ldw	ra,4(sp)
  80350c:	df000017 	ldw	fp,0(sp)
  803510:	dec00204 	addi	sp,sp,8
  803514:	f800283a 	ret

00803518 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  803518:	defffa04 	addi	sp,sp,-24
  80351c:	dfc00515 	stw	ra,20(sp)
  803520:	df000415 	stw	fp,16(sp)
  803524:	df000404 	addi	fp,sp,16
  803528:	e13ffc15 	stw	r4,-16(fp)
  80352c:	e17ffd15 	stw	r5,-12(fp)
  803530:	e1bffe15 	stw	r6,-8(fp)
  803534:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  803538:	e0bffc17 	ldw	r2,-16(fp)
  80353c:	e0fffd17 	ldw	r3,-12(fp)
  803540:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
  803544:	e0bffc17 	ldw	r2,-16(fp)
  803548:	e0fffe17 	ldw	r3,-8(fp)
  80354c:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	e0ffff17 	ldw	r3,-4(fp)
  803558:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
  80355c:	e0bffd17 	ldw	r2,-12(fp)
  803560:	10000726 	beq	r2,zero,803580 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
  803564:	e0bfff17 	ldw	r2,-4(fp)
  803568:	1009883a 	mov	r4,r2
  80356c:	08037fc0 	call	8037fc <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
  803570:	e0bfff17 	ldw	r2,-4(fp)
  803574:	1009883a 	mov	r4,r2
  803578:	08037700 	call	803770 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
  80357c:	00000706 	br	80359c <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
  803580:	e0bfff17 	ldw	r2,-4(fp)
  803584:	1009883a 	mov	r4,r2
  803588:	08037b40 	call	8037b4 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
  80358c:	e0bfff17 	ldw	r2,-4(fp)
  803590:	1009883a 	mov	r4,r2
  803594:	08037fc0 	call	8037fc <adc_clear_interrupt_status>
	}
	
    
	
    return ;
  803598:	0001883a 	nop
}
  80359c:	e037883a 	mov	sp,fp
  8035a0:	dfc00117 	ldw	ra,4(sp)
  8035a4:	df000017 	ldw	fp,0(sp)
  8035a8:	dec00204 	addi	sp,sp,8
  8035ac:	f800283a 	ret

008035b0 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
  8035b0:	defffc04 	addi	sp,sp,-16
  8035b4:	dfc00315 	stw	ra,12(sp)
  8035b8:	df000215 	stw	fp,8(sp)
  8035bc:	df000204 	addi	fp,sp,8
  8035c0:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
  8035c4:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
  8035c8:	d1600504 	addi	r5,gp,-32748
  8035cc:	e13fff17 	ldw	r4,-4(fp)
  8035d0:	0803b240 	call	803b24 <alt_find_dev>
  8035d4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  8035d8:	e0bffe17 	ldw	r2,-8(fp)
}
  8035dc:	e037883a 	mov	sp,fp
  8035e0:	dfc00117 	ldw	ra,4(sp)
  8035e4:	df000017 	ldw	fp,0(sp)
  8035e8:	dec00204 	addi	sp,sp,8
  8035ec:	f800283a 	ret

008035f0 <adc_stop>:

void adc_stop(int sequencer_base)
{
  8035f0:	defffe04 	addi	sp,sp,-8
  8035f4:	df000115 	stw	fp,4(sp)
  8035f8:	df000104 	addi	fp,sp,4
  8035fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
  803600:	e0bfff17 	ldw	r2,-4(fp)
  803604:	e0ffff17 	ldw	r3,-4(fp)
  803608:	19000037 	ldwio	r4,0(r3)
  80360c:	00ffff84 	movi	r3,-2
  803610:	20c6703a 	and	r3,r4,r3
  803614:	10c00035 	stwio	r3,0(r2)
  803618:	0001883a 	nop
  80361c:	e0bfff17 	ldw	r2,-4(fp)
  803620:	10800037 	ldwio	r2,0(r2)
  803624:	1080004c 	andi	r2,r2,1
  803628:	103ffc1e 	bne	r2,zero,80361c <__alt_data_end+0xff80361c>
}
  80362c:	0001883a 	nop
  803630:	e037883a 	mov	sp,fp
  803634:	df000017 	ldw	fp,0(sp)
  803638:	dec00104 	addi	sp,sp,4
  80363c:	f800283a 	ret

00803640 <adc_start>:

void adc_start(int sequencer_base)
{
  803640:	defffe04 	addi	sp,sp,-8
  803644:	df000115 	stw	fp,4(sp)
  803648:	df000104 	addi	fp,sp,4
  80364c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
  803650:	e0bfff17 	ldw	r2,-4(fp)
  803654:	e0ffff17 	ldw	r3,-4(fp)
  803658:	18c00037 	ldwio	r3,0(r3)
  80365c:	18c00054 	ori	r3,r3,1
  803660:	10c00035 	stwio	r3,0(r2)
}
  803664:	0001883a 	nop
  803668:	e037883a 	mov	sp,fp
  80366c:	df000017 	ldw	fp,0(sp)
  803670:	dec00104 	addi	sp,sp,4
  803674:	f800283a 	ret

00803678 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
  803678:	defffe04 	addi	sp,sp,-8
  80367c:	df000115 	stw	fp,4(sp)
  803680:	df000104 	addi	fp,sp,4
  803684:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
  803688:	e0bfff17 	ldw	r2,-4(fp)
  80368c:	e0ffff17 	ldw	r3,-4(fp)
  803690:	19000037 	ldwio	r4,0(r3)
  803694:	00fffc44 	movi	r3,-15
  803698:	20c6703a 	and	r3,r4,r3
  80369c:	18c00094 	ori	r3,r3,2
  8036a0:	10c00035 	stwio	r3,0(r2)
}
  8036a4:	0001883a 	nop
  8036a8:	e037883a 	mov	sp,fp
  8036ac:	df000017 	ldw	fp,0(sp)
  8036b0:	dec00104 	addi	sp,sp,4
  8036b4:	f800283a 	ret

008036b8 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
  8036b8:	defffe04 	addi	sp,sp,-8
  8036bc:	df000115 	stw	fp,4(sp)
  8036c0:	df000104 	addi	fp,sp,4
  8036c4:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
  8036c8:	e0bfff17 	ldw	r2,-4(fp)
  8036cc:	e0ffff17 	ldw	r3,-4(fp)
  8036d0:	19000037 	ldwio	r4,0(r3)
  8036d4:	00fffc44 	movi	r3,-15
  8036d8:	20c6703a 	and	r3,r4,r3
  8036dc:	10c00035 	stwio	r3,0(r2)
}
  8036e0:	0001883a 	nop
  8036e4:	e037883a 	mov	sp,fp
  8036e8:	df000017 	ldw	fp,0(sp)
  8036ec:	dec00104 	addi	sp,sp,4
  8036f0:	f800283a 	ret

008036f4 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
  8036f4:	defffc04 	addi	sp,sp,-16
  8036f8:	dfc00315 	stw	ra,12(sp)
  8036fc:	df000215 	stw	fp,8(sp)
  803700:	df000204 	addi	fp,sp,8
  803704:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
  803708:	e0bfff17 	ldw	r2,-4(fp)
  80370c:	10800037 	ldwio	r2,0(r2)
  803710:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
  803714:	e13fff17 	ldw	r4,-4(fp)
  803718:	08035f00 	call	8035f0 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
  80371c:	e0bfff17 	ldw	r2,-4(fp)
  803720:	e0ffff17 	ldw	r3,-4(fp)
  803724:	18c00037 	ldwio	r3,0(r3)
  803728:	18c00394 	ori	r3,r3,14
  80372c:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
  803730:	e13fff17 	ldw	r4,-4(fp)
  803734:	08036400 	call	803640 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  803738:	0001883a 	nop
  80373c:	e0bfff17 	ldw	r2,-4(fp)
  803740:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
  803744:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  803748:	103ffc1e 	bne	r2,zero,80373c <__alt_data_end+0xff80373c>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
  80374c:	e0bfff17 	ldw	r2,-4(fp)
  803750:	e0fffe17 	ldw	r3,-8(fp)
  803754:	10c00035 	stwio	r3,0(r2)
}
  803758:	0001883a 	nop
  80375c:	e037883a 	mov	sp,fp
  803760:	dfc00117 	ldw	ra,4(sp)
  803764:	df000017 	ldw	fp,0(sp)
  803768:	dec00204 	addi	sp,sp,8
  80376c:	f800283a 	ret

00803770 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
  803770:	defffe04 	addi	sp,sp,-8
  803774:	df000115 	stw	fp,4(sp)
  803778:	df000104 	addi	fp,sp,4
  80377c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
  803780:	e0bfff17 	ldw	r2,-4(fp)
  803784:	10804004 	addi	r2,r2,256
  803788:	1007883a 	mov	r3,r2
  80378c:	e0bfff17 	ldw	r2,-4(fp)
  803790:	10804004 	addi	r2,r2,256
  803794:	10800037 	ldwio	r2,0(r2)
  803798:	10800054 	ori	r2,r2,1
  80379c:	18800035 	stwio	r2,0(r3)
}
  8037a0:	0001883a 	nop
  8037a4:	e037883a 	mov	sp,fp
  8037a8:	df000017 	ldw	fp,0(sp)
  8037ac:	dec00104 	addi	sp,sp,4
  8037b0:	f800283a 	ret

008037b4 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
  8037b4:	defffe04 	addi	sp,sp,-8
  8037b8:	df000115 	stw	fp,4(sp)
  8037bc:	df000104 	addi	fp,sp,4
  8037c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
  8037c4:	e0bfff17 	ldw	r2,-4(fp)
  8037c8:	10804004 	addi	r2,r2,256
  8037cc:	1009883a 	mov	r4,r2
  8037d0:	e0bfff17 	ldw	r2,-4(fp)
  8037d4:	10804004 	addi	r2,r2,256
  8037d8:	10c00037 	ldwio	r3,0(r2)
  8037dc:	00bfff84 	movi	r2,-2
  8037e0:	1884703a 	and	r2,r3,r2
  8037e4:	20800035 	stwio	r2,0(r4)
}
  8037e8:	0001883a 	nop
  8037ec:	e037883a 	mov	sp,fp
  8037f0:	df000017 	ldw	fp,0(sp)
  8037f4:	dec00104 	addi	sp,sp,4
  8037f8:	f800283a 	ret

008037fc <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
  8037fc:	defffe04 	addi	sp,sp,-8
  803800:	df000115 	stw	fp,4(sp)
  803804:	df000104 	addi	fp,sp,4
  803808:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
  80380c:	e0bfff17 	ldw	r2,-4(fp)
  803810:	10804104 	addi	r2,r2,260
  803814:	1007883a 	mov	r3,r2
  803818:	e0bfff17 	ldw	r2,-4(fp)
  80381c:	10804104 	addi	r2,r2,260
  803820:	10800037 	ldwio	r2,0(r2)
  803824:	10800054 	ori	r2,r2,1
  803828:	18800035 	stwio	r2,0(r3)
}
  80382c:	0001883a 	nop
  803830:	e037883a 	mov	sp,fp
  803834:	df000017 	ldw	fp,0(sp)
  803838:	dec00104 	addi	sp,sp,4
  80383c:	f800283a 	ret

00803840 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
  803840:	defffe04 	addi	sp,sp,-8
  803844:	df000115 	stw	fp,4(sp)
  803848:	df000104 	addi	fp,sp,4
  80384c:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
  803850:	e0bfff17 	ldw	r2,-4(fp)
  803854:	10804104 	addi	r2,r2,260
  803858:	10800037 	ldwio	r2,0(r2)
  80385c:	1080004c 	andi	r2,r2,1
  803860:	10000226 	beq	r2,zero,80386c <adc_interrupt_asserted+0x2c>
  803864:	00bfffc4 	movi	r2,-1
  803868:	00000106 	br	803870 <adc_interrupt_asserted+0x30>
  80386c:	0005883a 	mov	r2,zero
}
  803870:	e037883a 	mov	sp,fp
  803874:	df000017 	ldw	fp,0(sp)
  803878:	dec00104 	addi	sp,sp,4
  80387c:	f800283a 	ret

00803880 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
  803880:	defffe04 	addi	sp,sp,-8
  803884:	df000115 	stw	fp,4(sp)
  803888:	df000104 	addi	fp,sp,4
  80388c:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
  803890:	0001883a 	nop
  803894:	e0bfff17 	ldw	r2,-4(fp)
  803898:	10804104 	addi	r2,r2,260
  80389c:	10800037 	ldwio	r2,0(r2)
  8038a0:	1080004c 	andi	r2,r2,1
  8038a4:	103ffb26 	beq	r2,zero,803894 <__alt_data_end+0xff803894>
}
  8038a8:	0001883a 	nop
  8038ac:	e037883a 	mov	sp,fp
  8038b0:	df000017 	ldw	fp,0(sp)
  8038b4:	dec00104 	addi	sp,sp,4
  8038b8:	f800283a 	ret

008038bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8038bc:	defffe04 	addi	sp,sp,-8
  8038c0:	dfc00115 	stw	ra,4(sp)
  8038c4:	df000015 	stw	fp,0(sp)
  8038c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8038cc:	00802034 	movhi	r2,128
  8038d0:	1093e404 	addi	r2,r2,20368
  8038d4:	10800017 	ldw	r2,0(r2)
  8038d8:	10000526 	beq	r2,zero,8038f0 <alt_get_errno+0x34>
  8038dc:	00802034 	movhi	r2,128
  8038e0:	1093e404 	addi	r2,r2,20368
  8038e4:	10800017 	ldw	r2,0(r2)
  8038e8:	103ee83a 	callr	r2
  8038ec:	00000206 	br	8038f8 <alt_get_errno+0x3c>
  8038f0:	00802034 	movhi	r2,128
  8038f4:	1095b504 	addi	r2,r2,22228
}
  8038f8:	e037883a 	mov	sp,fp
  8038fc:	dfc00117 	ldw	ra,4(sp)
  803900:	df000017 	ldw	fp,0(sp)
  803904:	dec00204 	addi	sp,sp,8
  803908:	f800283a 	ret

0080390c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80390c:	defffb04 	addi	sp,sp,-20
  803910:	dfc00415 	stw	ra,16(sp)
  803914:	df000315 	stw	fp,12(sp)
  803918:	df000304 	addi	fp,sp,12
  80391c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803920:	e0bfff17 	ldw	r2,-4(fp)
  803924:	10000816 	blt	r2,zero,803948 <close+0x3c>
  803928:	01400304 	movi	r5,12
  80392c:	e13fff17 	ldw	r4,-4(fp)
  803930:	0801f2c0 	call	801f2c <__mulsi3>
  803934:	1007883a 	mov	r3,r2
  803938:	00802034 	movhi	r2,128
  80393c:	10937804 	addi	r2,r2,19936
  803940:	1885883a 	add	r2,r3,r2
  803944:	00000106 	br	80394c <close+0x40>
  803948:	0005883a 	mov	r2,zero
  80394c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803950:	e0bffd17 	ldw	r2,-12(fp)
  803954:	10001926 	beq	r2,zero,8039bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803958:	e0bffd17 	ldw	r2,-12(fp)
  80395c:	10800017 	ldw	r2,0(r2)
  803960:	10800417 	ldw	r2,16(r2)
  803964:	10000626 	beq	r2,zero,803980 <close+0x74>
  803968:	e0bffd17 	ldw	r2,-12(fp)
  80396c:	10800017 	ldw	r2,0(r2)
  803970:	10800417 	ldw	r2,16(r2)
  803974:	e13ffd17 	ldw	r4,-12(fp)
  803978:	103ee83a 	callr	r2
  80397c:	00000106 	br	803984 <close+0x78>
  803980:	0005883a 	mov	r2,zero
  803984:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803988:	e13fff17 	ldw	r4,-4(fp)
  80398c:	08042a80 	call	8042a8 <alt_release_fd>
    if (rval < 0)
  803990:	e0bffe17 	ldw	r2,-8(fp)
  803994:	1000070e 	bge	r2,zero,8039b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  803998:	08038bc0 	call	8038bc <alt_get_errno>
  80399c:	1007883a 	mov	r3,r2
  8039a0:	e0bffe17 	ldw	r2,-8(fp)
  8039a4:	0085c83a 	sub	r2,zero,r2
  8039a8:	18800015 	stw	r2,0(r3)
      return -1;
  8039ac:	00bfffc4 	movi	r2,-1
  8039b0:	00000706 	br	8039d0 <close+0xc4>
    }
    return 0;
  8039b4:	0005883a 	mov	r2,zero
  8039b8:	00000506 	br	8039d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8039bc:	08038bc0 	call	8038bc <alt_get_errno>
  8039c0:	1007883a 	mov	r3,r2
  8039c4:	00801444 	movi	r2,81
  8039c8:	18800015 	stw	r2,0(r3)
    return -1;
  8039cc:	00bfffc4 	movi	r2,-1
  }
}
  8039d0:	e037883a 	mov	sp,fp
  8039d4:	dfc00117 	ldw	ra,4(sp)
  8039d8:	df000017 	ldw	fp,0(sp)
  8039dc:	dec00204 	addi	sp,sp,8
  8039e0:	f800283a 	ret

008039e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8039e4:	deffff04 	addi	sp,sp,-4
  8039e8:	df000015 	stw	fp,0(sp)
  8039ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8039f0:	0001883a 	nop
  8039f4:	e037883a 	mov	sp,fp
  8039f8:	df000017 	ldw	fp,0(sp)
  8039fc:	dec00104 	addi	sp,sp,4
  803a00:	f800283a 	ret

00803a04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803a04:	defffc04 	addi	sp,sp,-16
  803a08:	df000315 	stw	fp,12(sp)
  803a0c:	df000304 	addi	fp,sp,12
  803a10:	e13ffd15 	stw	r4,-12(fp)
  803a14:	e17ffe15 	stw	r5,-8(fp)
  803a18:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803a1c:	e0bfff17 	ldw	r2,-4(fp)
}
  803a20:	e037883a 	mov	sp,fp
  803a24:	df000017 	ldw	fp,0(sp)
  803a28:	dec00104 	addi	sp,sp,4
  803a2c:	f800283a 	ret

00803a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a30:	defffe04 	addi	sp,sp,-8
  803a34:	dfc00115 	stw	ra,4(sp)
  803a38:	df000015 	stw	fp,0(sp)
  803a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a40:	00802034 	movhi	r2,128
  803a44:	1093e404 	addi	r2,r2,20368
  803a48:	10800017 	ldw	r2,0(r2)
  803a4c:	10000526 	beq	r2,zero,803a64 <alt_get_errno+0x34>
  803a50:	00802034 	movhi	r2,128
  803a54:	1093e404 	addi	r2,r2,20368
  803a58:	10800017 	ldw	r2,0(r2)
  803a5c:	103ee83a 	callr	r2
  803a60:	00000206 	br	803a6c <alt_get_errno+0x3c>
  803a64:	00802034 	movhi	r2,128
  803a68:	1095b504 	addi	r2,r2,22228
}
  803a6c:	e037883a 	mov	sp,fp
  803a70:	dfc00117 	ldw	ra,4(sp)
  803a74:	df000017 	ldw	fp,0(sp)
  803a78:	dec00204 	addi	sp,sp,8
  803a7c:	f800283a 	ret

00803a80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  803a80:	defffa04 	addi	sp,sp,-24
  803a84:	dfc00515 	stw	ra,20(sp)
  803a88:	df000415 	stw	fp,16(sp)
  803a8c:	df000404 	addi	fp,sp,16
  803a90:	e13ffe15 	stw	r4,-8(fp)
  803a94:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  803a98:	e0bffe17 	ldw	r2,-8(fp)
  803a9c:	10000326 	beq	r2,zero,803aac <alt_dev_llist_insert+0x2c>
  803aa0:	e0bffe17 	ldw	r2,-8(fp)
  803aa4:	10800217 	ldw	r2,8(r2)
  803aa8:	1000061e 	bne	r2,zero,803ac4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  803aac:	0803a300 	call	803a30 <alt_get_errno>
  803ab0:	1007883a 	mov	r3,r2
  803ab4:	00800584 	movi	r2,22
  803ab8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803abc:	00bffa84 	movi	r2,-22
  803ac0:	00001306 	br	803b10 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  803ac4:	e0bffe17 	ldw	r2,-8(fp)
  803ac8:	e0ffff17 	ldw	r3,-4(fp)
  803acc:	e0fffc15 	stw	r3,-16(fp)
  803ad0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803ad4:	e0bffd17 	ldw	r2,-12(fp)
  803ad8:	e0fffc17 	ldw	r3,-16(fp)
  803adc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  803ae0:	e0bffc17 	ldw	r2,-16(fp)
  803ae4:	10c00017 	ldw	r3,0(r2)
  803ae8:	e0bffd17 	ldw	r2,-12(fp)
  803aec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803af0:	e0bffc17 	ldw	r2,-16(fp)
  803af4:	10800017 	ldw	r2,0(r2)
  803af8:	e0fffd17 	ldw	r3,-12(fp)
  803afc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  803b00:	e0bffc17 	ldw	r2,-16(fp)
  803b04:	e0fffd17 	ldw	r3,-12(fp)
  803b08:	10c00015 	stw	r3,0(r2)

  return 0;  
  803b0c:	0005883a 	mov	r2,zero
}
  803b10:	e037883a 	mov	sp,fp
  803b14:	dfc00117 	ldw	ra,4(sp)
  803b18:	df000017 	ldw	fp,0(sp)
  803b1c:	dec00204 	addi	sp,sp,8
  803b20:	f800283a 	ret

00803b24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803b24:	defffa04 	addi	sp,sp,-24
  803b28:	dfc00515 	stw	ra,20(sp)
  803b2c:	df000415 	stw	fp,16(sp)
  803b30:	df000404 	addi	fp,sp,16
  803b34:	e13ffe15 	stw	r4,-8(fp)
  803b38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803b3c:	e0bfff17 	ldw	r2,-4(fp)
  803b40:	10800017 	ldw	r2,0(r2)
  803b44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803b48:	e13ffe17 	ldw	r4,-8(fp)
  803b4c:	08023740 	call	802374 <strlen>
  803b50:	10800044 	addi	r2,r2,1
  803b54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803b58:	00000d06 	br	803b90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803b5c:	e0bffc17 	ldw	r2,-16(fp)
  803b60:	10800217 	ldw	r2,8(r2)
  803b64:	e0fffd17 	ldw	r3,-12(fp)
  803b68:	180d883a 	mov	r6,r3
  803b6c:	e17ffe17 	ldw	r5,-8(fp)
  803b70:	1009883a 	mov	r4,r2
  803b74:	08045f40 	call	8045f4 <memcmp>
  803b78:	1000021e 	bne	r2,zero,803b84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803b7c:	e0bffc17 	ldw	r2,-16(fp)
  803b80:	00000706 	br	803ba0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803b84:	e0bffc17 	ldw	r2,-16(fp)
  803b88:	10800017 	ldw	r2,0(r2)
  803b8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803b90:	e0fffc17 	ldw	r3,-16(fp)
  803b94:	e0bfff17 	ldw	r2,-4(fp)
  803b98:	18bff01e 	bne	r3,r2,803b5c <__alt_data_end+0xff803b5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803b9c:	0005883a 	mov	r2,zero
}
  803ba0:	e037883a 	mov	sp,fp
  803ba4:	dfc00117 	ldw	ra,4(sp)
  803ba8:	df000017 	ldw	fp,0(sp)
  803bac:	dec00204 	addi	sp,sp,8
  803bb0:	f800283a 	ret

00803bb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  803bb4:	deffff04 	addi	sp,sp,-4
  803bb8:	df000015 	stw	fp,0(sp)
  803bbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  803bc0:	0001883a 	nop
  803bc4:	e037883a 	mov	sp,fp
  803bc8:	df000017 	ldw	fp,0(sp)
  803bcc:	dec00104 	addi	sp,sp,4
  803bd0:	f800283a 	ret

00803bd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803bd4:	defff904 	addi	sp,sp,-28
  803bd8:	dfc00615 	stw	ra,24(sp)
  803bdc:	df000515 	stw	fp,20(sp)
  803be0:	df000504 	addi	fp,sp,20
  803be4:	e13ffc15 	stw	r4,-16(fp)
  803be8:	e17ffd15 	stw	r5,-12(fp)
  803bec:	e1bffe15 	stw	r6,-8(fp)
  803bf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  803bf4:	e0800217 	ldw	r2,8(fp)
  803bf8:	d8800015 	stw	r2,0(sp)
  803bfc:	e1ffff17 	ldw	r7,-4(fp)
  803c00:	e1bffe17 	ldw	r6,-8(fp)
  803c04:	e17ffd17 	ldw	r5,-12(fp)
  803c08:	e13ffc17 	ldw	r4,-16(fp)
  803c0c:	0803db40 	call	803db4 <alt_iic_isr_register>
}  
  803c10:	e037883a 	mov	sp,fp
  803c14:	dfc00117 	ldw	ra,4(sp)
  803c18:	df000017 	ldw	fp,0(sp)
  803c1c:	dec00204 	addi	sp,sp,8
  803c20:	f800283a 	ret

00803c24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  803c24:	defff904 	addi	sp,sp,-28
  803c28:	df000615 	stw	fp,24(sp)
  803c2c:	df000604 	addi	fp,sp,24
  803c30:	e13ffe15 	stw	r4,-8(fp)
  803c34:	e17fff15 	stw	r5,-4(fp)
  803c38:	e0bfff17 	ldw	r2,-4(fp)
  803c3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803c40:	0005303a 	rdctl	r2,status
  803c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803c48:	e0fffb17 	ldw	r3,-20(fp)
  803c4c:	00bfff84 	movi	r2,-2
  803c50:	1884703a 	and	r2,r3,r2
  803c54:	1001703a 	wrctl	status,r2
  
  return context;
  803c58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803c5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  803c60:	00c00044 	movi	r3,1
  803c64:	e0bffa17 	ldw	r2,-24(fp)
  803c68:	1884983a 	sll	r2,r3,r2
  803c6c:	1007883a 	mov	r3,r2
  803c70:	00802034 	movhi	r2,128
  803c74:	1095b904 	addi	r2,r2,22244
  803c78:	10800017 	ldw	r2,0(r2)
  803c7c:	1886b03a 	or	r3,r3,r2
  803c80:	00802034 	movhi	r2,128
  803c84:	1095b904 	addi	r2,r2,22244
  803c88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803c8c:	00802034 	movhi	r2,128
  803c90:	1095b904 	addi	r2,r2,22244
  803c94:	10800017 	ldw	r2,0(r2)
  803c98:	100170fa 	wrctl	ienable,r2
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803cac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  803cb0:	0001883a 	nop
}
  803cb4:	e037883a 	mov	sp,fp
  803cb8:	df000017 	ldw	fp,0(sp)
  803cbc:	dec00104 	addi	sp,sp,4
  803cc0:	f800283a 	ret

00803cc4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  803cc4:	defff904 	addi	sp,sp,-28
  803cc8:	df000615 	stw	fp,24(sp)
  803ccc:	df000604 	addi	fp,sp,24
  803cd0:	e13ffe15 	stw	r4,-8(fp)
  803cd4:	e17fff15 	stw	r5,-4(fp)
  803cd8:	e0bfff17 	ldw	r2,-4(fp)
  803cdc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803ce0:	0005303a 	rdctl	r2,status
  803ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803ce8:	e0fffb17 	ldw	r3,-20(fp)
  803cec:	00bfff84 	movi	r2,-2
  803cf0:	1884703a 	and	r2,r3,r2
  803cf4:	1001703a 	wrctl	status,r2
  
  return context;
  803cf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803cfc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  803d00:	00c00044 	movi	r3,1
  803d04:	e0bffa17 	ldw	r2,-24(fp)
  803d08:	1884983a 	sll	r2,r3,r2
  803d0c:	0084303a 	nor	r2,zero,r2
  803d10:	1007883a 	mov	r3,r2
  803d14:	00802034 	movhi	r2,128
  803d18:	1095b904 	addi	r2,r2,22244
  803d1c:	10800017 	ldw	r2,0(r2)
  803d20:	1886703a 	and	r3,r3,r2
  803d24:	00802034 	movhi	r2,128
  803d28:	1095b904 	addi	r2,r2,22244
  803d2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803d30:	00802034 	movhi	r2,128
  803d34:	1095b904 	addi	r2,r2,22244
  803d38:	10800017 	ldw	r2,0(r2)
  803d3c:	100170fa 	wrctl	ienable,r2
  803d40:	e0bffc17 	ldw	r2,-16(fp)
  803d44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d48:	e0bffd17 	ldw	r2,-12(fp)
  803d4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803d50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  803d54:	0001883a 	nop
}
  803d58:	e037883a 	mov	sp,fp
  803d5c:	df000017 	ldw	fp,0(sp)
  803d60:	dec00104 	addi	sp,sp,4
  803d64:	f800283a 	ret

00803d68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  803d68:	defffc04 	addi	sp,sp,-16
  803d6c:	df000315 	stw	fp,12(sp)
  803d70:	df000304 	addi	fp,sp,12
  803d74:	e13ffe15 	stw	r4,-8(fp)
  803d78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  803d7c:	000530fa 	rdctl	r2,ienable
  803d80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803d84:	00c00044 	movi	r3,1
  803d88:	e0bfff17 	ldw	r2,-4(fp)
  803d8c:	1884983a 	sll	r2,r3,r2
  803d90:	1007883a 	mov	r3,r2
  803d94:	e0bffd17 	ldw	r2,-12(fp)
  803d98:	1884703a 	and	r2,r3,r2
  803d9c:	1004c03a 	cmpne	r2,r2,zero
  803da0:	10803fcc 	andi	r2,r2,255
}
  803da4:	e037883a 	mov	sp,fp
  803da8:	df000017 	ldw	fp,0(sp)
  803dac:	dec00104 	addi	sp,sp,4
  803db0:	f800283a 	ret

00803db4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803db4:	defff504 	addi	sp,sp,-44
  803db8:	dfc00a15 	stw	ra,40(sp)
  803dbc:	df000915 	stw	fp,36(sp)
  803dc0:	df000904 	addi	fp,sp,36
  803dc4:	e13ffc15 	stw	r4,-16(fp)
  803dc8:	e17ffd15 	stw	r5,-12(fp)
  803dcc:	e1bffe15 	stw	r6,-8(fp)
  803dd0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  803dd4:	00bffa84 	movi	r2,-22
  803dd8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  803ddc:	e0bffd17 	ldw	r2,-12(fp)
  803de0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803de4:	e0bff817 	ldw	r2,-32(fp)
  803de8:	10800808 	cmpgei	r2,r2,32
  803dec:	1000271e 	bne	r2,zero,803e8c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803df0:	0005303a 	rdctl	r2,status
  803df4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803df8:	e0fffb17 	ldw	r3,-20(fp)
  803dfc:	00bfff84 	movi	r2,-2
  803e00:	1884703a 	and	r2,r3,r2
  803e04:	1001703a 	wrctl	status,r2
  
  return context;
  803e08:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  803e0c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  803e10:	00802034 	movhi	r2,128
  803e14:	1095bb04 	addi	r2,r2,22252
  803e18:	e0fff817 	ldw	r3,-32(fp)
  803e1c:	180690fa 	slli	r3,r3,3
  803e20:	10c5883a 	add	r2,r2,r3
  803e24:	e0fffe17 	ldw	r3,-8(fp)
  803e28:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  803e2c:	00802034 	movhi	r2,128
  803e30:	1095bb04 	addi	r2,r2,22252
  803e34:	e0fff817 	ldw	r3,-32(fp)
  803e38:	180690fa 	slli	r3,r3,3
  803e3c:	10c5883a 	add	r2,r2,r3
  803e40:	10800104 	addi	r2,r2,4
  803e44:	e0ffff17 	ldw	r3,-4(fp)
  803e48:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  803e4c:	e0bffe17 	ldw	r2,-8(fp)
  803e50:	10000526 	beq	r2,zero,803e68 <alt_iic_isr_register+0xb4>
  803e54:	e0bff817 	ldw	r2,-32(fp)
  803e58:	100b883a 	mov	r5,r2
  803e5c:	e13ffc17 	ldw	r4,-16(fp)
  803e60:	0803c240 	call	803c24 <alt_ic_irq_enable>
  803e64:	00000406 	br	803e78 <alt_iic_isr_register+0xc4>
  803e68:	e0bff817 	ldw	r2,-32(fp)
  803e6c:	100b883a 	mov	r5,r2
  803e70:	e13ffc17 	ldw	r4,-16(fp)
  803e74:	0803cc40 	call	803cc4 <alt_ic_irq_disable>
  803e78:	e0bff715 	stw	r2,-36(fp)
  803e7c:	e0bffa17 	ldw	r2,-24(fp)
  803e80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803e84:	e0bff917 	ldw	r2,-28(fp)
  803e88:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  803e8c:	e0bff717 	ldw	r2,-36(fp)
}
  803e90:	e037883a 	mov	sp,fp
  803e94:	dfc00117 	ldw	ra,4(sp)
  803e98:	df000017 	ldw	fp,0(sp)
  803e9c:	dec00204 	addi	sp,sp,8
  803ea0:	f800283a 	ret

00803ea4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  803ea4:	defff804 	addi	sp,sp,-32
  803ea8:	dfc00715 	stw	ra,28(sp)
  803eac:	df000615 	stw	fp,24(sp)
  803eb0:	dc000515 	stw	r16,20(sp)
  803eb4:	df000604 	addi	fp,sp,24
  803eb8:	e13ffb15 	stw	r4,-20(fp)
  803ebc:	e17ffc15 	stw	r5,-16(fp)
  803ec0:	e1bffd15 	stw	r6,-12(fp)
  803ec4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  803ec8:	e1bffe17 	ldw	r6,-8(fp)
  803ecc:	e17ffd17 	ldw	r5,-12(fp)
  803ed0:	e13ffc17 	ldw	r4,-16(fp)
  803ed4:	08041480 	call	804148 <open>
  803ed8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  803edc:	e0bffa17 	ldw	r2,-24(fp)
  803ee0:	10002216 	blt	r2,zero,803f6c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  803ee4:	04002034 	movhi	r16,128
  803ee8:	84137804 	addi	r16,r16,19936
  803eec:	e0bffa17 	ldw	r2,-24(fp)
  803ef0:	01400304 	movi	r5,12
  803ef4:	1009883a 	mov	r4,r2
  803ef8:	0801f2c0 	call	801f2c <__mulsi3>
  803efc:	8085883a 	add	r2,r16,r2
  803f00:	10c00017 	ldw	r3,0(r2)
  803f04:	e0bffb17 	ldw	r2,-20(fp)
  803f08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  803f0c:	04002034 	movhi	r16,128
  803f10:	84137804 	addi	r16,r16,19936
  803f14:	e0bffa17 	ldw	r2,-24(fp)
  803f18:	01400304 	movi	r5,12
  803f1c:	1009883a 	mov	r4,r2
  803f20:	0801f2c0 	call	801f2c <__mulsi3>
  803f24:	8085883a 	add	r2,r16,r2
  803f28:	10800104 	addi	r2,r2,4
  803f2c:	10c00017 	ldw	r3,0(r2)
  803f30:	e0bffb17 	ldw	r2,-20(fp)
  803f34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803f38:	04002034 	movhi	r16,128
  803f3c:	84137804 	addi	r16,r16,19936
  803f40:	e0bffa17 	ldw	r2,-24(fp)
  803f44:	01400304 	movi	r5,12
  803f48:	1009883a 	mov	r4,r2
  803f4c:	0801f2c0 	call	801f2c <__mulsi3>
  803f50:	8085883a 	add	r2,r16,r2
  803f54:	10800204 	addi	r2,r2,8
  803f58:	10c00017 	ldw	r3,0(r2)
  803f5c:	e0bffb17 	ldw	r2,-20(fp)
  803f60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  803f64:	e13ffa17 	ldw	r4,-24(fp)
  803f68:	08042a80 	call	8042a8 <alt_release_fd>
  }
} 
  803f6c:	0001883a 	nop
  803f70:	e6ffff04 	addi	sp,fp,-4
  803f74:	dfc00217 	ldw	ra,8(sp)
  803f78:	df000117 	ldw	fp,4(sp)
  803f7c:	dc000017 	ldw	r16,0(sp)
  803f80:	dec00304 	addi	sp,sp,12
  803f84:	f800283a 	ret

00803f88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  803f88:	defffb04 	addi	sp,sp,-20
  803f8c:	dfc00415 	stw	ra,16(sp)
  803f90:	df000315 	stw	fp,12(sp)
  803f94:	df000304 	addi	fp,sp,12
  803f98:	e13ffd15 	stw	r4,-12(fp)
  803f9c:	e17ffe15 	stw	r5,-8(fp)
  803fa0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  803fa4:	01c07fc4 	movi	r7,511
  803fa8:	01800044 	movi	r6,1
  803fac:	e17ffd17 	ldw	r5,-12(fp)
  803fb0:	01002034 	movhi	r4,128
  803fb4:	21137b04 	addi	r4,r4,19948
  803fb8:	0803ea40 	call	803ea4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  803fbc:	01c07fc4 	movi	r7,511
  803fc0:	000d883a 	mov	r6,zero
  803fc4:	e17ffe17 	ldw	r5,-8(fp)
  803fc8:	01002034 	movhi	r4,128
  803fcc:	21137804 	addi	r4,r4,19936
  803fd0:	0803ea40 	call	803ea4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803fd4:	01c07fc4 	movi	r7,511
  803fd8:	01800044 	movi	r6,1
  803fdc:	e17fff17 	ldw	r5,-4(fp)
  803fe0:	01002034 	movhi	r4,128
  803fe4:	21137e04 	addi	r4,r4,19960
  803fe8:	0803ea40 	call	803ea4 <alt_open_fd>
}  
  803fec:	0001883a 	nop
  803ff0:	e037883a 	mov	sp,fp
  803ff4:	dfc00117 	ldw	ra,4(sp)
  803ff8:	df000017 	ldw	fp,0(sp)
  803ffc:	dec00204 	addi	sp,sp,8
  804000:	f800283a 	ret

00804004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804004:	defffe04 	addi	sp,sp,-8
  804008:	dfc00115 	stw	ra,4(sp)
  80400c:	df000015 	stw	fp,0(sp)
  804010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804014:	00802034 	movhi	r2,128
  804018:	1093e404 	addi	r2,r2,20368
  80401c:	10800017 	ldw	r2,0(r2)
  804020:	10000526 	beq	r2,zero,804038 <alt_get_errno+0x34>
  804024:	00802034 	movhi	r2,128
  804028:	1093e404 	addi	r2,r2,20368
  80402c:	10800017 	ldw	r2,0(r2)
  804030:	103ee83a 	callr	r2
  804034:	00000206 	br	804040 <alt_get_errno+0x3c>
  804038:	00802034 	movhi	r2,128
  80403c:	1095b504 	addi	r2,r2,22228
}
  804040:	e037883a 	mov	sp,fp
  804044:	dfc00117 	ldw	ra,4(sp)
  804048:	df000017 	ldw	fp,0(sp)
  80404c:	dec00204 	addi	sp,sp,8
  804050:	f800283a 	ret

00804054 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804054:	defffb04 	addi	sp,sp,-20
  804058:	dfc00415 	stw	ra,16(sp)
  80405c:	df000315 	stw	fp,12(sp)
  804060:	dc000215 	stw	r16,8(sp)
  804064:	df000304 	addi	fp,sp,12
  804068:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80406c:	e0bffe17 	ldw	r2,-8(fp)
  804070:	10800217 	ldw	r2,8(r2)
  804074:	10d00034 	orhi	r3,r2,16384
  804078:	e0bffe17 	ldw	r2,-8(fp)
  80407c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804080:	e03ffd15 	stw	zero,-12(fp)
  804084:	00002306 	br	804114 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804088:	04002034 	movhi	r16,128
  80408c:	84137804 	addi	r16,r16,19936
  804090:	e0bffd17 	ldw	r2,-12(fp)
  804094:	01400304 	movi	r5,12
  804098:	1009883a 	mov	r4,r2
  80409c:	0801f2c0 	call	801f2c <__mulsi3>
  8040a0:	8085883a 	add	r2,r16,r2
  8040a4:	10c00017 	ldw	r3,0(r2)
  8040a8:	e0bffe17 	ldw	r2,-8(fp)
  8040ac:	10800017 	ldw	r2,0(r2)
  8040b0:	1880151e 	bne	r3,r2,804108 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8040b4:	04002034 	movhi	r16,128
  8040b8:	84137804 	addi	r16,r16,19936
  8040bc:	e0bffd17 	ldw	r2,-12(fp)
  8040c0:	01400304 	movi	r5,12
  8040c4:	1009883a 	mov	r4,r2
  8040c8:	0801f2c0 	call	801f2c <__mulsi3>
  8040cc:	8085883a 	add	r2,r16,r2
  8040d0:	10800204 	addi	r2,r2,8
  8040d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8040d8:	10000b0e 	bge	r2,zero,804108 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8040dc:	01400304 	movi	r5,12
  8040e0:	e13ffd17 	ldw	r4,-12(fp)
  8040e4:	0801f2c0 	call	801f2c <__mulsi3>
  8040e8:	1007883a 	mov	r3,r2
  8040ec:	00802034 	movhi	r2,128
  8040f0:	10937804 	addi	r2,r2,19936
  8040f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8040f8:	e0bffe17 	ldw	r2,-8(fp)
  8040fc:	18800226 	beq	r3,r2,804108 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804100:	00bffcc4 	movi	r2,-13
  804104:	00000a06 	br	804130 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804108:	e0bffd17 	ldw	r2,-12(fp)
  80410c:	10800044 	addi	r2,r2,1
  804110:	e0bffd15 	stw	r2,-12(fp)
  804114:	00802034 	movhi	r2,128
  804118:	1093e304 	addi	r2,r2,20364
  80411c:	10800017 	ldw	r2,0(r2)
  804120:	1007883a 	mov	r3,r2
  804124:	e0bffd17 	ldw	r2,-12(fp)
  804128:	18bfd72e 	bgeu	r3,r2,804088 <__alt_data_end+0xff804088>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80412c:	0005883a 	mov	r2,zero
}
  804130:	e6ffff04 	addi	sp,fp,-4
  804134:	dfc00217 	ldw	ra,8(sp)
  804138:	df000117 	ldw	fp,4(sp)
  80413c:	dc000017 	ldw	r16,0(sp)
  804140:	dec00304 	addi	sp,sp,12
  804144:	f800283a 	ret

00804148 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804148:	defff604 	addi	sp,sp,-40
  80414c:	dfc00915 	stw	ra,36(sp)
  804150:	df000815 	stw	fp,32(sp)
  804154:	df000804 	addi	fp,sp,32
  804158:	e13ffd15 	stw	r4,-12(fp)
  80415c:	e17ffe15 	stw	r5,-8(fp)
  804160:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804164:	00bfffc4 	movi	r2,-1
  804168:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80416c:	00bffb44 	movi	r2,-19
  804170:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  804174:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804178:	01402034 	movhi	r5,128
  80417c:	2953e104 	addi	r5,r5,20356
  804180:	e13ffd17 	ldw	r4,-12(fp)
  804184:	0803b240 	call	803b24 <alt_find_dev>
  804188:	e0bff815 	stw	r2,-32(fp)
  80418c:	e0bff817 	ldw	r2,-32(fp)
  804190:	1000051e 	bne	r2,zero,8041a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804194:	e13ffd17 	ldw	r4,-12(fp)
  804198:	08043500 	call	804350 <alt_find_file>
  80419c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8041a0:	00800044 	movi	r2,1
  8041a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8041a8:	e0bff817 	ldw	r2,-32(fp)
  8041ac:	10002b26 	beq	r2,zero,80425c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8041b0:	e13ff817 	ldw	r4,-32(fp)
  8041b4:	08044640 	call	804464 <alt_get_fd>
  8041b8:	e0bff915 	stw	r2,-28(fp)
  8041bc:	e0bff917 	ldw	r2,-28(fp)
  8041c0:	1000030e 	bge	r2,zero,8041d0 <open+0x88>
    {
      status = index;
  8041c4:	e0bff917 	ldw	r2,-28(fp)
  8041c8:	e0bffa15 	stw	r2,-24(fp)
  8041cc:	00002506 	br	804264 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  8041d0:	01400304 	movi	r5,12
  8041d4:	e13ff917 	ldw	r4,-28(fp)
  8041d8:	0801f2c0 	call	801f2c <__mulsi3>
  8041dc:	1007883a 	mov	r3,r2
  8041e0:	00802034 	movhi	r2,128
  8041e4:	10937804 	addi	r2,r2,19936
  8041e8:	1885883a 	add	r2,r3,r2
  8041ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8041f0:	e0fffe17 	ldw	r3,-8(fp)
  8041f4:	00900034 	movhi	r2,16384
  8041f8:	10bfffc4 	addi	r2,r2,-1
  8041fc:	1886703a 	and	r3,r3,r2
  804200:	e0bffc17 	ldw	r2,-16(fp)
  804204:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804208:	e0bffb17 	ldw	r2,-20(fp)
  80420c:	1000051e 	bne	r2,zero,804224 <open+0xdc>
  804210:	e13ffc17 	ldw	r4,-16(fp)
  804214:	08040540 	call	804054 <alt_file_locked>
  804218:	e0bffa15 	stw	r2,-24(fp)
  80421c:	e0bffa17 	ldw	r2,-24(fp)
  804220:	10001016 	blt	r2,zero,804264 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804224:	e0bff817 	ldw	r2,-32(fp)
  804228:	10800317 	ldw	r2,12(r2)
  80422c:	10000826 	beq	r2,zero,804250 <open+0x108>
  804230:	e0bff817 	ldw	r2,-32(fp)
  804234:	10800317 	ldw	r2,12(r2)
  804238:	e1ffff17 	ldw	r7,-4(fp)
  80423c:	e1bffe17 	ldw	r6,-8(fp)
  804240:	e17ffd17 	ldw	r5,-12(fp)
  804244:	e13ffc17 	ldw	r4,-16(fp)
  804248:	103ee83a 	callr	r2
  80424c:	00000106 	br	804254 <open+0x10c>
  804250:	0005883a 	mov	r2,zero
  804254:	e0bffa15 	stw	r2,-24(fp)
  804258:	00000206 	br	804264 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80425c:	00bffb44 	movi	r2,-19
  804260:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804264:	e0bffa17 	ldw	r2,-24(fp)
  804268:	1000090e 	bge	r2,zero,804290 <open+0x148>
  {
    alt_release_fd (index);  
  80426c:	e13ff917 	ldw	r4,-28(fp)
  804270:	08042a80 	call	8042a8 <alt_release_fd>
    ALT_ERRNO = -status;
  804274:	08040040 	call	804004 <alt_get_errno>
  804278:	1007883a 	mov	r3,r2
  80427c:	e0bffa17 	ldw	r2,-24(fp)
  804280:	0085c83a 	sub	r2,zero,r2
  804284:	18800015 	stw	r2,0(r3)
    return -1;
  804288:	00bfffc4 	movi	r2,-1
  80428c:	00000106 	br	804294 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  804290:	e0bff917 	ldw	r2,-28(fp)
}
  804294:	e037883a 	mov	sp,fp
  804298:	dfc00117 	ldw	ra,4(sp)
  80429c:	df000017 	ldw	fp,0(sp)
  8042a0:	dec00204 	addi	sp,sp,8
  8042a4:	f800283a 	ret

008042a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8042a8:	defffc04 	addi	sp,sp,-16
  8042ac:	dfc00315 	stw	ra,12(sp)
  8042b0:	df000215 	stw	fp,8(sp)
  8042b4:	dc000115 	stw	r16,4(sp)
  8042b8:	df000204 	addi	fp,sp,8
  8042bc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  8042c0:	e0bffe17 	ldw	r2,-8(fp)
  8042c4:	108000d0 	cmplti	r2,r2,3
  8042c8:	1000111e 	bne	r2,zero,804310 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  8042cc:	04002034 	movhi	r16,128
  8042d0:	84137804 	addi	r16,r16,19936
  8042d4:	e0bffe17 	ldw	r2,-8(fp)
  8042d8:	01400304 	movi	r5,12
  8042dc:	1009883a 	mov	r4,r2
  8042e0:	0801f2c0 	call	801f2c <__mulsi3>
  8042e4:	8085883a 	add	r2,r16,r2
  8042e8:	10800204 	addi	r2,r2,8
  8042ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8042f0:	04002034 	movhi	r16,128
  8042f4:	84137804 	addi	r16,r16,19936
  8042f8:	e0bffe17 	ldw	r2,-8(fp)
  8042fc:	01400304 	movi	r5,12
  804300:	1009883a 	mov	r4,r2
  804304:	0801f2c0 	call	801f2c <__mulsi3>
  804308:	8085883a 	add	r2,r16,r2
  80430c:	10000015 	stw	zero,0(r2)
  }
}
  804310:	0001883a 	nop
  804314:	e6ffff04 	addi	sp,fp,-4
  804318:	dfc00217 	ldw	ra,8(sp)
  80431c:	df000117 	ldw	fp,4(sp)
  804320:	dc000017 	ldw	r16,0(sp)
  804324:	dec00304 	addi	sp,sp,12
  804328:	f800283a 	ret

0080432c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80432c:	deffff04 	addi	sp,sp,-4
  804330:	df000015 	stw	fp,0(sp)
  804334:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  804338:	000170fa 	wrctl	ienable,zero
}
  80433c:	0001883a 	nop
  804340:	e037883a 	mov	sp,fp
  804344:	df000017 	ldw	fp,0(sp)
  804348:	dec00104 	addi	sp,sp,4
  80434c:	f800283a 	ret

00804350 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  804350:	defffb04 	addi	sp,sp,-20
  804354:	dfc00415 	stw	ra,16(sp)
  804358:	df000315 	stw	fp,12(sp)
  80435c:	df000304 	addi	fp,sp,12
  804360:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  804364:	00802034 	movhi	r2,128
  804368:	1093df04 	addi	r2,r2,20348
  80436c:	10800017 	ldw	r2,0(r2)
  804370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804374:	00003106 	br	80443c <alt_find_file+0xec>
  {
    len = strlen(next->name);
  804378:	e0bffd17 	ldw	r2,-12(fp)
  80437c:	10800217 	ldw	r2,8(r2)
  804380:	1009883a 	mov	r4,r2
  804384:	08023740 	call	802374 <strlen>
  804388:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80438c:	e0bffd17 	ldw	r2,-12(fp)
  804390:	10c00217 	ldw	r3,8(r2)
  804394:	e0bffe17 	ldw	r2,-8(fp)
  804398:	10bfffc4 	addi	r2,r2,-1
  80439c:	1885883a 	add	r2,r3,r2
  8043a0:	10800003 	ldbu	r2,0(r2)
  8043a4:	10803fcc 	andi	r2,r2,255
  8043a8:	1080201c 	xori	r2,r2,128
  8043ac:	10bfe004 	addi	r2,r2,-128
  8043b0:	10800bd8 	cmpnei	r2,r2,47
  8043b4:	1000031e 	bne	r2,zero,8043c4 <alt_find_file+0x74>
    {
      len -= 1;
  8043b8:	e0bffe17 	ldw	r2,-8(fp)
  8043bc:	10bfffc4 	addi	r2,r2,-1
  8043c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8043c4:	e0bffe17 	ldw	r2,-8(fp)
  8043c8:	e0ffff17 	ldw	r3,-4(fp)
  8043cc:	1885883a 	add	r2,r3,r2
  8043d0:	10800003 	ldbu	r2,0(r2)
  8043d4:	10803fcc 	andi	r2,r2,255
  8043d8:	1080201c 	xori	r2,r2,128
  8043dc:	10bfe004 	addi	r2,r2,-128
  8043e0:	10800be0 	cmpeqi	r2,r2,47
  8043e4:	1000081e 	bne	r2,zero,804408 <alt_find_file+0xb8>
  8043e8:	e0bffe17 	ldw	r2,-8(fp)
  8043ec:	e0ffff17 	ldw	r3,-4(fp)
  8043f0:	1885883a 	add	r2,r3,r2
  8043f4:	10800003 	ldbu	r2,0(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10000a1e 	bne	r2,zero,804430 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  804408:	e0bffd17 	ldw	r2,-12(fp)
  80440c:	10800217 	ldw	r2,8(r2)
  804410:	e0fffe17 	ldw	r3,-8(fp)
  804414:	180d883a 	mov	r6,r3
  804418:	e17fff17 	ldw	r5,-4(fp)
  80441c:	1009883a 	mov	r4,r2
  804420:	08045f40 	call	8045f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  804424:	1000021e 	bne	r2,zero,804430 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  804428:	e0bffd17 	ldw	r2,-12(fp)
  80442c:	00000806 	br	804450 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  804430:	e0bffd17 	ldw	r2,-12(fp)
  804434:	10800017 	ldw	r2,0(r2)
  804438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80443c:	e0fffd17 	ldw	r3,-12(fp)
  804440:	00802034 	movhi	r2,128
  804444:	1093df04 	addi	r2,r2,20348
  804448:	18bfcb1e 	bne	r3,r2,804378 <__alt_data_end+0xff804378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80444c:	0005883a 	mov	r2,zero
}
  804450:	e037883a 	mov	sp,fp
  804454:	dfc00117 	ldw	ra,4(sp)
  804458:	df000017 	ldw	fp,0(sp)
  80445c:	dec00204 	addi	sp,sp,8
  804460:	f800283a 	ret

00804464 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  804464:	defffa04 	addi	sp,sp,-24
  804468:	dfc00515 	stw	ra,20(sp)
  80446c:	df000415 	stw	fp,16(sp)
  804470:	dc000315 	stw	r16,12(sp)
  804474:	df000404 	addi	fp,sp,16
  804478:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80447c:	00bffa04 	movi	r2,-24
  804480:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  804484:	e03ffc15 	stw	zero,-16(fp)
  804488:	00002106 	br	804510 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  80448c:	04002034 	movhi	r16,128
  804490:	84137804 	addi	r16,r16,19936
  804494:	e0bffc17 	ldw	r2,-16(fp)
  804498:	01400304 	movi	r5,12
  80449c:	1009883a 	mov	r4,r2
  8044a0:	0801f2c0 	call	801f2c <__mulsi3>
  8044a4:	8085883a 	add	r2,r16,r2
  8044a8:	10800017 	ldw	r2,0(r2)
  8044ac:	1000151e 	bne	r2,zero,804504 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  8044b0:	04002034 	movhi	r16,128
  8044b4:	84137804 	addi	r16,r16,19936
  8044b8:	e0bffc17 	ldw	r2,-16(fp)
  8044bc:	01400304 	movi	r5,12
  8044c0:	1009883a 	mov	r4,r2
  8044c4:	0801f2c0 	call	801f2c <__mulsi3>
  8044c8:	8085883a 	add	r2,r16,r2
  8044cc:	e0fffe17 	ldw	r3,-8(fp)
  8044d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8044d4:	00802034 	movhi	r2,128
  8044d8:	1093e304 	addi	r2,r2,20364
  8044dc:	10c00017 	ldw	r3,0(r2)
  8044e0:	e0bffc17 	ldw	r2,-16(fp)
  8044e4:	1880040e 	bge	r3,r2,8044f8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  8044e8:	00802034 	movhi	r2,128
  8044ec:	1093e304 	addi	r2,r2,20364
  8044f0:	e0fffc17 	ldw	r3,-16(fp)
  8044f4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  8044f8:	e0bffc17 	ldw	r2,-16(fp)
  8044fc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  804500:	00000606 	br	80451c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  804504:	e0bffc17 	ldw	r2,-16(fp)
  804508:	10800044 	addi	r2,r2,1
  80450c:	e0bffc15 	stw	r2,-16(fp)
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	10800810 	cmplti	r2,r2,32
  804518:	103fdc1e 	bne	r2,zero,80448c <__alt_data_end+0xff80448c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80451c:	e0bffd17 	ldw	r2,-12(fp)
}
  804520:	e6ffff04 	addi	sp,fp,-4
  804524:	dfc00217 	ldw	ra,8(sp)
  804528:	df000117 	ldw	fp,4(sp)
  80452c:	dc000017 	ldw	r16,0(sp)
  804530:	dec00304 	addi	sp,sp,12
  804534:	f800283a 	ret

00804538 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  804538:	defffe04 	addi	sp,sp,-8
  80453c:	df000115 	stw	fp,4(sp)
  804540:	df000104 	addi	fp,sp,4
  804544:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  804548:	e0bfff17 	ldw	r2,-4(fp)
  80454c:	10bffe84 	addi	r2,r2,-6
  804550:	10c00428 	cmpgeui	r3,r2,16
  804554:	18001a1e 	bne	r3,zero,8045c0 <alt_exception_cause_generated_bad_addr+0x88>
  804558:	100690ba 	slli	r3,r2,2
  80455c:	00802034 	movhi	r2,128
  804560:	10915c04 	addi	r2,r2,17776
  804564:	1885883a 	add	r2,r3,r2
  804568:	10800017 	ldw	r2,0(r2)
  80456c:	1000683a 	jmp	r2
  804570:	008045b0 	cmpltui	r2,zero,278
  804574:	008045b0 	cmpltui	r2,zero,278
  804578:	008045c0 	call	8045c <__reset-0x77fba4>
  80457c:	008045c0 	call	8045c <__reset-0x77fba4>
  804580:	008045c0 	call	8045c <__reset-0x77fba4>
  804584:	008045b0 	cmpltui	r2,zero,278
  804588:	008045b8 	rdprs	r2,zero,278
  80458c:	008045c0 	call	8045c <__reset-0x77fba4>
  804590:	008045b0 	cmpltui	r2,zero,278
  804594:	008045b0 	cmpltui	r2,zero,278
  804598:	008045c0 	call	8045c <__reset-0x77fba4>
  80459c:	008045b0 	cmpltui	r2,zero,278
  8045a0:	008045b8 	rdprs	r2,zero,278
  8045a4:	008045c0 	call	8045c <__reset-0x77fba4>
  8045a8:	008045c0 	call	8045c <__reset-0x77fba4>
  8045ac:	008045b0 	cmpltui	r2,zero,278
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8045b0:	00800044 	movi	r2,1
  8045b4:	00000306 	br	8045c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8045b8:	0005883a 	mov	r2,zero
  8045bc:	00000106 	br	8045c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8045c0:	0005883a 	mov	r2,zero
  }
}
  8045c4:	e037883a 	mov	sp,fp
  8045c8:	df000017 	ldw	fp,0(sp)
  8045cc:	dec00104 	addi	sp,sp,4
  8045d0:	f800283a 	ret

008045d4 <exit>:
  8045d4:	defffe04 	addi	sp,sp,-8
  8045d8:	000b883a 	mov	r5,zero
  8045dc:	dc000015 	stw	r16,0(sp)
  8045e0:	dfc00115 	stw	ra,4(sp)
  8045e4:	2021883a 	mov	r16,r4
  8045e8:	08046240 	call	804624 <__call_exitprocs>
  8045ec:	8009883a 	mov	r4,r16
  8045f0:	08047b40 	call	8047b4 <_exit>

008045f4 <memcmp>:
  8045f4:	218d883a 	add	r6,r4,r6
  8045f8:	21800826 	beq	r4,r6,80461c <memcmp+0x28>
  8045fc:	20800003 	ldbu	r2,0(r4)
  804600:	28c00003 	ldbu	r3,0(r5)
  804604:	10c00226 	beq	r2,r3,804610 <memcmp+0x1c>
  804608:	10c5c83a 	sub	r2,r2,r3
  80460c:	f800283a 	ret
  804610:	21000044 	addi	r4,r4,1
  804614:	29400044 	addi	r5,r5,1
  804618:	003ff706 	br	8045f8 <__alt_data_end+0xff8045f8>
  80461c:	0005883a 	mov	r2,zero
  804620:	f800283a 	ret

00804624 <__call_exitprocs>:
  804624:	defff504 	addi	sp,sp,-44
  804628:	dd000515 	stw	r20,20(sp)
  80462c:	05002034 	movhi	r20,128
  804630:	dc800315 	stw	r18,12(sp)
  804634:	dfc00a15 	stw	ra,40(sp)
  804638:	df000915 	stw	fp,36(sp)
  80463c:	ddc00815 	stw	r23,32(sp)
  804640:	dd800715 	stw	r22,28(sp)
  804644:	dd400615 	stw	r21,24(sp)
  804648:	dcc00415 	stw	r19,16(sp)
  80464c:	dc400215 	stw	r17,8(sp)
  804650:	dc000115 	stw	r16,4(sp)
  804654:	d9000015 	stw	r4,0(sp)
  804658:	2825883a 	mov	r18,r5
  80465c:	a513da04 	addi	r20,r20,20328
  804660:	a4400017 	ldw	r17,0(r20)
  804664:	8cc00c17 	ldw	r19,48(r17)
  804668:	8c400c04 	addi	r17,r17,48
  80466c:	98004526 	beq	r19,zero,804784 <__call_exitprocs+0x160>
  804670:	9c000117 	ldw	r16,4(r19)
  804674:	00900034 	movhi	r2,16384
  804678:	10bfffc4 	addi	r2,r2,-1
  80467c:	9d402217 	ldw	r21,136(r19)
  804680:	85bfffc4 	addi	r22,r16,-1
  804684:	80a1883a 	add	r16,r16,r2
  804688:	8421883a 	add	r16,r16,r16
  80468c:	8421883a 	add	r16,r16,r16
  804690:	ac2f883a 	add	r23,r21,r16
  804694:	84000204 	addi	r16,r16,8
  804698:	9c21883a 	add	r16,r19,r16
  80469c:	b0002716 	blt	r22,zero,80473c <__call_exitprocs+0x118>
  8046a0:	90000726 	beq	r18,zero,8046c0 <__call_exitprocs+0x9c>
  8046a4:	a800041e 	bne	r21,zero,8046b8 <__call_exitprocs+0x94>
  8046a8:	b5bfffc4 	addi	r22,r22,-1
  8046ac:	bdffff04 	addi	r23,r23,-4
  8046b0:	843fff04 	addi	r16,r16,-4
  8046b4:	003ff906 	br	80469c <__alt_data_end+0xff80469c>
  8046b8:	b9002017 	ldw	r4,128(r23)
  8046bc:	913ffa1e 	bne	r18,r4,8046a8 <__alt_data_end+0xff8046a8>
  8046c0:	99000117 	ldw	r4,4(r19)
  8046c4:	82000017 	ldw	r8,0(r16)
  8046c8:	213fffc4 	addi	r4,r4,-1
  8046cc:	b100021e 	bne	r22,r4,8046d8 <__call_exitprocs+0xb4>
  8046d0:	9d800115 	stw	r22,4(r19)
  8046d4:	00000106 	br	8046dc <__call_exitprocs+0xb8>
  8046d8:	80000015 	stw	zero,0(r16)
  8046dc:	403ff226 	beq	r8,zero,8046a8 <__alt_data_end+0xff8046a8>
  8046e0:	9f000117 	ldw	fp,4(r19)
  8046e4:	a8000526 	beq	r21,zero,8046fc <__call_exitprocs+0xd8>
  8046e8:	00800044 	movi	r2,1
  8046ec:	1592983a 	sll	r9,r2,r22
  8046f0:	a9404017 	ldw	r5,256(r21)
  8046f4:	494a703a 	and	r5,r9,r5
  8046f8:	2800021e 	bne	r5,zero,804704 <__call_exitprocs+0xe0>
  8046fc:	403ee83a 	callr	r8
  804700:	00000906 	br	804728 <__call_exitprocs+0x104>
  804704:	a9004117 	ldw	r4,260(r21)
  804708:	4908703a 	and	r4,r9,r4
  80470c:	2000041e 	bne	r4,zero,804720 <__call_exitprocs+0xfc>
  804710:	b9400017 	ldw	r5,0(r23)
  804714:	d9000017 	ldw	r4,0(sp)
  804718:	403ee83a 	callr	r8
  80471c:	00000206 	br	804728 <__call_exitprocs+0x104>
  804720:	b9000017 	ldw	r4,0(r23)
  804724:	403ee83a 	callr	r8
  804728:	99000117 	ldw	r4,4(r19)
  80472c:	e13fcc1e 	bne	fp,r4,804660 <__alt_data_end+0xff804660>
  804730:	89000017 	ldw	r4,0(r17)
  804734:	993fdc26 	beq	r19,r4,8046a8 <__alt_data_end+0xff8046a8>
  804738:	003fc906 	br	804660 <__alt_data_end+0xff804660>
  80473c:	00802034 	movhi	r2,128
  804740:	1087e004 	addi	r2,r2,8064
  804744:	10000f26 	beq	r2,zero,804784 <__call_exitprocs+0x160>
  804748:	99400117 	ldw	r5,4(r19)
  80474c:	99000017 	ldw	r4,0(r19)
  804750:	2800091e 	bne	r5,zero,804778 <__call_exitprocs+0x154>
  804754:	20000826 	beq	r4,zero,804778 <__call_exitprocs+0x154>
  804758:	89000015 	stw	r4,0(r17)
  80475c:	a8000226 	beq	r21,zero,804768 <__call_exitprocs+0x144>
  804760:	a809883a 	mov	r4,r21
  804764:	0801f800 	call	801f80 <free>
  804768:	9809883a 	mov	r4,r19
  80476c:	0801f800 	call	801f80 <free>
  804770:	8cc00017 	ldw	r19,0(r17)
  804774:	003fbd06 	br	80466c <__alt_data_end+0xff80466c>
  804778:	9823883a 	mov	r17,r19
  80477c:	2027883a 	mov	r19,r4
  804780:	003fba06 	br	80466c <__alt_data_end+0xff80466c>
  804784:	dfc00a17 	ldw	ra,40(sp)
  804788:	df000917 	ldw	fp,36(sp)
  80478c:	ddc00817 	ldw	r23,32(sp)
  804790:	dd800717 	ldw	r22,28(sp)
  804794:	dd400617 	ldw	r21,24(sp)
  804798:	dd000517 	ldw	r20,20(sp)
  80479c:	dcc00417 	ldw	r19,16(sp)
  8047a0:	dc800317 	ldw	r18,12(sp)
  8047a4:	dc400217 	ldw	r17,8(sp)
  8047a8:	dc000117 	ldw	r16,4(sp)
  8047ac:	dec00b04 	addi	sp,sp,44
  8047b0:	f800283a 	ret

008047b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8047b4:	defffd04 	addi	sp,sp,-12
  8047b8:	df000215 	stw	fp,8(sp)
  8047bc:	df000204 	addi	fp,sp,8
  8047c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8047c4:	0001883a 	nop
  8047c8:	e0bfff17 	ldw	r2,-4(fp)
  8047cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8047d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8047d4:	10000226 	beq	r2,zero,8047e0 <_exit+0x2c>
    ALT_SIM_FAIL();
  8047d8:	002af070 	cmpltui	zero,zero,43969
  8047dc:	00000106 	br	8047e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8047e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8047e4:	003fff06 	br	8047e4 <__alt_data_end+0xff8047e4>
