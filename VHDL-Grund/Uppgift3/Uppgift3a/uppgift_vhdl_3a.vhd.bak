library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
entity uppgift_3a is
port (
clk : in std_logic;
reset_n : in std_logic;
key : in std_logic;
led : out std_logic_vector(2 downto 0));
end entity uppgift_3a;
architecture rtl of uppgift_3a is
signal counter_value : std_logic_vector(2 downto 0); -- signal to store counter in
signal old_key : std_logic; -- dont know what to do with this signal
begin
process(clk, reset_n)
begin
if rising_edge(clk) then -- it should NOT be a synchronus reset
if reset_n = '0' then -- This need to be changed to a asynchronus reset!!!
-- reset code
counter_value <= (others => '0'); -- clear signal
old_key <= '1'; -- clear old key signal
else
-- regular code
if key = '0' then -- If the key is pressed the counter should increment
counter_value <= counter_value + 1; -- increment counter signal
else
counter_value <= counter_value; -- leave counter value
end if;
end if;
end if;
end process;
-- concurrent statements
led <= counter_value; -- output signal to leds
end rtl;