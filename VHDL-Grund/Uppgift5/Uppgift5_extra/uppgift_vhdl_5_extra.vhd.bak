--
------------------
-- Company: TEIS AB
-- Engineer: Lasse Karagiannis
-- 
-- Create Date: 2016 October 15
-- Design Name: uppgift_vhdl_3a.vhd
-- Target Devices: ALTERA Cyclone IV EP4CE115F29C7
-- Tool versions: Quartus v16.0 and ModelSim 
-- Testbench file: 
-- Do file: 
-- Description:
-- 	Mealy-Moore state machine "Door without lock"
-- 
-- In_signals:
-- KEY(0) to unlock push this button first 
-- KEY(1) to unlock push this button immediately after KEY(2)  
-- KEY(2) to unlock push this button immediately after KEY(0) 
-- KEY(3) = nedtryckt; LÃ¥s upp.
-- SW(9) = Reset_n och
-- CLK_50 = CLOCK50

-- Out_signals:
-- door_unlocked LEDR[0] = light when door is unlocked
-- door_locked   LEDR[1] = light when door is locked
-- fel_sekvens   LEDR[2] =  light when wronmg sequence
-- 
--
-- Validated with "ModelSim - Altera" and verified with DE2-115 board
-- 
------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity uppgift_vhdl_4_Mealy_Moore is
port(
		    clk 		: in std_logic;
			 reset_n : in std_logic;
			 key0 	: in std_logic;
			 key1		: in std_logic;
			 key2		: in std_logic;
			 key3_lock_command: in std_logic;
			 ledr0_unlocked : out std_logic;
			 ledr1_locked 	: out std_logic;
			 ledr2_wrong_sequence : out std_logic

);
end entity uppgift_vhdl_4_Mealy_Moore;


architecture rtl of uppgift_vhdl_4_Mealy_Moore is

		type state_type1 is (unlocked, locked);
		signal door_lock_state : state_type1;
		
		type state_type2 is (button1_correct_in_sequence,
									button2_correct_in_sequence,
									button3_correct_in_sequence,
									button4_lock_button_is_pushed,
									wrong_sequence);
									
		signal key_input_state : state_type2;
		
		attribute syn_encoding : string;
      attribute syn_encoding of state_type : type is "gray";
begin
	

      master_state_machine: process(clk, reset_n)
		begin
			if reset_n = '0' then -- This need to be changed to a asynchronus reset!!!
					-- reset code
				state <= locked;
					
			elsif rising_edge(clk) then
					-- regular code
					case door_lock_state is					
						when locked =>
							if key_input_state = button3_correct_in_sequence then
								door_lock_state <= unlocked;
							else
								door_lock_state <= locked;
							end if;
							 
						when unlocked	=>
							if key_input_state = button4_lock_button_is_pushed then 
								door_lock_state <= locked;
							else
								door_lock_state <= unlocked;
							end if;						
					end case;									
			end if;
		end process master_state_machine;
		
		button_state_machine: process(clk)
		
		
end rtl;